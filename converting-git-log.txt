commit 903913e53fa2e0e13be14cbc844447157fc69233
Merge: 2b4d3ea 0b2e70a
Author: HANFU XIAO <hxiao15@mySeneca.ca>
Date:   Wed Dec 6 21:18:43 2023 -0500

    Merge branch 'main' of https://github.com/xiaohanfu123/CPR101-Final-Project

commit 0b2e70a60519f9df0e29dc0bc8927c376b63e3ae
Merge: 04bddf0 0ccec2a
Author: whchau1 <150992867+whchau1@users.noreply.github.com>
Date:   Wed Dec 6 21:12:17 2023 -0500

    Merge pull request #10 from xiaohanfu123/tokenizing
    
    Tokenizing

commit 0ccec2ad3980c0b80a5bfbdc09d23c917f820f28
Merge: f247b10 04bddf0
Author: whchau1 <whchau1@myseneca.ca>
Date:   Wed Dec 6 21:03:22 2023 -0500

    Merge into main

commit f247b107760f35d6d2b9f8a3e45c8c84f2824cac
Author: whchau1 <whchau1@myseneca.ca>
Date:   Wed Dec 6 20:55:28 2023 -0500

    V3 - update git log

diff --git a/tokenizing-git-log.txt b/tokenizing-git-log.txt
index a6d7e83..a043dda 100644
--- a/tokenizing-git-log.txt
+++ b/tokenizing-git-log.txt
@@ -1,3 +1,525 @@
+commit 2eba2268790551b3e40fce141f35a17cf41d95ea
+Author: whchau1 <whchau1@myseneca.ca>
+Date:   Wed Dec 6 20:54:29 2023 -0500
+
+    V3 - submit the git log for tokenizing
+
+diff --git a/tokenizing-git-log.txt b/tokenizing-git-log.txt
+new file mode 100644
+index 0000000..a6d7e83
+--- /dev/null
++++ b/tokenizing-git-log.txt
+@@ -0,0 +1,509 @@
++commit 7597e9cb8d67b146b86f3d9c7ec732b654bd43c4
++Author: whchau1 <whchau1@myseneca.ca>
++Date:   Wed Dec 6 20:50:12 2023 -0500
++
++    V3
++
++diff --git a/tokenizing-test-cases.xlsx b/tokenizing-test-cases.xlsx
++index a5db0a7..ca677c1 100644
++Binary files a/tokenizing-test-cases.xlsx and b/tokenizing-test-cases.xlsx differ
++diff --git a/tokenizing.c b/tokenizing.c
++index 6caea55..ec654f6 100644
++--- a/tokenizing.c
+++++ b/tokenizing.c
++@@ -2,7 +2,7 @@
++ Author: Wing Ho Chau
++ Email: myseneca@myseneca.ca
++ ID: 150924231
++-Date Written: 12-1-2023
+++Date Written: 12-6-2023
++ Course: CPR101.NNN
++ Final Project
++ */
++@@ -22,7 +22,7 @@ void tokenizing() {
++ 	//do {
++ 	//	printf("Type a few words separated by space (q - to quit):\n");
++ 	//	fgets(words, BUFFER_SIZE, stdin);  //receives input from user and store in words[]
++-	//	words[strlen(words) - 1] = '\0';  //Put a null terminator to the end of array
+++	//	words[strlen(words) - 1] = '\0';  //Put a null terminator to the end of array to end the array
++ 	//	if (strcmp(words, "q") != 0) {  //Do the tokenizing if user doesn't input 'q'
++ 	//		nextWord = strtok(words, " ");  //use of tokenizing function to tokenize the word by delimiter 'whitespace'
++ 	//		wordsCounter = 1;  //Count the words, start with 1
++@@ -36,29 +36,45 @@ void tokenizing() {
++ 
++ 
++ /* Version 2 */
++-//>> insert here
+++	//printf("*** Start of Tokenizing Words Demo ***\n");
+++	//char phrases[BUFFER_SIZE];  //phrases will be used for user input
+++	//char* nextPhrase = NULL;  //nextPhrase is an array to store the return of tokenized strings.
+++	//int phrasesCounter;  //phrasesCounter will be used to count how many tokenized phrases are in the delimited input
+++
+++	//do {
+++	//	printf("Type a few words separated by space (q - to quit):\n");
+++	//	fgets(phrases, BUFFER_SIZE, stdin);  //receives input from user and store in phrases[]
+++	//	phrases[strlen(phrases) - 1] = '\0';  //Put a null terminator to the end of array to end the array
+++	//	if (strcmp(phrases, "q") != 0) {  //Do the tokenizing if user doesn't input 'q'
+++	//		nextPhrase = strtok(phrases, ",");  //use of tokenizing function to tokenize the input by delimiter ','(comma)
+++	//		phrasesCounter = 1;  //Count the words, start with 1
+++	//		while (nextPhrase) {  //A loop for printing tokenized phrases unless no more are found
+++	//			printf("Phrase #%d is \'%s\'\n", phrasesCounter++, nextPhrase); //Print the tokenized phrases
+++	//			nextPhrase = strtok(NULL, ",");  //Get the next tokenized phrases
+++	//		}
+++	//	}
+++	//} while (strcmp(phrases, "q") != 0);  //infinite loop unless 'q' is input by user
+++	//printf("*** End of Tokenizing Words Demo ***\n\n");
+++
+++/* Version 3 */
++ 	printf("*** Start of Tokenizing Words Demo ***\n");
++-	char phrases[BUFFER_SIZE];  //phrases will be used for user input and is the argument for 
++-	char* nextPhrase = NULL;  //nextPhrase is an array to store the return of tokenized strings.
++-	int phrasesCounter;  //phrasesCounter will be used to count how many tokenized phrases are in the delimited input
+++	char sentences[BUFFER_SIZE];  //sentences will be used for user input
+++	char* nextSentence = NULL;  //nextSentences is an array to store the return of tokenized strings.
+++	int sentencesCounter;  //sentencesCounter will be used to count how many sentences are in the delimited input
++ 
++ 	do {
++ 		printf("Type a few words separated by space (q - to quit):\n");
++-		fgets(phrases, BUFFER_SIZE, stdin);  //receives input from user and store in phrases[]
++-		phrases[strlen(phrases) - 1] = '\0';  //Put a null terminator to the end of array
++-		if (strcmp(phrases, "q") != 0) {  //Do the tokenizing if user doesn't input 'q'
++-			nextPhrase = strtok(phrases, ",");  //use of tokenizing function to tokenize the input by delimiter ','(comma)
++-			phrasesCounter = 1;  //Count the words, start with 1
++-			while (nextPhrase) {  //A loop for printing tokenized phrases unless no more are found
++-				printf("Phrase #%d is \'%s\'\n", phrasesCounter++, nextPhrase); //Print the tokenized phrases
++-				nextPhrase = strtok(NULL, ",");  //Get the next tokenized phrases
+++		fgets(sentences, BUFFER_SIZE, stdin);  //receives input from user and store in sentences[]
+++		sentences[strlen(sentences) - 1] = '\0';  //Put a null terminator to the end the array to end the array
+++		if (strcmp(sentences, "q") != 0) {  //Do the tokenizing if user doesn't input 'q'
+++			nextSentence = strtok(sentences, ".");  //use of tokenizing function to tokenize the word by delimiter '.'
+++			sentencesCounter = 1;  //Count the sentences, start with 1
+++			while (nextSentence) {  //A loop for printing tokenized sentences unless no more are found
+++				printf("Sentence #%d is \'%s\'\n", sentencesCounter++, nextSentence); //Print the tokenized sentences
+++				nextSentence = strtok(NULL, ".");  //Get the next tokenized sentences
++ 			}
++ 		}
++-	} while (strcmp(phrases, "q") != 0);  //infinite loop unless 'q' is input by user
+++	} while (strcmp(sentences, "q") != 0);  //infinite loop unless 'q' is input by user
++ 	printf("*** End of Tokenizing Words Demo ***\n\n");
++ 
++-/* Version 3 */
++-//>> insert here
++-
++-
++ }
++\ No newline at end of file
++diff --git a/tokenizing_testing.txt b/tokenizing_testing.txt
++index 661a37a..ad903df 100644
++--- a/tokenizing_testing.txt
+++++ b/tokenizing_testing.txt
++@@ -104,4 +104,80 @@ Test case 6:Type a few words separated by space (q - to quit):
++ q,123
++ Phrase #1 is 'q'
++ Phrase #2 is '123'
+++*** End of Tokenizing Words Demo ***
+++
+++
+++------Version 3-------
+++Test case 1:
+++*** Start of Tokenizing Words Demo ***
+++Type a few words separated by space (q - to quit):
+++I am here. I am going to test this program. This is test case 1.
+++Sentence #1 is 'I am here'
+++Sentence #2 is ' I am going to test this program'
+++Sentence #3 is ' This is test case 1'
+++Type a few words separated by space (q - to quit):
+++
+++
+++Test case 2:
+++Type a few words separated by space (q - to quit):
+++This is test case 2, and it has no period in the sentences
+++Sentence #1 is 'This is test case 2, and it has no period in the sentences'
+++Type a few words separated by space (q - to quit):
+++
+++
+++Test case 3:
+++Type a few words separated by space (q - to quit):
+++This is test case 3.....I put five period between sentences
+++Sentence #1 is 'This is test case 3'
+++Sentence #2 is 'I put five period between sentences'
+++Type a few words separated by space (q - to quit):
+++
+++
+++Test case 4:
+++Type a few words separated by space (q - to quit):
+++This is sentence 1.This is sentence 2.This is sentence 3.This is sentence 4.This is sentence 5.This is sentence 6.This is sentence 7.This is sentence 8.This is sentence 9.This is sentence 10.This is sentence 11.This is sentence 12.This is sentence 13.This is sentence 14.This is sentence 15.This is sentence 16.This is sentence 17.This is sentence 18.This is sentence 19.This is sentence 20.This is sentence 21.This is sentence 22.This is sentence 23.This is sentence 24
+++Sentence #1 is 'This is sentence 1'
+++Sentence #2 is 'This is sentence 2'
+++Sentence #3 is 'This is sentence 3'
+++Sentence #4 is 'This is sentence 4'
+++Sentence #5 is 'This is sentence 5'
+++Sentence #6 is 'This is sentence 6'
+++Sentence #7 is 'This is sentence 7'
+++Sentence #8 is 'This is sentence 8'
+++Sentence #9 is 'This is sentence 9'
+++Sentence #10 is 'This is sentence 10'
+++Sentence #11 is 'This is sentence 11'
+++Sentence #12 is 'This is sentence 12'
+++Sentence #13 is 'This is sentence 13'
+++Sentence #14 is 'This is sentence 14'
+++Sentence #15 is 'This is sentence 15'
+++Sentence #16 is 'This is'
+++Type a few words separated by space (q - to quit):
+++Sentence #1 is 'sentence 16'
+++Sentence #2 is 'This is sentence 17'
+++Sentence #3 is 'This is sentence 18'
+++Sentence #4 is 'This is sentence 19'
+++Sentence #5 is 'This is sentence 20'
+++Sentence #6 is 'This is sentence 21'
+++Sentence #7 is 'This is sentence 22'
+++Sentence #8 is 'This is sentence 23'
+++Sentence #9 is 'This is sentence 24'
+++Type a few words separated by space (q - to quit):
+++
+++
+++Test case 5:
+++Type a few words separated by space (q - to quit):
+++question one. question two. answer
+++Sentence #1 is 'question one'
+++Sentence #2 is ' question two'
+++Sentence #3 is ' answer'
+++Type a few words separated by space (q - to quit):
+++
+++
+++Test csae 6:
+++Type a few words separated by space (q - to quit):
+++q. This is test case 6. If the promgram is correct, the loop with continues.
+++Sentence #1 is 'q'
+++Sentence #2 is ' This is test case 6'
+++Sentence #3 is ' If the promgram is correct, the loop with continues'
++ *** End of Tokenizing Words Demo ***
++\ No newline at end of file
++
++commit 6400cfc1dca1c37ed5f8adbc1137647cb75b6fc5
++Author: whchau1 <whchau1@myseneca.ca>
++Date:   Wed Dec 6 04:13:06 2023 -0500
++
++    V2
++
++diff --git a/tokenizing-test-cases.xlsx b/tokenizing-test-cases.xlsx
++index 8f78ee1..a5db0a7 100644
++Binary files a/tokenizing-test-cases.xlsx and b/tokenizing-test-cases.xlsx differ
++diff --git a/tokenizing.c b/tokenizing.c
++index f0b6640..6caea55 100644
++--- a/tokenizing.c
+++++ b/tokenizing.c
++@@ -14,31 +14,49 @@ Final Project
++ 
++ void tokenizing() {
++ 	/* Version 1 */
+++	//printf("*** Start of Tokenizing Words Demo ***\n");
+++	//char words[BUFFER_SIZE];  //words will be used for user input
+++	//char* nextWord = NULL;  //nextWord is an array to store the return of tokenized strings.
+++	//int wordsCounter;  //wordsCounter will be used to count how many tokenized words are in the delimited input
+++
+++	//do {
+++	//	printf("Type a few words separated by space (q - to quit):\n");
+++	//	fgets(words, BUFFER_SIZE, stdin);  //receives input from user and store in words[]
+++	//	words[strlen(words) - 1] = '\0';  //Put a null terminator to the end of array
+++	//	if (strcmp(words, "q") != 0) {  //Do the tokenizing if user doesn't input 'q'
+++	//		nextWord = strtok(words, " ");  //use of tokenizing function to tokenize the word by delimiter 'whitespace'
+++	//		wordsCounter = 1;  //Count the words, start with 1
+++	//		while (nextWord) {  //A loop for printing tokenized words unless no more are found
+++	//			printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord); //Print the tokenized words
+++	//			nextWord = strtok(NULL, " ");  //Get the next tokenized words
+++	//		}
+++	//	}
+++	//} while (strcmp(words, "q") != 0);  //infinite loop unless 'q' is input by user
+++	//printf("*** End of Tokenizing Words Demo ***\n\n");
+++
+++
+++/* Version 2 */
+++//>> insert here
++ 	printf("*** Start of Tokenizing Words Demo ***\n");
++-	char words[BUFFER_SIZE];  //words will be used for user input
++-	char* nextWord = NULL;  //nextWord is an array to store the return of tokenized strings.
++-	int wordsCounter;  //wordsCounter will be used to count how many tokenized words are in the delimited input
+++	char phrases[BUFFER_SIZE];  //phrases will be used for user input and is the argument for 
+++	char* nextPhrase = NULL;  //nextPhrase is an array to store the return of tokenized strings.
+++	int phrasesCounter;  //phrasesCounter will be used to count how many tokenized phrases are in the delimited input
++ 
++ 	do {
++ 		printf("Type a few words separated by space (q - to quit):\n");
++-		fgets(words, BUFFER_SIZE, stdin);  //receives input from user and store in words[]
++-		words[strlen(words) - 1] = '\0';  //Put a null terminator to the end of array
++-		if (strcmp(words, "q") != 0) {  //Do the tokenizing if user doesn't input 'q'
++-			nextWord = strtok(words, " ");  //use of tokenizing function to tokenize the word by delimiter 'whitespace'
++-			wordsCounter = 1;  //Count the words, start with 1
++-			while (nextWord) {  //A loop for printing tokenized words unless no more are found
++-				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord); //Print the tokenized words
++-				nextWord = strtok(NULL, " ");  //Get the next tokenized words
+++		fgets(phrases, BUFFER_SIZE, stdin);  //receives input from user and store in phrases[]
+++		phrases[strlen(phrases) - 1] = '\0';  //Put a null terminator to the end of array
+++		if (strcmp(phrases, "q") != 0) {  //Do the tokenizing if user doesn't input 'q'
+++			nextPhrase = strtok(phrases, ",");  //use of tokenizing function to tokenize the input by delimiter ','(comma)
+++			phrasesCounter = 1;  //Count the words, start with 1
+++			while (nextPhrase) {  //A loop for printing tokenized phrases unless no more are found
+++				printf("Phrase #%d is \'%s\'\n", phrasesCounter++, nextPhrase); //Print the tokenized phrases
+++				nextPhrase = strtok(NULL, ",");  //Get the next tokenized phrases
++ 			}
++ 		}
++-	} while (strcmp(words, "q") != 0);  //infinite loop unless 'q' is input by user
+++	} while (strcmp(phrases, "q") != 0);  //infinite loop unless 'q' is input by user
++ 	printf("*** End of Tokenizing Words Demo ***\n\n");
++ 
++-
++-/* Version 2 */
++-//>> insert here
++-
++-
++ /* Version 3 */
++ //>> insert here
++ 
++diff --git a/tokenizing_testing.txt b/tokenizing_testing.txt
++index a16c7b4..661a37a 100644
++--- a/tokenizing_testing.txt
+++++ b/tokenizing_testing.txt
++@@ -48,4 +48,60 @@ q Hello World!
++ Word #1 is 'q'
++ Word #2 is 'Hello'
++ Word #3 is 'World!'
+++*** End of Tokenizing Words Demo ***
+++
+++
+++
+++------Version 2-------
+++Test case 1:
+++*** Start of Tokenizing Words Demo ***
+++Type a few words separated by space (q - to quit):
+++Hello, World!!, 123, 1,2,3
+++Phrase #1 is 'Hello'
+++Phrase #2 is ' World!!'
+++Phrase #3 is ' 123'
+++Phrase #4 is ' 1'
+++Phrase #5 is '2'
+++Phrase #6 is '3'
+++Type a few words separated by space (q - to quit):
+++
+++
+++Test case 2:
+++Type a few words separated by space (q - to quit):
+++Hi123,,,,,,,,,,,,,,,,,Hi123
+++Phrase #1 is 'Hi123'
+++Phrase #2 is 'Hi123'
+++Type a few words separated by space (q - to quit):
+++
+++
+++Test case 3:
+++Type a few words separated by space (q - to quit):
+++,,,,,,,,,
+++Type a few words separated by space (q - to quit):
+++
+++
+++Test case 4:
+++Type a few words separated by space (q - to quit):
+++1111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110
+++Phrase #1 is '1111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111'
+++Type a few words separated by space (q - to quit):
+++Phrase #1 is '01111111110'
+++Type a few words separated by space (q - to quit):
+++
+++
+++Test case 5:
+++Type a few words separated by space (q - to quit):
+++1111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110,11111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110,1111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110
+++Phrase #1 is '1111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110'
+++Phrase #2 is '11111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110'
+++Phrase #3 is '11111111101111111110111111111011111111101111111110111111111011111111101111111110111111'
+++Type a few words separated by space (q - to quit):
+++Phrase #1 is '1101111111110'
+++Type a few words separated by space (q - to quit):
+++
+++
+++Test case 6:Type a few words separated by space (q - to quit):
+++q,123
+++Phrase #1 is 'q'
+++Phrase #2 is '123'
++ *** End of Tokenizing Words Demo ***
++\ No newline at end of file
++
++commit a7217e5b29a1713d77304914dc26e8f148d2d219
++Author: Daven <whchau1@myseneca.ca>
++Date:   Wed Dec 6 02:33:09 2023 -0500
++
++    V1 - modified comment
++
++diff --git a/tokenizing-test-cases.xlsx b/tokenizing-test-cases.xlsx
++index ea26f7c..8f78ee1 100644
++Binary files a/tokenizing-test-cases.xlsx and b/tokenizing-test-cases.xlsx differ
++diff --git a/tokenizing.c b/tokenizing.c
++index 3cb2bef..f0b6640 100644
++--- a/tokenizing.c
+++++ b/tokenizing.c
++@@ -2,7 +2,7 @@
++ Author: Wing Ho Chau
++ Email: myseneca@myseneca.ca
++ ID: 150924231
++-Date Written: 11-27-2023
+++Date Written: 12-1-2023
++ Course: CPR101.NNN
++ Final Project
++ */
++@@ -13,16 +13,16 @@ Final Project
++ #include "tokenizing.h"  //includes header file to point libaraies
++ 
++ void tokenizing() {
++-/* Version 1 */
+++	/* Version 1 */
++ 	printf("*** Start of Tokenizing Words Demo ***\n");
++-	char words[BUFFER_SIZE];  //words will be used for user input and is the argument for 
++-	char* nextWord = NULL;  //
++-	int wordsCounter;  //wordsCounter will be used to count how many words are in the delimited input
++-	
+++	char words[BUFFER_SIZE];  //words will be used for user input
+++	char* nextWord = NULL;  //nextWord is an array to store the return of tokenized strings.
+++	int wordsCounter;  //wordsCounter will be used to count how many tokenized words are in the delimited input
+++
++ 	do {
++ 		printf("Type a few words separated by space (q - to quit):\n");
++ 		fgets(words, BUFFER_SIZE, stdin);  //receives input from user and store in words[]
++-		words[strlen(words) - 1] = '\0';  //Put a null terminator to the end the array
+++		words[strlen(words) - 1] = '\0';  //Put a null terminator to the end of array
++ 		if (strcmp(words, "q") != 0) {  //Do the tokenizing if user doesn't input 'q'
++ 			nextWord = strtok(words, " ");  //use of tokenizing function to tokenize the word by delimiter 'whitespace'
++ 			wordsCounter = 1;  //Count the words, start with 1
++
++commit e3de54364152de16384aa516d22d65168a6685d1
++Author: Daven <whchau1@myseneca.ca>
++Date:   Wed Dec 6 01:56:41 2023 -0500
++
++    V1
++
++diff --git a/tokenizing-test-cases.xlsx b/tokenizing-test-cases.xlsx
++new file mode 100644
++index 0000000..ea26f7c
++Binary files /dev/null and b/tokenizing-test-cases.xlsx differ
++diff --git a/tokenizing.c b/tokenizing.c
++new file mode 100644
++index 0000000..3cb2bef
++--- /dev/null
+++++ b/tokenizing.c
++@@ -0,0 +1,46 @@
+++/*
+++Author: Wing Ho Chau
+++Email: myseneca@myseneca.ca
+++ID: 150924231
+++Date Written: 11-27-2023
+++Course: CPR101.NNN
+++Final Project
+++*/
+++
+++// TOKENIZING MODULE SOURCE
+++#define _CRT_SECURE_NO_WARNINGS  
+++#define BUFFER_SIZE 300  //Sets how many letters the user can input.
+++#include "tokenizing.h"  //includes header file to point libaraies
+++
+++void tokenizing() {
+++/* Version 1 */
+++	printf("*** Start of Tokenizing Words Demo ***\n");
+++	char words[BUFFER_SIZE];  //words will be used for user input and is the argument for 
+++	char* nextWord = NULL;  //
+++	int wordsCounter;  //wordsCounter will be used to count how many words are in the delimited input
+++	
+++	do {
+++		printf("Type a few words separated by space (q - to quit):\n");
+++		fgets(words, BUFFER_SIZE, stdin);  //receives input from user and store in words[]
+++		words[strlen(words) - 1] = '\0';  //Put a null terminator to the end the array
+++		if (strcmp(words, "q") != 0) {  //Do the tokenizing if user doesn't input 'q'
+++			nextWord = strtok(words, " ");  //use of tokenizing function to tokenize the word by delimiter 'whitespace'
+++			wordsCounter = 1;  //Count the words, start with 1
+++			while (nextWord) {  //A loop for printing tokenized words unless no more are found
+++				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord); //Print the tokenized words
+++				nextWord = strtok(NULL, " ");  //Get the next tokenized words
+++			}
+++		}
+++	} while (strcmp(words, "q") != 0);  //infinite loop unless 'q' is input by user
+++	printf("*** End of Tokenizing Words Demo ***\n\n");
+++
+++
+++/* Version 2 */
+++//>> insert here
+++
+++
+++/* Version 3 */
+++//>> insert here
+++
+++
+++}
++\ No newline at end of file
++diff --git a/tokenizing.h b/tokenizing.h
++new file mode 100644
++index 0000000..62e8745
++--- /dev/null
+++++ b/tokenizing.h
++@@ -0,0 +1,7 @@
+++//TOKENIZING MODULE HEADER
+++#ifndef _TOKENIZING_H_
+++#define _TOKENIZING_H_
+++#include <stdio.h>
+++#include <string.h>
+++void tokenizing(void);
+++#endif
++diff --git a/tokenizing_testing.txt b/tokenizing_testing.txt
++new file mode 100644
++index 0000000..a16c7b4
++--- /dev/null
+++++ b/tokenizing_testing.txt
++@@ -0,0 +1,51 @@
+++Tokenizing testing
+++
+++------Version 1-------
+++Test case 1:
+++*** Start of Tokenizing Words Demo ***
+++Type a few words separated by space (q - to quit):
+++Hello World! Today is 11 / 28 / 2023
+++Word #1 is 'Hello'
+++Word #2 is 'World!'
+++Word #3 is 'Today'
+++Word #4 is 'is'
+++Word #5 is '11'
+++Word #6 is '/'
+++Word #7 is '28'
+++Word #8 is '/'
+++Word #9 is '2023'
+++Type a few words separated by space (q - to quit):
+++
+++
+++Test case 2:
+++Type a few words separated by space (q - to quit):
+++
+++Type a few words separated by space (q - to quit):
+++
+++
+++Test case 3:
+++Type a few words separated by space (q - to quit):
+++ 
+++Type a few words separated by space (q - to quit):
+++
+++
+++Test case 4:
+++Type a few words separated by space (q - to quit):
+++Hello     World!
+++Word #1 is 'Hello'
+++Word #2 is 'World!'
+++Type a few words separated by space (q - to quit):
+++
+++
+++Test case 5:
+++Type a few words separated by space (q - to quit):
+++q
+++*** End of Tokenizing Words Demo ***
+++
+++Test case 6:
+++Type a few words separated by space (q - to quit):
+++q Hello World!
+++Word #1 is 'q'
+++Word #2 is 'Hello'
+++Word #3 is 'World!'
+++*** End of Tokenizing Words Demo ***
++\ No newline at end of file
+
 commit 7597e9cb8d67b146b86f3d9c7ec732b654bd43c4
 Author: whchau1 <whchau1@myseneca.ca>
 Date:   Wed Dec 6 20:50:12 2023 -0500

commit 2eba2268790551b3e40fce141f35a17cf41d95ea
Author: whchau1 <whchau1@myseneca.ca>
Date:   Wed Dec 6 20:54:29 2023 -0500

    V3 - submit the git log for tokenizing

diff --git a/tokenizing-git-log.txt b/tokenizing-git-log.txt
new file mode 100644
index 0000000..a6d7e83
--- /dev/null
+++ b/tokenizing-git-log.txt
@@ -0,0 +1,509 @@
+commit 7597e9cb8d67b146b86f3d9c7ec732b654bd43c4
+Author: whchau1 <whchau1@myseneca.ca>
+Date:   Wed Dec 6 20:50:12 2023 -0500
+
+    V3
+
+diff --git a/tokenizing-test-cases.xlsx b/tokenizing-test-cases.xlsx
+index a5db0a7..ca677c1 100644
+Binary files a/tokenizing-test-cases.xlsx and b/tokenizing-test-cases.xlsx differ
+diff --git a/tokenizing.c b/tokenizing.c
+index 6caea55..ec654f6 100644
+--- a/tokenizing.c
++++ b/tokenizing.c
+@@ -2,7 +2,7 @@
+ Author: Wing Ho Chau
+ Email: myseneca@myseneca.ca
+ ID: 150924231
+-Date Written: 12-1-2023
++Date Written: 12-6-2023
+ Course: CPR101.NNN
+ Final Project
+ */
+@@ -22,7 +22,7 @@ void tokenizing() {
+ 	//do {
+ 	//	printf("Type a few words separated by space (q - to quit):\n");
+ 	//	fgets(words, BUFFER_SIZE, stdin);  //receives input from user and store in words[]
+-	//	words[strlen(words) - 1] = '\0';  //Put a null terminator to the end of array
++	//	words[strlen(words) - 1] = '\0';  //Put a null terminator to the end of array to end the array
+ 	//	if (strcmp(words, "q") != 0) {  //Do the tokenizing if user doesn't input 'q'
+ 	//		nextWord = strtok(words, " ");  //use of tokenizing function to tokenize the word by delimiter 'whitespace'
+ 	//		wordsCounter = 1;  //Count the words, start with 1
+@@ -36,29 +36,45 @@ void tokenizing() {
+ 
+ 
+ /* Version 2 */
+-//>> insert here
++	//printf("*** Start of Tokenizing Words Demo ***\n");
++	//char phrases[BUFFER_SIZE];  //phrases will be used for user input
++	//char* nextPhrase = NULL;  //nextPhrase is an array to store the return of tokenized strings.
++	//int phrasesCounter;  //phrasesCounter will be used to count how many tokenized phrases are in the delimited input
++
++	//do {
++	//	printf("Type a few words separated by space (q - to quit):\n");
++	//	fgets(phrases, BUFFER_SIZE, stdin);  //receives input from user and store in phrases[]
++	//	phrases[strlen(phrases) - 1] = '\0';  //Put a null terminator to the end of array to end the array
++	//	if (strcmp(phrases, "q") != 0) {  //Do the tokenizing if user doesn't input 'q'
++	//		nextPhrase = strtok(phrases, ",");  //use of tokenizing function to tokenize the input by delimiter ','(comma)
++	//		phrasesCounter = 1;  //Count the words, start with 1
++	//		while (nextPhrase) {  //A loop for printing tokenized phrases unless no more are found
++	//			printf("Phrase #%d is \'%s\'\n", phrasesCounter++, nextPhrase); //Print the tokenized phrases
++	//			nextPhrase = strtok(NULL, ",");  //Get the next tokenized phrases
++	//		}
++	//	}
++	//} while (strcmp(phrases, "q") != 0);  //infinite loop unless 'q' is input by user
++	//printf("*** End of Tokenizing Words Demo ***\n\n");
++
++/* Version 3 */
+ 	printf("*** Start of Tokenizing Words Demo ***\n");
+-	char phrases[BUFFER_SIZE];  //phrases will be used for user input and is the argument for 
+-	char* nextPhrase = NULL;  //nextPhrase is an array to store the return of tokenized strings.
+-	int phrasesCounter;  //phrasesCounter will be used to count how many tokenized phrases are in the delimited input
++	char sentences[BUFFER_SIZE];  //sentences will be used for user input
++	char* nextSentence = NULL;  //nextSentences is an array to store the return of tokenized strings.
++	int sentencesCounter;  //sentencesCounter will be used to count how many sentences are in the delimited input
+ 
+ 	do {
+ 		printf("Type a few words separated by space (q - to quit):\n");
+-		fgets(phrases, BUFFER_SIZE, stdin);  //receives input from user and store in phrases[]
+-		phrases[strlen(phrases) - 1] = '\0';  //Put a null terminator to the end of array
+-		if (strcmp(phrases, "q") != 0) {  //Do the tokenizing if user doesn't input 'q'
+-			nextPhrase = strtok(phrases, ",");  //use of tokenizing function to tokenize the input by delimiter ','(comma)
+-			phrasesCounter = 1;  //Count the words, start with 1
+-			while (nextPhrase) {  //A loop for printing tokenized phrases unless no more are found
+-				printf("Phrase #%d is \'%s\'\n", phrasesCounter++, nextPhrase); //Print the tokenized phrases
+-				nextPhrase = strtok(NULL, ",");  //Get the next tokenized phrases
++		fgets(sentences, BUFFER_SIZE, stdin);  //receives input from user and store in sentences[]
++		sentences[strlen(sentences) - 1] = '\0';  //Put a null terminator to the end the array to end the array
++		if (strcmp(sentences, "q") != 0) {  //Do the tokenizing if user doesn't input 'q'
++			nextSentence = strtok(sentences, ".");  //use of tokenizing function to tokenize the word by delimiter '.'
++			sentencesCounter = 1;  //Count the sentences, start with 1
++			while (nextSentence) {  //A loop for printing tokenized sentences unless no more are found
++				printf("Sentence #%d is \'%s\'\n", sentencesCounter++, nextSentence); //Print the tokenized sentences
++				nextSentence = strtok(NULL, ".");  //Get the next tokenized sentences
+ 			}
+ 		}
+-	} while (strcmp(phrases, "q") != 0);  //infinite loop unless 'q' is input by user
++	} while (strcmp(sentences, "q") != 0);  //infinite loop unless 'q' is input by user
+ 	printf("*** End of Tokenizing Words Demo ***\n\n");
+ 
+-/* Version 3 */
+-//>> insert here
+-
+-
+ }
+\ No newline at end of file
+diff --git a/tokenizing_testing.txt b/tokenizing_testing.txt
+index 661a37a..ad903df 100644
+--- a/tokenizing_testing.txt
++++ b/tokenizing_testing.txt
+@@ -104,4 +104,80 @@ Test case 6:Type a few words separated by space (q - to quit):
+ q,123
+ Phrase #1 is 'q'
+ Phrase #2 is '123'
++*** End of Tokenizing Words Demo ***
++
++
++------Version 3-------
++Test case 1:
++*** Start of Tokenizing Words Demo ***
++Type a few words separated by space (q - to quit):
++I am here. I am going to test this program. This is test case 1.
++Sentence #1 is 'I am here'
++Sentence #2 is ' I am going to test this program'
++Sentence #3 is ' This is test case 1'
++Type a few words separated by space (q - to quit):
++
++
++Test case 2:
++Type a few words separated by space (q - to quit):
++This is test case 2, and it has no period in the sentences
++Sentence #1 is 'This is test case 2, and it has no period in the sentences'
++Type a few words separated by space (q - to quit):
++
++
++Test case 3:
++Type a few words separated by space (q - to quit):
++This is test case 3.....I put five period between sentences
++Sentence #1 is 'This is test case 3'
++Sentence #2 is 'I put five period between sentences'
++Type a few words separated by space (q - to quit):
++
++
++Test case 4:
++Type a few words separated by space (q - to quit):
++This is sentence 1.This is sentence 2.This is sentence 3.This is sentence 4.This is sentence 5.This is sentence 6.This is sentence 7.This is sentence 8.This is sentence 9.This is sentence 10.This is sentence 11.This is sentence 12.This is sentence 13.This is sentence 14.This is sentence 15.This is sentence 16.This is sentence 17.This is sentence 18.This is sentence 19.This is sentence 20.This is sentence 21.This is sentence 22.This is sentence 23.This is sentence 24
++Sentence #1 is 'This is sentence 1'
++Sentence #2 is 'This is sentence 2'
++Sentence #3 is 'This is sentence 3'
++Sentence #4 is 'This is sentence 4'
++Sentence #5 is 'This is sentence 5'
++Sentence #6 is 'This is sentence 6'
++Sentence #7 is 'This is sentence 7'
++Sentence #8 is 'This is sentence 8'
++Sentence #9 is 'This is sentence 9'
++Sentence #10 is 'This is sentence 10'
++Sentence #11 is 'This is sentence 11'
++Sentence #12 is 'This is sentence 12'
++Sentence #13 is 'This is sentence 13'
++Sentence #14 is 'This is sentence 14'
++Sentence #15 is 'This is sentence 15'
++Sentence #16 is 'This is'
++Type a few words separated by space (q - to quit):
++Sentence #1 is 'sentence 16'
++Sentence #2 is 'This is sentence 17'
++Sentence #3 is 'This is sentence 18'
++Sentence #4 is 'This is sentence 19'
++Sentence #5 is 'This is sentence 20'
++Sentence #6 is 'This is sentence 21'
++Sentence #7 is 'This is sentence 22'
++Sentence #8 is 'This is sentence 23'
++Sentence #9 is 'This is sentence 24'
++Type a few words separated by space (q - to quit):
++
++
++Test case 5:
++Type a few words separated by space (q - to quit):
++question one. question two. answer
++Sentence #1 is 'question one'
++Sentence #2 is ' question two'
++Sentence #3 is ' answer'
++Type a few words separated by space (q - to quit):
++
++
++Test csae 6:
++Type a few words separated by space (q - to quit):
++q. This is test case 6. If the promgram is correct, the loop with continues.
++Sentence #1 is 'q'
++Sentence #2 is ' This is test case 6'
++Sentence #3 is ' If the promgram is correct, the loop with continues'
+ *** End of Tokenizing Words Demo ***
+\ No newline at end of file
+
+commit 6400cfc1dca1c37ed5f8adbc1137647cb75b6fc5
+Author: whchau1 <whchau1@myseneca.ca>
+Date:   Wed Dec 6 04:13:06 2023 -0500
+
+    V2
+
+diff --git a/tokenizing-test-cases.xlsx b/tokenizing-test-cases.xlsx
+index 8f78ee1..a5db0a7 100644
+Binary files a/tokenizing-test-cases.xlsx and b/tokenizing-test-cases.xlsx differ
+diff --git a/tokenizing.c b/tokenizing.c
+index f0b6640..6caea55 100644
+--- a/tokenizing.c
++++ b/tokenizing.c
+@@ -14,31 +14,49 @@ Final Project
+ 
+ void tokenizing() {
+ 	/* Version 1 */
++	//printf("*** Start of Tokenizing Words Demo ***\n");
++	//char words[BUFFER_SIZE];  //words will be used for user input
++	//char* nextWord = NULL;  //nextWord is an array to store the return of tokenized strings.
++	//int wordsCounter;  //wordsCounter will be used to count how many tokenized words are in the delimited input
++
++	//do {
++	//	printf("Type a few words separated by space (q - to quit):\n");
++	//	fgets(words, BUFFER_SIZE, stdin);  //receives input from user and store in words[]
++	//	words[strlen(words) - 1] = '\0';  //Put a null terminator to the end of array
++	//	if (strcmp(words, "q") != 0) {  //Do the tokenizing if user doesn't input 'q'
++	//		nextWord = strtok(words, " ");  //use of tokenizing function to tokenize the word by delimiter 'whitespace'
++	//		wordsCounter = 1;  //Count the words, start with 1
++	//		while (nextWord) {  //A loop for printing tokenized words unless no more are found
++	//			printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord); //Print the tokenized words
++	//			nextWord = strtok(NULL, " ");  //Get the next tokenized words
++	//		}
++	//	}
++	//} while (strcmp(words, "q") != 0);  //infinite loop unless 'q' is input by user
++	//printf("*** End of Tokenizing Words Demo ***\n\n");
++
++
++/* Version 2 */
++//>> insert here
+ 	printf("*** Start of Tokenizing Words Demo ***\n");
+-	char words[BUFFER_SIZE];  //words will be used for user input
+-	char* nextWord = NULL;  //nextWord is an array to store the return of tokenized strings.
+-	int wordsCounter;  //wordsCounter will be used to count how many tokenized words are in the delimited input
++	char phrases[BUFFER_SIZE];  //phrases will be used for user input and is the argument for 
++	char* nextPhrase = NULL;  //nextPhrase is an array to store the return of tokenized strings.
++	int phrasesCounter;  //phrasesCounter will be used to count how many tokenized phrases are in the delimited input
+ 
+ 	do {
+ 		printf("Type a few words separated by space (q - to quit):\n");
+-		fgets(words, BUFFER_SIZE, stdin);  //receives input from user and store in words[]
+-		words[strlen(words) - 1] = '\0';  //Put a null terminator to the end of array
+-		if (strcmp(words, "q") != 0) {  //Do the tokenizing if user doesn't input 'q'
+-			nextWord = strtok(words, " ");  //use of tokenizing function to tokenize the word by delimiter 'whitespace'
+-			wordsCounter = 1;  //Count the words, start with 1
+-			while (nextWord) {  //A loop for printing tokenized words unless no more are found
+-				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord); //Print the tokenized words
+-				nextWord = strtok(NULL, " ");  //Get the next tokenized words
++		fgets(phrases, BUFFER_SIZE, stdin);  //receives input from user and store in phrases[]
++		phrases[strlen(phrases) - 1] = '\0';  //Put a null terminator to the end of array
++		if (strcmp(phrases, "q") != 0) {  //Do the tokenizing if user doesn't input 'q'
++			nextPhrase = strtok(phrases, ",");  //use of tokenizing function to tokenize the input by delimiter ','(comma)
++			phrasesCounter = 1;  //Count the words, start with 1
++			while (nextPhrase) {  //A loop for printing tokenized phrases unless no more are found
++				printf("Phrase #%d is \'%s\'\n", phrasesCounter++, nextPhrase); //Print the tokenized phrases
++				nextPhrase = strtok(NULL, ",");  //Get the next tokenized phrases
+ 			}
+ 		}
+-	} while (strcmp(words, "q") != 0);  //infinite loop unless 'q' is input by user
++	} while (strcmp(phrases, "q") != 0);  //infinite loop unless 'q' is input by user
+ 	printf("*** End of Tokenizing Words Demo ***\n\n");
+ 
+-
+-/* Version 2 */
+-//>> insert here
+-
+-
+ /* Version 3 */
+ //>> insert here
+ 
+diff --git a/tokenizing_testing.txt b/tokenizing_testing.txt
+index a16c7b4..661a37a 100644
+--- a/tokenizing_testing.txt
++++ b/tokenizing_testing.txt
+@@ -48,4 +48,60 @@ q Hello World!
+ Word #1 is 'q'
+ Word #2 is 'Hello'
+ Word #3 is 'World!'
++*** End of Tokenizing Words Demo ***
++
++
++
++------Version 2-------
++Test case 1:
++*** Start of Tokenizing Words Demo ***
++Type a few words separated by space (q - to quit):
++Hello, World!!, 123, 1,2,3
++Phrase #1 is 'Hello'
++Phrase #2 is ' World!!'
++Phrase #3 is ' 123'
++Phrase #4 is ' 1'
++Phrase #5 is '2'
++Phrase #6 is '3'
++Type a few words separated by space (q - to quit):
++
++
++Test case 2:
++Type a few words separated by space (q - to quit):
++Hi123,,,,,,,,,,,,,,,,,Hi123
++Phrase #1 is 'Hi123'
++Phrase #2 is 'Hi123'
++Type a few words separated by space (q - to quit):
++
++
++Test case 3:
++Type a few words separated by space (q - to quit):
++,,,,,,,,,
++Type a few words separated by space (q - to quit):
++
++
++Test case 4:
++Type a few words separated by space (q - to quit):
++1111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110
++Phrase #1 is '1111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111'
++Type a few words separated by space (q - to quit):
++Phrase #1 is '01111111110'
++Type a few words separated by space (q - to quit):
++
++
++Test case 5:
++Type a few words separated by space (q - to quit):
++1111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110,11111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110,1111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110
++Phrase #1 is '1111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110'
++Phrase #2 is '11111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110'
++Phrase #3 is '11111111101111111110111111111011111111101111111110111111111011111111101111111110111111'
++Type a few words separated by space (q - to quit):
++Phrase #1 is '1101111111110'
++Type a few words separated by space (q - to quit):
++
++
++Test case 6:Type a few words separated by space (q - to quit):
++q,123
++Phrase #1 is 'q'
++Phrase #2 is '123'
+ *** End of Tokenizing Words Demo ***
+\ No newline at end of file
+
+commit a7217e5b29a1713d77304914dc26e8f148d2d219
+Author: Daven <whchau1@myseneca.ca>
+Date:   Wed Dec 6 02:33:09 2023 -0500
+
+    V1 - modified comment
+
+diff --git a/tokenizing-test-cases.xlsx b/tokenizing-test-cases.xlsx
+index ea26f7c..8f78ee1 100644
+Binary files a/tokenizing-test-cases.xlsx and b/tokenizing-test-cases.xlsx differ
+diff --git a/tokenizing.c b/tokenizing.c
+index 3cb2bef..f0b6640 100644
+--- a/tokenizing.c
++++ b/tokenizing.c
+@@ -2,7 +2,7 @@
+ Author: Wing Ho Chau
+ Email: myseneca@myseneca.ca
+ ID: 150924231
+-Date Written: 11-27-2023
++Date Written: 12-1-2023
+ Course: CPR101.NNN
+ Final Project
+ */
+@@ -13,16 +13,16 @@ Final Project
+ #include "tokenizing.h"  //includes header file to point libaraies
+ 
+ void tokenizing() {
+-/* Version 1 */
++	/* Version 1 */
+ 	printf("*** Start of Tokenizing Words Demo ***\n");
+-	char words[BUFFER_SIZE];  //words will be used for user input and is the argument for 
+-	char* nextWord = NULL;  //
+-	int wordsCounter;  //wordsCounter will be used to count how many words are in the delimited input
+-	
++	char words[BUFFER_SIZE];  //words will be used for user input
++	char* nextWord = NULL;  //nextWord is an array to store the return of tokenized strings.
++	int wordsCounter;  //wordsCounter will be used to count how many tokenized words are in the delimited input
++
+ 	do {
+ 		printf("Type a few words separated by space (q - to quit):\n");
+ 		fgets(words, BUFFER_SIZE, stdin);  //receives input from user and store in words[]
+-		words[strlen(words) - 1] = '\0';  //Put a null terminator to the end the array
++		words[strlen(words) - 1] = '\0';  //Put a null terminator to the end of array
+ 		if (strcmp(words, "q") != 0) {  //Do the tokenizing if user doesn't input 'q'
+ 			nextWord = strtok(words, " ");  //use of tokenizing function to tokenize the word by delimiter 'whitespace'
+ 			wordsCounter = 1;  //Count the words, start with 1
+
+commit e3de54364152de16384aa516d22d65168a6685d1
+Author: Daven <whchau1@myseneca.ca>
+Date:   Wed Dec 6 01:56:41 2023 -0500
+
+    V1
+
+diff --git a/tokenizing-test-cases.xlsx b/tokenizing-test-cases.xlsx
+new file mode 100644
+index 0000000..ea26f7c
+Binary files /dev/null and b/tokenizing-test-cases.xlsx differ
+diff --git a/tokenizing.c b/tokenizing.c
+new file mode 100644
+index 0000000..3cb2bef
+--- /dev/null
++++ b/tokenizing.c
+@@ -0,0 +1,46 @@
++/*
++Author: Wing Ho Chau
++Email: myseneca@myseneca.ca
++ID: 150924231
++Date Written: 11-27-2023
++Course: CPR101.NNN
++Final Project
++*/
++
++// TOKENIZING MODULE SOURCE
++#define _CRT_SECURE_NO_WARNINGS  
++#define BUFFER_SIZE 300  //Sets how many letters the user can input.
++#include "tokenizing.h"  //includes header file to point libaraies
++
++void tokenizing() {
++/* Version 1 */
++	printf("*** Start of Tokenizing Words Demo ***\n");
++	char words[BUFFER_SIZE];  //words will be used for user input and is the argument for 
++	char* nextWord = NULL;  //
++	int wordsCounter;  //wordsCounter will be used to count how many words are in the delimited input
++	
++	do {
++		printf("Type a few words separated by space (q - to quit):\n");
++		fgets(words, BUFFER_SIZE, stdin);  //receives input from user and store in words[]
++		words[strlen(words) - 1] = '\0';  //Put a null terminator to the end the array
++		if (strcmp(words, "q") != 0) {  //Do the tokenizing if user doesn't input 'q'
++			nextWord = strtok(words, " ");  //use of tokenizing function to tokenize the word by delimiter 'whitespace'
++			wordsCounter = 1;  //Count the words, start with 1
++			while (nextWord) {  //A loop for printing tokenized words unless no more are found
++				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord); //Print the tokenized words
++				nextWord = strtok(NULL, " ");  //Get the next tokenized words
++			}
++		}
++	} while (strcmp(words, "q") != 0);  //infinite loop unless 'q' is input by user
++	printf("*** End of Tokenizing Words Demo ***\n\n");
++
++
++/* Version 2 */
++//>> insert here
++
++
++/* Version 3 */
++//>> insert here
++
++
++}
+\ No newline at end of file
+diff --git a/tokenizing.h b/tokenizing.h
+new file mode 100644
+index 0000000..62e8745
+--- /dev/null
++++ b/tokenizing.h
+@@ -0,0 +1,7 @@
++//TOKENIZING MODULE HEADER
++#ifndef _TOKENIZING_H_
++#define _TOKENIZING_H_
++#include <stdio.h>
++#include <string.h>
++void tokenizing(void);
++#endif
+diff --git a/tokenizing_testing.txt b/tokenizing_testing.txt
+new file mode 100644
+index 0000000..a16c7b4
+--- /dev/null
++++ b/tokenizing_testing.txt
+@@ -0,0 +1,51 @@
++Tokenizing testing
++
++------Version 1-------
++Test case 1:
++*** Start of Tokenizing Words Demo ***
++Type a few words separated by space (q - to quit):
++Hello World! Today is 11 / 28 / 2023
++Word #1 is 'Hello'
++Word #2 is 'World!'
++Word #3 is 'Today'
++Word #4 is 'is'
++Word #5 is '11'
++Word #6 is '/'
++Word #7 is '28'
++Word #8 is '/'
++Word #9 is '2023'
++Type a few words separated by space (q - to quit):
++
++
++Test case 2:
++Type a few words separated by space (q - to quit):
++
++Type a few words separated by space (q - to quit):
++
++
++Test case 3:
++Type a few words separated by space (q - to quit):
++ 
++Type a few words separated by space (q - to quit):
++
++
++Test case 4:
++Type a few words separated by space (q - to quit):
++Hello     World!
++Word #1 is 'Hello'
++Word #2 is 'World!'
++Type a few words separated by space (q - to quit):
++
++
++Test case 5:
++Type a few words separated by space (q - to quit):
++q
++*** End of Tokenizing Words Demo ***
++
++Test case 6:
++Type a few words separated by space (q - to quit):
++q Hello World!
++Word #1 is 'q'
++Word #2 is 'Hello'
++Word #3 is 'World!'
++*** End of Tokenizing Words Demo ***
+\ No newline at end of file

commit 7597e9cb8d67b146b86f3d9c7ec732b654bd43c4
Author: whchau1 <whchau1@myseneca.ca>
Date:   Wed Dec 6 20:50:12 2023 -0500

    V3

diff --git a/tokenizing-test-cases.xlsx b/tokenizing-test-cases.xlsx
index a5db0a7..ca677c1 100644
Binary files a/tokenizing-test-cases.xlsx and b/tokenizing-test-cases.xlsx differ
diff --git a/tokenizing.c b/tokenizing.c
index 6caea55..ec654f6 100644
--- a/tokenizing.c
+++ b/tokenizing.c
@@ -2,7 +2,7 @@
 Author: Wing Ho Chau
 Email: myseneca@myseneca.ca
 ID: 150924231
-Date Written: 12-1-2023
+Date Written: 12-6-2023
 Course: CPR101.NNN
 Final Project
 */
@@ -22,7 +22,7 @@ void tokenizing() {
 	//do {
 	//	printf("Type a few words separated by space (q - to quit):\n");
 	//	fgets(words, BUFFER_SIZE, stdin);  //receives input from user and store in words[]
-	//	words[strlen(words) - 1] = '\0';  //Put a null terminator to the end of array
+	//	words[strlen(words) - 1] = '\0';  //Put a null terminator to the end of array to end the array
 	//	if (strcmp(words, "q") != 0) {  //Do the tokenizing if user doesn't input 'q'
 	//		nextWord = strtok(words, " ");  //use of tokenizing function to tokenize the word by delimiter 'whitespace'
 	//		wordsCounter = 1;  //Count the words, start with 1
@@ -36,29 +36,45 @@ void tokenizing() {
 
 
 /* Version 2 */
-//>> insert here
+	//printf("*** Start of Tokenizing Words Demo ***\n");
+	//char phrases[BUFFER_SIZE];  //phrases will be used for user input
+	//char* nextPhrase = NULL;  //nextPhrase is an array to store the return of tokenized strings.
+	//int phrasesCounter;  //phrasesCounter will be used to count how many tokenized phrases are in the delimited input
+
+	//do {
+	//	printf("Type a few words separated by space (q - to quit):\n");
+	//	fgets(phrases, BUFFER_SIZE, stdin);  //receives input from user and store in phrases[]
+	//	phrases[strlen(phrases) - 1] = '\0';  //Put a null terminator to the end of array to end the array
+	//	if (strcmp(phrases, "q") != 0) {  //Do the tokenizing if user doesn't input 'q'
+	//		nextPhrase = strtok(phrases, ",");  //use of tokenizing function to tokenize the input by delimiter ','(comma)
+	//		phrasesCounter = 1;  //Count the words, start with 1
+	//		while (nextPhrase) {  //A loop for printing tokenized phrases unless no more are found
+	//			printf("Phrase #%d is \'%s\'\n", phrasesCounter++, nextPhrase); //Print the tokenized phrases
+	//			nextPhrase = strtok(NULL, ",");  //Get the next tokenized phrases
+	//		}
+	//	}
+	//} while (strcmp(phrases, "q") != 0);  //infinite loop unless 'q' is input by user
+	//printf("*** End of Tokenizing Words Demo ***\n\n");
+
+/* Version 3 */
 	printf("*** Start of Tokenizing Words Demo ***\n");
-	char phrases[BUFFER_SIZE];  //phrases will be used for user input and is the argument for 
-	char* nextPhrase = NULL;  //nextPhrase is an array to store the return of tokenized strings.
-	int phrasesCounter;  //phrasesCounter will be used to count how many tokenized phrases are in the delimited input
+	char sentences[BUFFER_SIZE];  //sentences will be used for user input
+	char* nextSentence = NULL;  //nextSentences is an array to store the return of tokenized strings.
+	int sentencesCounter;  //sentencesCounter will be used to count how many sentences are in the delimited input
 
 	do {
 		printf("Type a few words separated by space (q - to quit):\n");
-		fgets(phrases, BUFFER_SIZE, stdin);  //receives input from user and store in phrases[]
-		phrases[strlen(phrases) - 1] = '\0';  //Put a null terminator to the end of array
-		if (strcmp(phrases, "q") != 0) {  //Do the tokenizing if user doesn't input 'q'
-			nextPhrase = strtok(phrases, ",");  //use of tokenizing function to tokenize the input by delimiter ','(comma)
-			phrasesCounter = 1;  //Count the words, start with 1
-			while (nextPhrase) {  //A loop for printing tokenized phrases unless no more are found
-				printf("Phrase #%d is \'%s\'\n", phrasesCounter++, nextPhrase); //Print the tokenized phrases
-				nextPhrase = strtok(NULL, ",");  //Get the next tokenized phrases
+		fgets(sentences, BUFFER_SIZE, stdin);  //receives input from user and store in sentences[]
+		sentences[strlen(sentences) - 1] = '\0';  //Put a null terminator to the end the array to end the array
+		if (strcmp(sentences, "q") != 0) {  //Do the tokenizing if user doesn't input 'q'
+			nextSentence = strtok(sentences, ".");  //use of tokenizing function to tokenize the word by delimiter '.'
+			sentencesCounter = 1;  //Count the sentences, start with 1
+			while (nextSentence) {  //A loop for printing tokenized sentences unless no more are found
+				printf("Sentence #%d is \'%s\'\n", sentencesCounter++, nextSentence); //Print the tokenized sentences
+				nextSentence = strtok(NULL, ".");  //Get the next tokenized sentences
 			}
 		}
-	} while (strcmp(phrases, "q") != 0);  //infinite loop unless 'q' is input by user
+	} while (strcmp(sentences, "q") != 0);  //infinite loop unless 'q' is input by user
 	printf("*** End of Tokenizing Words Demo ***\n\n");
 
-/* Version 3 */
-//>> insert here
-
-
 }
\ No newline at end of file
diff --git a/tokenizing_testing.txt b/tokenizing_testing.txt
index 661a37a..ad903df 100644
--- a/tokenizing_testing.txt
+++ b/tokenizing_testing.txt
@@ -104,4 +104,80 @@ Test case 6:Type a few words separated by space (q - to quit):
 q,123
 Phrase #1 is 'q'
 Phrase #2 is '123'
+*** End of Tokenizing Words Demo ***
+
+
+------Version 3-------
+Test case 1:
+*** Start of Tokenizing Words Demo ***
+Type a few words separated by space (q - to quit):
+I am here. I am going to test this program. This is test case 1.
+Sentence #1 is 'I am here'
+Sentence #2 is ' I am going to test this program'
+Sentence #3 is ' This is test case 1'
+Type a few words separated by space (q - to quit):
+
+
+Test case 2:
+Type a few words separated by space (q - to quit):
+This is test case 2, and it has no period in the sentences
+Sentence #1 is 'This is test case 2, and it has no period in the sentences'
+Type a few words separated by space (q - to quit):
+
+
+Test case 3:
+Type a few words separated by space (q - to quit):
+This is test case 3.....I put five period between sentences
+Sentence #1 is 'This is test case 3'
+Sentence #2 is 'I put five period between sentences'
+Type a few words separated by space (q - to quit):
+
+
+Test case 4:
+Type a few words separated by space (q - to quit):
+This is sentence 1.This is sentence 2.This is sentence 3.This is sentence 4.This is sentence 5.This is sentence 6.This is sentence 7.This is sentence 8.This is sentence 9.This is sentence 10.This is sentence 11.This is sentence 12.This is sentence 13.This is sentence 14.This is sentence 15.This is sentence 16.This is sentence 17.This is sentence 18.This is sentence 19.This is sentence 20.This is sentence 21.This is sentence 22.This is sentence 23.This is sentence 24
+Sentence #1 is 'This is sentence 1'
+Sentence #2 is 'This is sentence 2'
+Sentence #3 is 'This is sentence 3'
+Sentence #4 is 'This is sentence 4'
+Sentence #5 is 'This is sentence 5'
+Sentence #6 is 'This is sentence 6'
+Sentence #7 is 'This is sentence 7'
+Sentence #8 is 'This is sentence 8'
+Sentence #9 is 'This is sentence 9'
+Sentence #10 is 'This is sentence 10'
+Sentence #11 is 'This is sentence 11'
+Sentence #12 is 'This is sentence 12'
+Sentence #13 is 'This is sentence 13'
+Sentence #14 is 'This is sentence 14'
+Sentence #15 is 'This is sentence 15'
+Sentence #16 is 'This is'
+Type a few words separated by space (q - to quit):
+Sentence #1 is 'sentence 16'
+Sentence #2 is 'This is sentence 17'
+Sentence #3 is 'This is sentence 18'
+Sentence #4 is 'This is sentence 19'
+Sentence #5 is 'This is sentence 20'
+Sentence #6 is 'This is sentence 21'
+Sentence #7 is 'This is sentence 22'
+Sentence #8 is 'This is sentence 23'
+Sentence #9 is 'This is sentence 24'
+Type a few words separated by space (q - to quit):
+
+
+Test case 5:
+Type a few words separated by space (q - to quit):
+question one. question two. answer
+Sentence #1 is 'question one'
+Sentence #2 is ' question two'
+Sentence #3 is ' answer'
+Type a few words separated by space (q - to quit):
+
+
+Test csae 6:
+Type a few words separated by space (q - to quit):
+q. This is test case 6. If the promgram is correct, the loop with continues.
+Sentence #1 is 'q'
+Sentence #2 is ' This is test case 6'
+Sentence #3 is ' If the promgram is correct, the loop with continues'
 *** End of Tokenizing Words Demo ***
\ No newline at end of file

commit 2b4d3eabe78c31c1ecc8c137a78ed756fcac309c
Author: HANFU XIAO <hxiao15@mySeneca.ca>
Date:   Wed Dec 6 20:41:07 2023 -0500

    minor changes

diff --git a/converting.c b/converting.c
index 4c71ae6..efcc3cb 100644
--- a/converting.c
+++ b/converting.c
@@ -109,6 +109,6 @@ void converting(void) {
         }
     } while (strcmp(longString, "q") != 0); // Continue the loop until 'q' is entered
 
-    // Ending message for the demo
+    // Ending message for the demo Converting
     printf("*** End of Converting Strings to long Demo ***\n\n");
 }
\ No newline at end of file

commit 5be5847c87c11ae0053fa7ddfbf6d017d312665e
Author: HANFU XIAO <hxiao15@mySeneca.ca>
Date:   Wed Dec 6 20:19:38 2023 -0500

    removed other's members' modules from this branch

diff --git a/manipulating.c b/manipulating.c
deleted file mode 100644
index afd33ff..0000000
--- a/manipulating.c
+++ /dev/null
@@ -1,114 +0,0 @@
-#define _CRT_SECURE_NO_WARNINGS
-/*
-Author: Jarvinia Zhao
-Email: jzhao169@myseneca.ca
-ID: 143013233
-Date Written: 11-27-2023
-Course: CPR101.NNN
-Final Project
-*/
-
-/* The costomized library "manipulating.h" header file provides :
-    2 standard libraies: stdio.h and string.h
-    Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
-    Prototype for function manipulating
-*/
-#include "manipulating.h"  
-
-/*
-Function Purpose: This function provides the functionality to manipulate Cstings
-*/
-void manipulating(void) {
-/* Version 1 */
-    //------------- Demo of String Concatenate ---------------
-    
-    // Display the starting message for user to understand the purpose of this demo
-    printf("**** Start of Concatenating Strings Demo ****\n");
-    // Declare 2 Cstring to store the string for concatenation 
-    char string1[BUFFER_SIZE]; // first string 
-    char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
-    
-    // Start a loop at least once and will continue until the user enter q to quit
-    do {
-        // Prompt the user for the first string
-        printf("Type the 1st string (q - to quit):\n");
-        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user
-        // Remove the newline character at the end of the input string
-        string1[strlen(string1) - 1] = '\0';
-
-        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
-        if (strcmp(string1, "q") == 0) {
-            break;
-        }
-
-        // Prompt the user for the second string
-        printf("Type the 2nd string:\n");
-        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user
-        // Remove the newline character at the end of the input string
-        string2[strlen(string2) - 1] = '\0'; 
-
-        // Concatenate the string2 to the string1
-        strcat(string1, string2);
-        // Display the result after concatenation
-        printf("Concatenated string is '%s'\n", string1);
-
-    } while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
-
-    printf("**** End of Concatenating Strings Demo ****\n");
-
-
-/* Version 2 
-    printf("**** Start of Comparing Strings Demo ****\n");
-    char compare1[BUFFER_SIZE];
-    char compare2[BUFFER_SIZE];
-    int result;
-    do {
-        printf("Type the 1st string to compare (q - to quit):\n");
-        fgets(compare1, BUFFER_SIZE, stdin);
-        compare1[strlen(compare1) - 1] = '\0';
-        if (strcmp(compare1, "q") == 0) {
-            break;
-        }
-        printf("Type the 2nd string to compare:\n");
-        fgets(compare2, BUFFER_SIZE, stdin);
-        compare2[strlen(compare2) - 1] = '\0';
-        result = strcmp(compare1, compare2);
-        if (result < 0) {
-            printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
-        }
-        else if (result == 0) {
-            printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
-        }
-        else {
-            printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
-        }
-    } while (strcmp(compare1, "q") != 0);
-    printf("**** End of Comparing Strings Demo ****\n");
-    */
-
-/* Version 3 
-    printf("**** Start of Searching Strings Demo ****\n");
-    char haystack[BUFFER_SIZE];
-    char needle[BUFFER_SIZE];
-    char* occurrence = NULL;
-    do {
-        printf("Type the string (q - to quit):\n");
-        fgets(haystack, BUFFER_SIZE, stdin);
-        haystack[strlen(haystack) - 1] = '\0';
-        if (strcmp(haystack, "q") == 0) {
-            break;
-        }
-        printf("Type the substring:\n");
-        fgets(needle, BUFFER_SIZE, stdin);
-        needle[strlen(needle) - 1] = '\0';
-        occurrence = strstr(haystack, needle);
-        if (occurrence) {
-            printf("\"%s\" found at %d position\n", needle, (int)(occurrence - haystack));
-        }
-        else {
-            printf("Not found\n");
-        }
-    } while (strcmp(haystack, "q") != 0);
-    printf("**** End of Searching Strings Demo ****\n");
-    */
-}
\ No newline at end of file
diff --git a/manipulating.h b/manipulating.h
deleted file mode 100644
index fdbd4a4..0000000
--- a/manipulating.h
+++ /dev/null
@@ -1,15 +0,0 @@
-#pragma once
-// MANIPULATING MODULE HEADER
-#ifndef _MANIPULATING_H_
-#define _MANIPULATING_H_
-
-#include <stdio.h>
-#include <string.h>
-
-#define BUFFER_SIZE 32 // Define a constant for maximum string length
-
-// manipulating prototype: Allow users to manipulate string input
-//Including: string concatenate
-void manipulating(void);
-
-#endif
\ No newline at end of file

commit 04bddf03e94f961f69fc047a0ad2c0f8549cfad0
Merge: 5a35248 717b78c
Author: Jarviniazhao <151060098+Jarviniazhao@users.noreply.github.com>
Date:   Wed Dec 6 19:57:20 2023 -0500

    Merge pull request #9 from xiaohanfu123/manipulating
    
    Recover manipulating log to main

commit 717b78ced4cbd274d6519d4c3adb1505efedfd16
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Wed Dec 6 19:56:28 2023 -0500

    Version1-3: Update the log

diff --git a/manipulating-git-log.txt b/manipulating-git-log.txt
new file mode 100644
index 0000000..8b091e6
--- /dev/null
+++ b/manipulating-git-log.txt
@@ -0,0 +1,2750 @@
+commit 44cf4ae524920927671da5f49b525f7fe894fe15
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Wed Dec 6 14:02:16 2023 -0500
+
+    General: Delete the example sheet and renamed the test-case sheet
+
+diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
+index 2fa13a7..e55d243 100644
+Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
+
+commit ade68ed792cdc989504fc2205528e57ebffb905b
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Wed Dec 6 13:47:52 2023 -0500
+
+    Version3: Add git log of version3
+
+diff --git a/manipulating-git-log.txt b/manipulating-git-log.txt
+index 7af623f..d31f09c 100644
+--- a/manipulating-git-log.txt
++++ b/manipulating-git-log.txt
+@@ -1,3 +1,1044 @@
++commit cecfd8b0942d30a1248e56d1d1968e2866004398
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Wed Dec 6 13:45:46 2023 -0500
++
++    Version3: Minor format modifications
++
++diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
++index 5449f31..2fa13a7 100644
++Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
++diff --git a/manipulating-testing.txt b/manipulating-testing.txt
++index f73a2bc..80e1c9d 100644
++--- a/manipulating-testing.txt
+++++ b/manipulating-testing.txt
++@@ -1,4 +1,4 @@
++-Manipulating Testing 
+++Manipulating Testing Records
++ 
++ -------------- Version 1: String Concatenate -------------------------------
++ >> Test 1: (Normal case)
++
++commit 5ca8d5a33a8d2db071a1748e1c439a083789c4c7
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Sat Dec 2 21:30:36 2023 -0500
++
++    Version 2: Add one more testing case - one empty string
++
++diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
++index 4990758..5449f31 100644
++Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
++diff --git a/manipulating-testing.txt b/manipulating-testing.txt
++index 57c3364..f73a2bc 100644
++--- a/manipulating-testing.txt
+++++ b/manipulating-testing.txt
++@@ -64,27 +64,34 @@ Type the 2nd string to compare:
++ Hello
++ "Hello World" string is greater than "Hello"
++ 
++->> Test 4: (Empty string)
+++>> Test 4: (Compare one empty string)
+++Type the 1st string to compare (q - to quit):
+++
+++Type the 2nd string to compare:
+++test
+++"" string is less than "test"
+++
+++>> Test 5: (Both string are empty )
++ Type the 1st string to compare (q - to quit):
++ 
++ Type the 2nd string to compare:
++ 
++ "" string is equal to ""
++ 
++->> Test 5: (Special characters)
+++>> Test 6: (Special characters)
++ Type the 1st string to compare (q - to quit):
++ @123
++ Type the 2nd string to compare:
++ $456
++ "@123" string is greater than "$456"
++ 
++->> Test 6: (Over-the-edge: compare1 over the limit)
+++>> Test 7: (Over-the-edge: compare1 over the limit)
++ Type the 1st string to compare (q - to quit):
++ Hello this is John Smith, Nice to meet you!
++ Type the 2nd string to compare:
++ "Hello this is John Smith, Nice" string is less than "to meet you!"
++ 
++->> Test 7: (Over-the-edge: compare2 over the limit)
+++>> Test 8: (Over-the-edge: compare2 over the limit)
++ Type the 1st string to compare (q - to quit):
++ Hello this is John Smith, Nice
++ Type the 2nd string to compare:
++
++commit 4b8535e987cecb5e0dc6519e9aa7a5d8b2e87950
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Sat Dec 2 21:23:39 2023 -0500
++
++    Version 3: Upload testing case records, and modify the format of testing.txt
++
++diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
++index 8058037..4990758 100644
++Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
++diff --git a/manipulating-testing.txt b/manipulating-testing.txt
++index 1d00335..57c3364 100644
++--- a/manipulating-testing.txt
+++++ b/manipulating-testing.txt
++@@ -1,94 +1,175 @@
++ Manipulating Testing 
++ 
++-------Version 1-------
++-Test 1: (Normal case)
+++-------------- Version 1: String Concatenate -------------------------------
+++>> Test 1: (Normal case)
++ Type the 1st string (q - to quit):
++ John
++ Type the 2nd string:
++  Simith
++ Concatenated string is 'John Simith'
++ 
++-Test 2: (Empty string)
+++>> Test 2: (Empty string)
++ Type the 1st string (q - to quit):
++ 
++ Type the 2nd string:
++ 
++ Concatenated string is ''
++ 
++-Test 3: (Edge case)
+++>> Test 3: (Edge case)
++ Type the 1st string (q - to quit):
++ Hi John Smith
++ Type the 2nd string:
++  Nice to meet you!
++ Concatenated string is 'Hi John Smith Nice to meet you!'
++ 
++-Test 4: (Over-the-edge: string1 over the limit)
+++>> Test 4: (Over-the-edge: string1 over the limit)
++ Type the 1st string (q - to quit):
++ Hello this is John Smith, Nice to meet you!
++ Type the 2nd string:
++ Concatenated string is 'Hello this is John Smith, Niceto meet you!'
++ 
++-Test 5: (Over-the-edge: string2 over the limit)
+++>> Test 5: (Over-the-edge: string2 over the limit)
++ Type the 1st string (q - to quit):
++ 12345
++ Type the 2nd string:
++ Hi John Smith Nice to meet you!
++ Concatenated string is '12345Hi John Smith Nice to meet you'
++ 
++-Test 6: (Over-the-edge: after concatenation string1 over the limit)
+++>> Test 6: (Over-the-edge: after concatenation string1 over the limit)
++ Type the 1st string (q - to quit):
++ Hello this is John Smith,
++ Type the 2nd string:
++  Nice to meet you!
++ Concatenated string is 'Hello this is John Smith, Nice to meet you!'
++ 
++-------Version 2-------
++-Test 1: (Identical)
+++--------------- Version 2: String Comparision -------------------------------
+++>> Test 1: (Identical)
++ Type the 1st string to compare (q - to quit):
++ test
++ Type the 2nd string to compare:
++ test
++ "test" string is equal to "test"
++ 
++-Test 2: (Case sensitive)
+++>> Test 2: (Case sensitive)
++ Type the 1st string to compare (q - to quit):
++ Test
++ Type the 2nd string to compare:
++ test
++ "Test" string is less than "test"
++ 
++-Test 3: (Different length)
+++>> Test 3: (Different length)
++ Type the 1st string to compare (q - to quit):
++ Hello World
++ Type the 2nd string to compare:
++ Hello
++ "Hello World" string is greater than "Hello"
++ 
++-Test 4: (Empty string)
+++>> Test 4: (Empty string)
++ Type the 1st string to compare (q - to quit):
++ 
++ Type the 2nd string to compare:
++ 
++ "" string is equal to ""
++ 
++-Test 5: (Special characters)
+++>> Test 5: (Special characters)
++ Type the 1st string to compare (q - to quit):
++ @123
++ Type the 2nd string to compare:
++ $456
++ "@123" string is greater than "$456"
++ 
++-Test 6: (Over-the-edge: compare1 over the limit)
+++>> Test 6: (Over-the-edge: compare1 over the limit)
++ Type the 1st string to compare (q - to quit):
++ Hello this is John Smith, Nice to meet you!
++ Type the 2nd string to compare:
++ "Hello this is John Smith, Nice" string is less than "to meet you!"
++ 
++-Test 7: (Over-the-edge: compare2 over the limit)
+++>> Test 7: (Over-the-edge: compare2 over the limit)
++ Type the 1st string to compare (q - to quit):
++ Hello this is John Smith, Nice
++ Type the 2nd string to compare:
++ Hello this is John Smith, Nice to meet you!
++ "Hello this is John Smith, Nice" string is equal to "Hello this is John Smith, Nice"
++ Type the 1st string to compare (q - to quit):
++-Type the 2nd string to compare:
++\ No newline at end of file
+++Type the 2nd string to compare:
+++
+++--------------- Version 3: String Search -------------------------------
+++>> Test 1: (Normal case)
+++Type the string (q - to quit):
+++Hello World!
+++Type the substring:
+++World
+++"World" found at 6 position
+++
+++>> Test 2: (needle at beginning)
+++Type the string (q - to quit):
+++Test starts now right?
+++Type the substring:
+++Test
+++"Test" found at 0 position
+++
+++>> Test 3: (needle at end)
+++Type the string (q - to quit):
+++This is a test
+++Type the substring:
+++test
+++"test" found at 10 position
+++
+++>> Test 4: (needle is single character)
+++Type the string (q - to quit):
+++Hello World!
+++Type the substring:
+++o
+++"o" found at 4 position
+++
+++>> Test 5: (needle not found)
+++Type the string (q - to quit):
+++Hello World!
+++Type the substring:
+++Happy
+++Not found
+++
+++>> Test 6: (haystack is empty)
+++Type the string (q - to quit):
+++
+++Type the substring:
+++test
+++Not found
+++
+++>> Test 7: (needle is empty)
+++Type the string (q - to quit):
+++test
+++Type the substring:
+++
+++"" found at 0 position
+++
+++>> Test 8: (Both string is empty)
+++Type the string (q - to quit):
+++
+++Type the substring:
+++
+++"" found at 0 position
+++
+++>> Test 9: (Over-the-edge: haystack over the limit)
+++Type the string (q - to quit):
+++one two three four five six seven eight nine ten
+++Type the substring:
+++Not found
+++
+++>> Test 10: (Over-the-edge: haystack over the limit with repeated pattern)
+++Type the string (q - to quit):
+++two three four two three four two three four two three four
+++Type the substring:
+++"wo three four two three four" found at 1 position
+++
+++>>Test 11: (Over-the-edge: needle over the limit)
+++Type the string (q - to quit):
+++four
+++Type the substring:
+++one two three four five six seven eight nine ten
+++Not found
+++Type the string (q - to quit):
+++Type the substring:
+++
+++
+++
++
++commit b70dcc9b0533d13e72fe7be9759f3bdeebd7747d
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Sat Dec 2 21:21:59 2023 -0500
++
++    Version 3: Finish code comments
++
++diff --git a/manipulating.c b/manipulating.c
++index c1f52ee..095ec35 100644
++--- a/manipulating.c
+++++ b/manipulating.c
++@@ -58,7 +58,7 @@ void manipulating(void) {
++     //printf("**** End of Concatenating Strings Demo ****\n");
++ 
++ 
++-/* Version 2 */
+++/* Version 2 
++     //------------- Demo of String Comparing ---------------
++ 
++     // Display the staring message for user to understand the purpose of this demo
++@@ -105,31 +105,49 @@ void manipulating(void) {
++         }
++     } while (strcmp(compare1, "q") != 0); // Continue looping until the user enter 'q' for the compare1
++     printf("**** End of Comparing Strings Demo ****\n");
+++    */
++     
++ 
++ /* Version 3 */
+++    //------------- Demo of String Search ---------------
+++
+++    // Display the staring message for user to understand the purpose of this demo
++     printf("**** Start of Searching Strings Demo ****\n");
++-    char haystack[BUFFER_SIZE];
++-    char needle[BUFFER_SIZE];
++-    char* occurrence = NULL;
+++    char haystack[BUFFER_SIZE]; // string to store user input as a searching library
+++    char needle[BUFFER_SIZE];  // string to store user input as a searching keyword
+++    char* occurrence = NULL; // variable to store search result, NULL = not found
+++    
+++    // Keep prompt for 2 string input until the user enter q to quit
++     do {
+++        // Prompt the user for the library string
++         printf("Type the string (q - to quit):\n");
++-        fgets(haystack, BUFFER_SIZE, stdin);
+++        fgets(haystack, BUFFER_SIZE, stdin); // Read the first input Cstring from user and stores in haystack
+++        // Remove the newline character at the end of the input string
++         haystack[strlen(haystack) - 1] = '\0';
+++        
+++        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
++         if (strcmp(haystack, "q") == 0) {
++             break;
++         }
+++        
+++        // Prompt the user for the keyword string/substring
++         printf("Type the substring:\n");
++-        fgets(needle, BUFFER_SIZE, stdin);
+++        fgets(needle, BUFFER_SIZE, stdin); // Read the second input Cstring from user and stores in needle
+++        // Remove the newline character at the end of the input string
++         needle[strlen(needle) - 1] = '\0';
+++
+++        //Search the occurrence of needle in haystack and store the result in variable occurance
++         occurrence = strstr(haystack, needle);
+++
+++        // Check the value of occurence and display corresponding message to user
+++        // Found the needle in haystack and give the exact position of needle in haystack
++         if (occurrence) {
++             printf("\"%s\" found at %d position\n", needle, (int)(occurrence - haystack));
++         }
++         else {
++             printf("Not found\n");
++         }
++-    } while (strcmp(haystack, "q") != 0);
+++    } while (strcmp(haystack, "q") != 0);// Continue looping until the user enter 'q' for the haystack
++     printf("**** End of Searching Strings Demo ****\n");
++     
++ }
++\ No newline at end of file
++
++commit be760f11843fc5c19823ee5807bad95400b2702f
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Sat Dec 2 19:29:27 2023 -0500
++
++    Version 3: Code without any comments
++
++diff --git a/manipulating.c b/manipulating.c
++index 0e763bf..c1f52ee 100644
++--- a/manipulating.c
+++++ b/manipulating.c
++@@ -107,7 +107,7 @@ void manipulating(void) {
++     printf("**** End of Comparing Strings Demo ****\n");
++     
++ 
++-/* Version 3 
+++/* Version 3 */
++     printf("**** Start of Searching Strings Demo ****\n");
++     char haystack[BUFFER_SIZE];
++     char needle[BUFFER_SIZE];
++@@ -131,5 +131,5 @@ void manipulating(void) {
++         }
++     } while (strcmp(haystack, "q") != 0);
++     printf("**** End of Searching Strings Demo ****\n");
++-    */
+++    
++ }
++\ No newline at end of file
++
++commit 60a339ffd2fcde2efa9b67ff5a315351107677a3
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Sat Dec 2 19:11:51 2023 -0500
++
++    Version 2: upload git log
++
++diff --git a/manipulating-git-log.txt b/manipulating-git-log.txt
++new file mode 100644
++index 0000000..7af623f
++--- /dev/null
+++++ b/manipulating-git-log.txt
++@@ -0,0 +1,643 @@
+++commit 65fd6432ce4b971660a56f7f960f06a714405a9b
+++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+++Date:   Sat Dec 2 19:02:49 2023 -0500
+++
+++    Version 1&2: Correct typos and revise the wording
+++
+++diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
+++index 741f37a..8058037 100644
+++Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
+++
+++commit 4b5197c169be2a959933edfdd976b123ed44f42e
+++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+++Date:   Sat Dec 2 19:01:42 2023 -0500
+++
+++    Header file: Add and revise some comment for easy understanding
+++
+++diff --git a/manipulating.h b/manipulating.h
+++index fdbd4a4..e3dcc7a 100644
+++--- a/manipulating.h
++++++ b/manipulating.h
+++@@ -3,10 +3,12 @@
+++ #ifndef _MANIPULATING_H_
+++ #define _MANIPULATING_H_
+++ 
++++//All system library needed
+++ #include <stdio.h>
+++ #include <string.h>
+++ 
+++-#define BUFFER_SIZE 32 // Define a constant for maximum string length
++++// Define a constant for maximum length of input string 
++++#define BUFFER_SIZE 32
+++ 
+++ // manipulating prototype: Allow users to manipulate string input
+++ //Including: string concatenate
+++
+++commit bccbd7b3a5fbf9465d1852b3dd642777bf3f29ce
+++Merge: 5724194 723cf02
+++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+++Date:   Sat Dec 2 18:58:38 2023 -0500
+++
+++    Merge branch 'manipulating' of https://github.com/xiaohanfu123/CPR101-Final-Project into manipulating
+++
+++commit 5724194a681ef0c8997824b91fc692f6dc29686f
+++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+++Date:   Sat Dec 2 18:57:50 2023 -0500
+++
+++    Version 1&2: Revise some comments to make them easy to understand the codes
+++
+++diff --git a/manipulating.c b/manipulating.c
+++index 31ce090..0e763bf 100644
+++--- a/manipulating.c
++++++ b/manipulating.c
+++@@ -9,9 +9,9 @@ Final Project
+++ */
+++ 
+++ /* The costomized library "manipulating.h" header file provides :
+++-    2 standard libraies: stdio.h and string.h
+++-    Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
+++-    Prototype for function manipulating
++++    - 2 standard libraies: stdio.h and string.h
++++    - Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
++++    - Prototype for function manipulating
+++ */
+++ #include "manipulating.h"   
+++ 
+++@@ -26,10 +26,10 @@ void manipulating(void) {
+++     // Display the staring message for user to understand the purpose of this demo
+++     //printf("**** Start of Concatenating Strings Demo ****\n");
+++     //// Declare 2 Cstring to store the string for concatenation 
+++-    //char string1[BUFFER_SIZE]; // first string 
+++-    //char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
++++    //char string1[BUFFER_SIZE]; // first string to store user first input
++++    //char string2[BUFFER_SIZE]; // second string to store user second input - concatenate to the end of first string
+++     //
+++-    //// Start a loop at least once and will continue until the user enter q to quit
++++    //// Keep prompt for 2 string input until the user enter q to quit
+++     //do {
+++     //    // Prompt the user for the first string
+++     //    printf("Type the 1st string (q - to quit):\n");
+++@@ -65,11 +65,11 @@ void manipulating(void) {
+++     printf("**** Start of Comparing Strings Demo ****\n");
+++ 
+++     // Declare 2 Cstring to store the string for comparison
+++-    char compare1[BUFFER_SIZE]; // first string
+++-    char compare2[BUFFER_SIZE]; // second string
++++    char compare1[BUFFER_SIZE]; // first string to store user first input
++++    char compare2[BUFFER_SIZE]; // second string to store user second input
+++     int result; // Store the comparison result
+++ 
+++-    // Start a loop at least once and will continue until the user enter q to quit
++++    // Keep prompt for 2 string input until the user enter q to quit
+++     do {
+++         // Prompt the user for the first string
+++         printf("Type the 1st string to compare (q - to quit):\n");
+++@@ -91,15 +91,15 @@ void manipulating(void) {
+++         result = strcmp(compare1, compare2);
+++ 
+++         // Check the value of reuslt and display corresponding message to user
+++-        // compare1 < compare2
++++        // compare1 < compare2 and output proper message to user
+++         if (result < 0) {
+++             printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
+++         }
+++-        // compare1 = compare2
++++        // compare1 = compare2 and output proper message to user
+++         else if (result == 0) {
+++             printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
+++         }
+++-        // compare1 > compare2 
++++        // compare1 > compare2 and output proper message to user
+++         else {
+++             printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
+++         }
+++
+++commit 723cf0212615fd781700c1580261a1488b866e62
+++Author: Jarviniazhao <151060098+Jarviniazhao@users.noreply.github.com>
+++Date:   Fri Dec 1 09:30:48 2023 -0500
+++
+++    Add general descriptions of manipulating
+++
+++diff --git a/README.md b/README.md
+++index 8a2ba66..e8b903a 100644
+++--- a/README.md
++++++ b/README.md
+++@@ -1 +1,4 @@
+++-# CPR101-Final-Project
+++\ No newline at end of file
++++# CPR101-Final-Project
++++
++++- Manipulating <br />
++++    This function provides the functionality to manipulate Cstings including 3 versions: string concatenation, comparison, and searching
+++
+++commit 259290768c7d6f4affc068cf206f83183da7ecb6
+++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+++Date:   Fri Dec 1 08:33:26 2023 -0500
+++
+++    Version 2: Comment out version1 code for testing version2 only
+++
+++diff --git a/manipulating.c b/manipulating.c
+++index e57d2ae..31ce090 100644
+++--- a/manipulating.c
++++++ b/manipulating.c
+++@@ -19,42 +19,43 @@ Final Project
+++ Function Purpose: This function provides the functionality to manipulate Cstings
+++ */
+++ void manipulating(void) {
++++
+++ /* Version 1 */
+++     //------------- Demo of String Concatenate ---------------
+++     
+++     // Display the staring message for user to understand the purpose of this demo
+++-    printf("**** Start of Concatenating Strings Demo ****\n");
+++-    // Declare 2 Cstring to store the string for concatenation 
+++-    char string1[BUFFER_SIZE]; // first string 
+++-    char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
+++-    
+++-    // Start a loop at least once and will continue until the user enter q to quit
+++-    do {
+++-        // Prompt the user for the first string
+++-        printf("Type the 1st string (q - to quit):\n");
+++-        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
+++-        // Remove the newline character at the end of the input string
+++-        string1[strlen(string1) - 1] = '\0';
+++-
+++-        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
+++-        if (strcmp(string1, "q") == 0) {
+++-            break;
+++-        }
+++-
+++-        // Prompt the user for the second string
+++-        printf("Type the 2nd string:\n");
+++-        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
+++-        // Remove the newline character at the end of the input string
+++-        string2[strlen(string2) - 1] = '\0'; 
+++-
+++-        // Concatenate the string2 to the string1
+++-        strcat(string1, string2);
+++-        // Display the result after concatenation
+++-        printf("Concatenated string is '%s'\n", string1);
+++-
+++-    } while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
+++-
+++-    printf("**** End of Concatenating Strings Demo ****\n");
++++    //printf("**** Start of Concatenating Strings Demo ****\n");
++++    //// Declare 2 Cstring to store the string for concatenation 
++++    //char string1[BUFFER_SIZE]; // first string 
++++    //char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
++++    //
++++    //// Start a loop at least once and will continue until the user enter q to quit
++++    //do {
++++    //    // Prompt the user for the first string
++++    //    printf("Type the 1st string (q - to quit):\n");
++++    //    fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
++++    //    // Remove the newline character at the end of the input string
++++    //    string1[strlen(string1) - 1] = '\0';
++++
++++    //    // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
++++    //    if (strcmp(string1, "q") == 0) {
++++    //        break;
++++    //    }
++++
++++    //    // Prompt the user for the second string
++++    //    printf("Type the 2nd string:\n");
++++    //    fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
++++    //    // Remove the newline character at the end of the input string
++++    //    string2[strlen(string2) - 1] = '\0'; 
++++
++++    //    // Concatenate the string2 to the string1
++++    //    strcat(string1, string2);
++++    //    // Display the result after concatenation
++++    //    printf("Concatenated string is '%s'\n", string1);
++++
++++    //} while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
++++
++++    //printf("**** End of Concatenating Strings Demo ****\n");
+++ 
+++ 
+++ /* Version 2 */
+++
+++commit 99c9ceef9a88f431213291029a49e438562858bd
+++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+++Date:   Thu Nov 30 23:45:15 2023 -0500
+++
+++    Version 2: Finish testing with 7 cases with actual output and case report
+++
+++diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
+++index 2a6351e..741f37a 100644
+++Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
+++diff --git a/manipulating-testing.txt b/manipulating-testing.txt
+++index 3cf3d34..1d00335 100644
+++--- a/manipulating-testing.txt
++++++ b/manipulating-testing.txt
+++@@ -42,3 +42,53 @@ Type the 2nd string:
+++  Nice to meet you!
+++ Concatenated string is 'Hello this is John Smith, Nice to meet you!'
+++ 
++++------Version 2-------
++++Test 1: (Identical)
++++Type the 1st string to compare (q - to quit):
++++test
++++Type the 2nd string to compare:
++++test
++++"test" string is equal to "test"
++++
++++Test 2: (Case sensitive)
++++Type the 1st string to compare (q - to quit):
++++Test
++++Type the 2nd string to compare:
++++test
++++"Test" string is less than "test"
++++
++++Test 3: (Different length)
++++Type the 1st string to compare (q - to quit):
++++Hello World
++++Type the 2nd string to compare:
++++Hello
++++"Hello World" string is greater than "Hello"
++++
++++Test 4: (Empty string)
++++Type the 1st string to compare (q - to quit):
++++
++++Type the 2nd string to compare:
++++
++++"" string is equal to ""
++++
++++Test 5: (Special characters)
++++Type the 1st string to compare (q - to quit):
++++@123
++++Type the 2nd string to compare:
++++$456
++++"@123" string is greater than "$456"
++++
++++Test 6: (Over-the-edge: compare1 over the limit)
++++Type the 1st string to compare (q - to quit):
++++Hello this is John Smith, Nice to meet you!
++++Type the 2nd string to compare:
++++"Hello this is John Smith, Nice" string is less than "to meet you!"
++++
++++Test 7: (Over-the-edge: compare2 over the limit)
++++Type the 1st string to compare (q - to quit):
++++Hello this is John Smith, Nice
++++Type the 2nd string to compare:
++++Hello this is John Smith, Nice to meet you!
++++"Hello this is John Smith, Nice" string is equal to "Hello this is John Smith, Nice"
++++Type the 1st string to compare (q - to quit):
++++Type the 2nd string to compare:
+++\ No newline at end of file
+++
+++commit e1419a3e16637354960b9e5ad4878737841c65c4
+++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+++Date:   Tue Nov 28 21:02:47 2023 -0500
+++
+++    Version 2: Finish comments 1.0
+++
+++diff --git a/manipulating.c b/manipulating.c
+++index caa2d08..e57d2ae 100644
+++--- a/manipulating.c
++++++ b/manipulating.c
+++@@ -32,7 +32,7 @@ void manipulating(void) {
+++     do {
+++         // Prompt the user for the first string
+++         printf("Type the 1st string (q - to quit):\n");
+++-        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user
++++        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
+++         // Remove the newline character at the end of the input string
+++         string1[strlen(string1) - 1] = '\0';
+++ 
+++@@ -43,7 +43,7 @@ void manipulating(void) {
+++ 
+++         // Prompt the user for the second string
+++         printf("Type the 2nd string:\n");
+++-        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user
++++        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
+++         // Remove the newline character at the end of the input string
+++         string2[strlen(string2) - 1] = '\0'; 
+++ 
+++@@ -58,31 +58,51 @@ void manipulating(void) {
+++ 
+++ 
+++ /* Version 2 */
++++    //------------- Demo of String Comparing ---------------
++++
++++    // Display the staring message for user to understand the purpose of this demo
+++     printf("**** Start of Comparing Strings Demo ****\n");
+++-    char compare1[BUFFER_SIZE];
+++-    char compare2[BUFFER_SIZE];
+++-    int result;
++++
++++    // Declare 2 Cstring to store the string for comparison
++++    char compare1[BUFFER_SIZE]; // first string
++++    char compare2[BUFFER_SIZE]; // second string
++++    int result; // Store the comparison result
++++
++++    // Start a loop at least once and will continue until the user enter q to quit
+++     do {
++++        // Prompt the user for the first string
+++         printf("Type the 1st string to compare (q - to quit):\n");
+++-        fgets(compare1, BUFFER_SIZE, stdin);
++++        fgets(compare1, BUFFER_SIZE, stdin); // Read the first input Cstring from user and stores in compare1
++++        // Remove the newline character at the end of the input string
+++         compare1[strlen(compare1) - 1] = '\0';
++++
++++        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
+++         if (strcmp(compare1, "q") == 0) {
+++             break;
+++         }
++++        // Prompt the user for the second string
+++         printf("Type the 2nd string to compare:\n");
+++-        fgets(compare2, BUFFER_SIZE, stdin);
++++        fgets(compare2, BUFFER_SIZE, stdin); // Read the second input Cstring from user and stores in compare2
++++        // Remove the newline character at the end of the input string
+++         compare2[strlen(compare2) - 1] = '\0';
++++
++++        // Compare compare1 with compare2 and store the result to variable reuslt
+++         result = strcmp(compare1, compare2);
++++
++++        // Check the value of reuslt and display corresponding message to user
++++        // compare1 < compare2
+++         if (result < 0) {
+++             printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
+++         }
++++        // compare1 = compare2
+++         else if (result == 0) {
+++             printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
+++         }
++++        // compare1 > compare2 
+++         else {
+++             printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
+++         }
+++-    } while (strcmp(compare1, "q") != 0);
++++    } while (strcmp(compare1, "q") != 0); // Continue looping until the user enter 'q' for the compare1
+++     printf("**** End of Comparing Strings Demo ****\n");
+++     
+++ 
+++
+++commit 63486a4aa9da65f01fe5b158a7a62d3683e27e23
+++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+++Date:   Tue Nov 28 20:48:36 2023 -0500
+++
+++    Correct a comment for Version 1, which was put for wrong code
+++
+++diff --git a/manipulating.c b/manipulating.c
+++index 58a46ce..caa2d08 100644
+++--- a/manipulating.c
++++++ b/manipulating.c
+++@@ -43,9 +43,9 @@ void manipulating(void) {
+++ 
+++         // Prompt the user for the second string
+++         printf("Type the 2nd string:\n");
+++-        fgets(string2, BUFFER_SIZE, stdin);
++++        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user
+++         // Remove the newline character at the end of the input string
+++-        string2[strlen(string2) - 1] = '\0'; // Read the second input string from user
++++        string2[strlen(string2) - 1] = '\0'; 
+++ 
+++         // Concatenate the string2 to the string1
+++         strcat(string1, string2);
+++
+++commit 13220bd1bfb31415bbed9664fd1e9fb3796c0525
+++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+++Date:   Tue Nov 28 20:27:55 2023 -0500
+++
+++    Adding completed work of version 1 for manipulating
+++
+++diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
+++new file mode 100644
+++index 0000000..2a6351e
+++Binary files /dev/null and b/manipulating-test-cases.xlsx differ
+++diff --git a/manipulating-testing.txt b/manipulating-testing.txt
+++new file mode 100644
+++index 0000000..3cf3d34
+++--- /dev/null
++++++ b/manipulating-testing.txt
+++@@ -0,0 +1,44 @@
++++Manipulating Testing 
++++
++++------Version 1-------
++++Test 1: (Normal case)
++++Type the 1st string (q - to quit):
++++John
++++Type the 2nd string:
++++ Simith
++++Concatenated string is 'John Simith'
++++
++++Test 2: (Empty string)
++++Type the 1st string (q - to quit):
++++
++++Type the 2nd string:
++++
++++Concatenated string is ''
++++
++++Test 3: (Edge case)
++++Type the 1st string (q - to quit):
++++Hi John Smith
++++Type the 2nd string:
++++ Nice to meet you!
++++Concatenated string is 'Hi John Smith Nice to meet you!'
++++
++++Test 4: (Over-the-edge: string1 over the limit)
++++Type the 1st string (q - to quit):
++++Hello this is John Smith, Nice to meet you!
++++Type the 2nd string:
++++Concatenated string is 'Hello this is John Smith, Niceto meet you!'
++++
++++Test 5: (Over-the-edge: string2 over the limit)
++++Type the 1st string (q - to quit):
++++12345
++++Type the 2nd string:
++++Hi John Smith Nice to meet you!
++++Concatenated string is '12345Hi John Smith Nice to meet you'
++++
++++Test 6: (Over-the-edge: after concatenation string1 over the limit)
++++Type the 1st string (q - to quit):
++++Hello this is John Smith,
++++Type the 2nd string:
++++ Nice to meet you!
++++Concatenated string is 'Hello this is John Smith, Nice to meet you!'
++++
+++diff --git a/manipulating.c b/manipulating.c
+++new file mode 100644
+++index 0000000..58a46ce
+++--- /dev/null
++++++ b/manipulating.c
+++@@ -0,0 +1,114 @@
++++#define _CRT_SECURE_NO_WARNINGS
++++/*
++++Author: Jarvinia Zhao
++++Email: jzhao169@myseneca.ca
++++ID: 143013233
++++Date Written: 11-27-2023
++++Course: CPR101.NNN
++++Final Project
++++*/
++++
++++/* The costomized library "manipulating.h" header file provides :
++++    2 standard libraies: stdio.h and string.h
++++    Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
++++    Prototype for function manipulating
++++*/
++++#include "manipulating.h"   
++++
++++/*
++++Function Purpose: This function provides the functionality to manipulate Cstings
++++*/
++++void manipulating(void) {
++++/* Version 1 */
++++    //------------- Demo of String Concatenate ---------------
++++    
++++    // Display the staring message for user to understand the purpose of this demo
++++    printf("**** Start of Concatenating Strings Demo ****\n");
++++    // Declare 2 Cstring to store the string for concatenation 
++++    char string1[BUFFER_SIZE]; // first string 
++++    char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
++++    
++++    // Start a loop at least once and will continue until the user enter q to quit
++++    do {
++++        // Prompt the user for the first string
++++        printf("Type the 1st string (q - to quit):\n");
++++        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user
++++        // Remove the newline character at the end of the input string
++++        string1[strlen(string1) - 1] = '\0';
++++
++++        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
++++        if (strcmp(string1, "q") == 0) {
++++            break;
++++        }
++++
++++        // Prompt the user for the second string
++++        printf("Type the 2nd string:\n");
++++        fgets(string2, BUFFER_SIZE, stdin);
++++        // Remove the newline character at the end of the input string
++++        string2[strlen(string2) - 1] = '\0'; // Read the second input string from user
++++
++++        // Concatenate the string2 to the string1
++++        strcat(string1, string2);
++++        // Display the result after concatenation
++++        printf("Concatenated string is '%s'\n", string1);
++++
++++    } while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
++++
++++    printf("**** End of Concatenating Strings Demo ****\n");
++++
++++
++++/* Version 2 */
++++    printf("**** Start of Comparing Strings Demo ****\n");
++++    char compare1[BUFFER_SIZE];
++++    char compare2[BUFFER_SIZE];
++++    int result;
++++    do {
++++        printf("Type the 1st string to compare (q - to quit):\n");
++++        fgets(compare1, BUFFER_SIZE, stdin);
++++        compare1[strlen(compare1) - 1] = '\0';
++++        if (strcmp(compare1, "q") == 0) {
++++            break;
++++        }
++++        printf("Type the 2nd string to compare:\n");
++++        fgets(compare2, BUFFER_SIZE, stdin);
++++        compare2[strlen(compare2) - 1] = '\0';
++++        result = strcmp(compare1, compare2);
++++        if (result < 0) {
++++            printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
++++        }
++++        else if (result == 0) {
++++            printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
++++        }
++++        else {
++++            printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
++++        }
++++    } while (strcmp(compare1, "q") != 0);
++++    printf("**** End of Comparing Strings Demo ****\n");
++++    
++++
++++/* Version 3 
++++    printf("**** Start of Searching Strings Demo ****\n");
++++    char haystack[BUFFER_SIZE];
++++    char needle[BUFFER_SIZE];
++++    char* occurrence = NULL;
++++    do {
++++        printf("Type the string (q - to quit):\n");
++++        fgets(haystack, BUFFER_SIZE, stdin);
++++        haystack[strlen(haystack) - 1] = '\0';
++++        if (strcmp(haystack, "q") == 0) {
++++            break;
++++        }
++++        printf("Type the substring:\n");
++++        fgets(needle, BUFFER_SIZE, stdin);
++++        needle[strlen(needle) - 1] = '\0';
++++        occurrence = strstr(haystack, needle);
++++        if (occurrence) {
++++            printf("\"%s\" found at %d position\n", needle, (int)(occurrence - haystack));
++++        }
++++        else {
++++            printf("Not found\n");
++++        }
++++    } while (strcmp(haystack, "q") != 0);
++++    printf("**** End of Searching Strings Demo ****\n");
++++    */
++++}
+++\ No newline at end of file
+++diff --git a/manipulating.h b/manipulating.h
+++new file mode 100644
+++index 0000000..fdbd4a4
+++--- /dev/null
++++++ b/manipulating.h
+++@@ -0,0 +1,15 @@
++++#pragma once
++++// MANIPULATING MODULE HEADER
++++#ifndef _MANIPULATING_H_
++++#define _MANIPULATING_H_
++++
++++#include <stdio.h>
++++#include <string.h>
++++
++++#define BUFFER_SIZE 32 // Define a constant for maximum string length
++++
++++// manipulating prototype: Allow users to manipulate string input
++++//Including: string concatenate
++++void manipulating(void);
++++
++++#endif
+++\ No newline at end of file
+++
+++commit 4382fcc46f84af21341f49a0a3d637836ef55795
+++Author: xiaohanfu123 <110127564+xiaohanfu123@users.noreply.github.com>
+++Date:   Wed Nov 15 22:09:25 2023 -0500
+++
+++    Initial commit
+++
+++diff --git a/LICENSE b/LICENSE
+++new file mode 100644
+++index 0000000..3db340b
+++--- /dev/null
++++++ b/LICENSE
+++@@ -0,0 +1,21 @@
++++MIT License
++++
++++Copyright (c) 2023 xiaohanfu123
++++
++++Permission is hereby granted, free of charge, to any person obtaining a copy
++++of this software and associated documentation files (the "Software"), to deal
++++in the Software without restriction, including without limitation the rights
++++to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
++++copies of the Software, and to permit persons to whom the Software is
++++furnished to do so, subject to the following conditions:
++++
++++The above copyright notice and this permission notice shall be included in all
++++copies or substantial portions of the Software.
++++
++++THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
++++IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
++++FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
++++AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
++++LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
++++OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
++++SOFTWARE.
+++diff --git a/README.md b/README.md
+++new file mode 100644
+++index 0000000..8a2ba66
+++--- /dev/null
++++++ b/README.md
+++@@ -0,0 +1 @@
++++# CPR101-Final-Project
+++\ No newline at end of file
++
+ commit 65fd6432ce4b971660a56f7f960f06a714405a9b
+ Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+ Date:   Sat Dec 2 19:02:49 2023 -0500
+
+commit cecfd8b0942d30a1248e56d1d1968e2866004398
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Wed Dec 6 13:45:46 2023 -0500
+
+    Version3: Minor format modifications
+
+diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
+index 5449f31..2fa13a7 100644
+Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
+diff --git a/manipulating-testing.txt b/manipulating-testing.txt
+index f73a2bc..80e1c9d 100644
+--- a/manipulating-testing.txt
++++ b/manipulating-testing.txt
+@@ -1,4 +1,4 @@
+-Manipulating Testing 
++Manipulating Testing Records
+ 
+ -------------- Version 1: String Concatenate -------------------------------
+ >> Test 1: (Normal case)
+
+commit 5ca8d5a33a8d2db071a1748e1c439a083789c4c7
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Sat Dec 2 21:30:36 2023 -0500
+
+    Version 2: Add one more testing case - one empty string
+
+diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
+index 4990758..5449f31 100644
+Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
+diff --git a/manipulating-testing.txt b/manipulating-testing.txt
+index 57c3364..f73a2bc 100644
+--- a/manipulating-testing.txt
++++ b/manipulating-testing.txt
+@@ -64,27 +64,34 @@ Type the 2nd string to compare:
+ Hello
+ "Hello World" string is greater than "Hello"
+ 
+->> Test 4: (Empty string)
++>> Test 4: (Compare one empty string)
++Type the 1st string to compare (q - to quit):
++
++Type the 2nd string to compare:
++test
++"" string is less than "test"
++
++>> Test 5: (Both string are empty )
+ Type the 1st string to compare (q - to quit):
+ 
+ Type the 2nd string to compare:
+ 
+ "" string is equal to ""
+ 
+->> Test 5: (Special characters)
++>> Test 6: (Special characters)
+ Type the 1st string to compare (q - to quit):
+ @123
+ Type the 2nd string to compare:
+ $456
+ "@123" string is greater than "$456"
+ 
+->> Test 6: (Over-the-edge: compare1 over the limit)
++>> Test 7: (Over-the-edge: compare1 over the limit)
+ Type the 1st string to compare (q - to quit):
+ Hello this is John Smith, Nice to meet you!
+ Type the 2nd string to compare:
+ "Hello this is John Smith, Nice" string is less than "to meet you!"
+ 
+->> Test 7: (Over-the-edge: compare2 over the limit)
++>> Test 8: (Over-the-edge: compare2 over the limit)
+ Type the 1st string to compare (q - to quit):
+ Hello this is John Smith, Nice
+ Type the 2nd string to compare:
+
+commit 4b8535e987cecb5e0dc6519e9aa7a5d8b2e87950
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Sat Dec 2 21:23:39 2023 -0500
+
+    Version 3: Upload testing case records, and modify the format of testing.txt
+
+diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
+index 8058037..4990758 100644
+Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
+diff --git a/manipulating-testing.txt b/manipulating-testing.txt
+index 1d00335..57c3364 100644
+--- a/manipulating-testing.txt
++++ b/manipulating-testing.txt
+@@ -1,94 +1,175 @@
+ Manipulating Testing 
+ 
+-------Version 1-------
+-Test 1: (Normal case)
++-------------- Version 1: String Concatenate -------------------------------
++>> Test 1: (Normal case)
+ Type the 1st string (q - to quit):
+ John
+ Type the 2nd string:
+  Simith
+ Concatenated string is 'John Simith'
+ 
+-Test 2: (Empty string)
++>> Test 2: (Empty string)
+ Type the 1st string (q - to quit):
+ 
+ Type the 2nd string:
+ 
+ Concatenated string is ''
+ 
+-Test 3: (Edge case)
++>> Test 3: (Edge case)
+ Type the 1st string (q - to quit):
+ Hi John Smith
+ Type the 2nd string:
+  Nice to meet you!
+ Concatenated string is 'Hi John Smith Nice to meet you!'
+ 
+-Test 4: (Over-the-edge: string1 over the limit)
++>> Test 4: (Over-the-edge: string1 over the limit)
+ Type the 1st string (q - to quit):
+ Hello this is John Smith, Nice to meet you!
+ Type the 2nd string:
+ Concatenated string is 'Hello this is John Smith, Niceto meet you!'
+ 
+-Test 5: (Over-the-edge: string2 over the limit)
++>> Test 5: (Over-the-edge: string2 over the limit)
+ Type the 1st string (q - to quit):
+ 12345
+ Type the 2nd string:
+ Hi John Smith Nice to meet you!
+ Concatenated string is '12345Hi John Smith Nice to meet you'
+ 
+-Test 6: (Over-the-edge: after concatenation string1 over the limit)
++>> Test 6: (Over-the-edge: after concatenation string1 over the limit)
+ Type the 1st string (q - to quit):
+ Hello this is John Smith,
+ Type the 2nd string:
+  Nice to meet you!
+ Concatenated string is 'Hello this is John Smith, Nice to meet you!'
+ 
+-------Version 2-------
+-Test 1: (Identical)
++--------------- Version 2: String Comparision -------------------------------
++>> Test 1: (Identical)
+ Type the 1st string to compare (q - to quit):
+ test
+ Type the 2nd string to compare:
+ test
+ "test" string is equal to "test"
+ 
+-Test 2: (Case sensitive)
++>> Test 2: (Case sensitive)
+ Type the 1st string to compare (q - to quit):
+ Test
+ Type the 2nd string to compare:
+ test
+ "Test" string is less than "test"
+ 
+-Test 3: (Different length)
++>> Test 3: (Different length)
+ Type the 1st string to compare (q - to quit):
+ Hello World
+ Type the 2nd string to compare:
+ Hello
+ "Hello World" string is greater than "Hello"
+ 
+-Test 4: (Empty string)
++>> Test 4: (Empty string)
+ Type the 1st string to compare (q - to quit):
+ 
+ Type the 2nd string to compare:
+ 
+ "" string is equal to ""
+ 
+-Test 5: (Special characters)
++>> Test 5: (Special characters)
+ Type the 1st string to compare (q - to quit):
+ @123
+ Type the 2nd string to compare:
+ $456
+ "@123" string is greater than "$456"
+ 
+-Test 6: (Over-the-edge: compare1 over the limit)
++>> Test 6: (Over-the-edge: compare1 over the limit)
+ Type the 1st string to compare (q - to quit):
+ Hello this is John Smith, Nice to meet you!
+ Type the 2nd string to compare:
+ "Hello this is John Smith, Nice" string is less than "to meet you!"
+ 
+-Test 7: (Over-the-edge: compare2 over the limit)
++>> Test 7: (Over-the-edge: compare2 over the limit)
+ Type the 1st string to compare (q - to quit):
+ Hello this is John Smith, Nice
+ Type the 2nd string to compare:
+ Hello this is John Smith, Nice to meet you!
+ "Hello this is John Smith, Nice" string is equal to "Hello this is John Smith, Nice"
+ Type the 1st string to compare (q - to quit):
+-Type the 2nd string to compare:
+\ No newline at end of file
++Type the 2nd string to compare:
++
++--------------- Version 3: String Search -------------------------------
++>> Test 1: (Normal case)
++Type the string (q - to quit):
++Hello World!
++Type the substring:
++World
++"World" found at 6 position
++
++>> Test 2: (needle at beginning)
++Type the string (q - to quit):
++Test starts now right?
++Type the substring:
++Test
++"Test" found at 0 position
++
++>> Test 3: (needle at end)
++Type the string (q - to quit):
++This is a test
++Type the substring:
++test
++"test" found at 10 position
++
++>> Test 4: (needle is single character)
++Type the string (q - to quit):
++Hello World!
++Type the substring:
++o
++"o" found at 4 position
++
++>> Test 5: (needle not found)
++Type the string (q - to quit):
++Hello World!
++Type the substring:
++Happy
++Not found
++
++>> Test 6: (haystack is empty)
++Type the string (q - to quit):
++
++Type the substring:
++test
++Not found
++
++>> Test 7: (needle is empty)
++Type the string (q - to quit):
++test
++Type the substring:
++
++"" found at 0 position
++
++>> Test 8: (Both string is empty)
++Type the string (q - to quit):
++
++Type the substring:
++
++"" found at 0 position
++
++>> Test 9: (Over-the-edge: haystack over the limit)
++Type the string (q - to quit):
++one two three four five six seven eight nine ten
++Type the substring:
++Not found
++
++>> Test 10: (Over-the-edge: haystack over the limit with repeated pattern)
++Type the string (q - to quit):
++two three four two three four two three four two three four
++Type the substring:
++"wo three four two three four" found at 1 position
++
++>>Test 11: (Over-the-edge: needle over the limit)
++Type the string (q - to quit):
++four
++Type the substring:
++one two three four five six seven eight nine ten
++Not found
++Type the string (q - to quit):
++Type the substring:
++
++
++
+
+commit b70dcc9b0533d13e72fe7be9759f3bdeebd7747d
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Sat Dec 2 21:21:59 2023 -0500
+
+    Version 3: Finish code comments
+
+diff --git a/manipulating.c b/manipulating.c
+index c1f52ee..095ec35 100644
+--- a/manipulating.c
++++ b/manipulating.c
+@@ -58,7 +58,7 @@ void manipulating(void) {
+     //printf("**** End of Concatenating Strings Demo ****\n");
+ 
+ 
+-/* Version 2 */
++/* Version 2 
+     //------------- Demo of String Comparing ---------------
+ 
+     // Display the staring message for user to understand the purpose of this demo
+@@ -105,31 +105,49 @@ void manipulating(void) {
+         }
+     } while (strcmp(compare1, "q") != 0); // Continue looping until the user enter 'q' for the compare1
+     printf("**** End of Comparing Strings Demo ****\n");
++    */
+     
+ 
+ /* Version 3 */
++    //------------- Demo of String Search ---------------
++
++    // Display the staring message for user to understand the purpose of this demo
+     printf("**** Start of Searching Strings Demo ****\n");
+-    char haystack[BUFFER_SIZE];
+-    char needle[BUFFER_SIZE];
+-    char* occurrence = NULL;
++    char haystack[BUFFER_SIZE]; // string to store user input as a searching library
++    char needle[BUFFER_SIZE];  // string to store user input as a searching keyword
++    char* occurrence = NULL; // variable to store search result, NULL = not found
++    
++    // Keep prompt for 2 string input until the user enter q to quit
+     do {
++        // Prompt the user for the library string
+         printf("Type the string (q - to quit):\n");
+-        fgets(haystack, BUFFER_SIZE, stdin);
++        fgets(haystack, BUFFER_SIZE, stdin); // Read the first input Cstring from user and stores in haystack
++        // Remove the newline character at the end of the input string
+         haystack[strlen(haystack) - 1] = '\0';
++        
++        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
+         if (strcmp(haystack, "q") == 0) {
+             break;
+         }
++        
++        // Prompt the user for the keyword string/substring
+         printf("Type the substring:\n");
+-        fgets(needle, BUFFER_SIZE, stdin);
++        fgets(needle, BUFFER_SIZE, stdin); // Read the second input Cstring from user and stores in needle
++        // Remove the newline character at the end of the input string
+         needle[strlen(needle) - 1] = '\0';
++
++        //Search the occurrence of needle in haystack and store the result in variable occurance
+         occurrence = strstr(haystack, needle);
++
++        // Check the value of occurence and display corresponding message to user
++        // Found the needle in haystack and give the exact position of needle in haystack
+         if (occurrence) {
+             printf("\"%s\" found at %d position\n", needle, (int)(occurrence - haystack));
+         }
+         else {
+             printf("Not found\n");
+         }
+-    } while (strcmp(haystack, "q") != 0);
++    } while (strcmp(haystack, "q") != 0);// Continue looping until the user enter 'q' for the haystack
+     printf("**** End of Searching Strings Demo ****\n");
+     
+ }
+\ No newline at end of file
+
+commit be760f11843fc5c19823ee5807bad95400b2702f
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Sat Dec 2 19:29:27 2023 -0500
+
+    Version 3: Code without any comments
+
+diff --git a/manipulating.c b/manipulating.c
+index 0e763bf..c1f52ee 100644
+--- a/manipulating.c
++++ b/manipulating.c
+@@ -107,7 +107,7 @@ void manipulating(void) {
+     printf("**** End of Comparing Strings Demo ****\n");
+     
+ 
+-/* Version 3 
++/* Version 3 */
+     printf("**** Start of Searching Strings Demo ****\n");
+     char haystack[BUFFER_SIZE];
+     char needle[BUFFER_SIZE];
+@@ -131,5 +131,5 @@ void manipulating(void) {
+         }
+     } while (strcmp(haystack, "q") != 0);
+     printf("**** End of Searching Strings Demo ****\n");
+-    */
++    
+ }
+\ No newline at end of file
+
+commit 60a339ffd2fcde2efa9b67ff5a315351107677a3
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Sat Dec 2 19:11:51 2023 -0500
+
+    Version 2: upload git log
+
+diff --git a/manipulating-git-log.txt b/manipulating-git-log.txt
+new file mode 100644
+index 0000000..7af623f
+--- /dev/null
++++ b/manipulating-git-log.txt
+@@ -0,0 +1,643 @@
++commit 65fd6432ce4b971660a56f7f960f06a714405a9b
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Sat Dec 2 19:02:49 2023 -0500
++
++    Version 1&2: Correct typos and revise the wording
++
++diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
++index 741f37a..8058037 100644
++Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
++
++commit 4b5197c169be2a959933edfdd976b123ed44f42e
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Sat Dec 2 19:01:42 2023 -0500
++
++    Header file: Add and revise some comment for easy understanding
++
++diff --git a/manipulating.h b/manipulating.h
++index fdbd4a4..e3dcc7a 100644
++--- a/manipulating.h
+++++ b/manipulating.h
++@@ -3,10 +3,12 @@
++ #ifndef _MANIPULATING_H_
++ #define _MANIPULATING_H_
++ 
+++//All system library needed
++ #include <stdio.h>
++ #include <string.h>
++ 
++-#define BUFFER_SIZE 32 // Define a constant for maximum string length
+++// Define a constant for maximum length of input string 
+++#define BUFFER_SIZE 32
++ 
++ // manipulating prototype: Allow users to manipulate string input
++ //Including: string concatenate
++
++commit bccbd7b3a5fbf9465d1852b3dd642777bf3f29ce
++Merge: 5724194 723cf02
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Sat Dec 2 18:58:38 2023 -0500
++
++    Merge branch 'manipulating' of https://github.com/xiaohanfu123/CPR101-Final-Project into manipulating
++
++commit 5724194a681ef0c8997824b91fc692f6dc29686f
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Sat Dec 2 18:57:50 2023 -0500
++
++    Version 1&2: Revise some comments to make them easy to understand the codes
++
++diff --git a/manipulating.c b/manipulating.c
++index 31ce090..0e763bf 100644
++--- a/manipulating.c
+++++ b/manipulating.c
++@@ -9,9 +9,9 @@ Final Project
++ */
++ 
++ /* The costomized library "manipulating.h" header file provides :
++-    2 standard libraies: stdio.h and string.h
++-    Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
++-    Prototype for function manipulating
+++    - 2 standard libraies: stdio.h and string.h
+++    - Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
+++    - Prototype for function manipulating
++ */
++ #include "manipulating.h"   
++ 
++@@ -26,10 +26,10 @@ void manipulating(void) {
++     // Display the staring message for user to understand the purpose of this demo
++     //printf("**** Start of Concatenating Strings Demo ****\n");
++     //// Declare 2 Cstring to store the string for concatenation 
++-    //char string1[BUFFER_SIZE]; // first string 
++-    //char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
+++    //char string1[BUFFER_SIZE]; // first string to store user first input
+++    //char string2[BUFFER_SIZE]; // second string to store user second input - concatenate to the end of first string
++     //
++-    //// Start a loop at least once and will continue until the user enter q to quit
+++    //// Keep prompt for 2 string input until the user enter q to quit
++     //do {
++     //    // Prompt the user for the first string
++     //    printf("Type the 1st string (q - to quit):\n");
++@@ -65,11 +65,11 @@ void manipulating(void) {
++     printf("**** Start of Comparing Strings Demo ****\n");
++ 
++     // Declare 2 Cstring to store the string for comparison
++-    char compare1[BUFFER_SIZE]; // first string
++-    char compare2[BUFFER_SIZE]; // second string
+++    char compare1[BUFFER_SIZE]; // first string to store user first input
+++    char compare2[BUFFER_SIZE]; // second string to store user second input
++     int result; // Store the comparison result
++ 
++-    // Start a loop at least once and will continue until the user enter q to quit
+++    // Keep prompt for 2 string input until the user enter q to quit
++     do {
++         // Prompt the user for the first string
++         printf("Type the 1st string to compare (q - to quit):\n");
++@@ -91,15 +91,15 @@ void manipulating(void) {
++         result = strcmp(compare1, compare2);
++ 
++         // Check the value of reuslt and display corresponding message to user
++-        // compare1 < compare2
+++        // compare1 < compare2 and output proper message to user
++         if (result < 0) {
++             printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
++         }
++-        // compare1 = compare2
+++        // compare1 = compare2 and output proper message to user
++         else if (result == 0) {
++             printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
++         }
++-        // compare1 > compare2 
+++        // compare1 > compare2 and output proper message to user
++         else {
++             printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
++         }
++
++commit 723cf0212615fd781700c1580261a1488b866e62
++Author: Jarviniazhao <151060098+Jarviniazhao@users.noreply.github.com>
++Date:   Fri Dec 1 09:30:48 2023 -0500
++
++    Add general descriptions of manipulating
++
++diff --git a/README.md b/README.md
++index 8a2ba66..e8b903a 100644
++--- a/README.md
+++++ b/README.md
++@@ -1 +1,4 @@
++-# CPR101-Final-Project
++\ No newline at end of file
+++# CPR101-Final-Project
+++
+++- Manipulating <br />
+++    This function provides the functionality to manipulate Cstings including 3 versions: string concatenation, comparison, and searching
++
++commit 259290768c7d6f4affc068cf206f83183da7ecb6
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Fri Dec 1 08:33:26 2023 -0500
++
++    Version 2: Comment out version1 code for testing version2 only
++
++diff --git a/manipulating.c b/manipulating.c
++index e57d2ae..31ce090 100644
++--- a/manipulating.c
+++++ b/manipulating.c
++@@ -19,42 +19,43 @@ Final Project
++ Function Purpose: This function provides the functionality to manipulate Cstings
++ */
++ void manipulating(void) {
+++
++ /* Version 1 */
++     //------------- Demo of String Concatenate ---------------
++     
++     // Display the staring message for user to understand the purpose of this demo
++-    printf("**** Start of Concatenating Strings Demo ****\n");
++-    // Declare 2 Cstring to store the string for concatenation 
++-    char string1[BUFFER_SIZE]; // first string 
++-    char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
++-    
++-    // Start a loop at least once and will continue until the user enter q to quit
++-    do {
++-        // Prompt the user for the first string
++-        printf("Type the 1st string (q - to quit):\n");
++-        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
++-        // Remove the newline character at the end of the input string
++-        string1[strlen(string1) - 1] = '\0';
++-
++-        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
++-        if (strcmp(string1, "q") == 0) {
++-            break;
++-        }
++-
++-        // Prompt the user for the second string
++-        printf("Type the 2nd string:\n");
++-        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
++-        // Remove the newline character at the end of the input string
++-        string2[strlen(string2) - 1] = '\0'; 
++-
++-        // Concatenate the string2 to the string1
++-        strcat(string1, string2);
++-        // Display the result after concatenation
++-        printf("Concatenated string is '%s'\n", string1);
++-
++-    } while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
++-
++-    printf("**** End of Concatenating Strings Demo ****\n");
+++    //printf("**** Start of Concatenating Strings Demo ****\n");
+++    //// Declare 2 Cstring to store the string for concatenation 
+++    //char string1[BUFFER_SIZE]; // first string 
+++    //char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
+++    //
+++    //// Start a loop at least once and will continue until the user enter q to quit
+++    //do {
+++    //    // Prompt the user for the first string
+++    //    printf("Type the 1st string (q - to quit):\n");
+++    //    fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
+++    //    // Remove the newline character at the end of the input string
+++    //    string1[strlen(string1) - 1] = '\0';
+++
+++    //    // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
+++    //    if (strcmp(string1, "q") == 0) {
+++    //        break;
+++    //    }
+++
+++    //    // Prompt the user for the second string
+++    //    printf("Type the 2nd string:\n");
+++    //    fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
+++    //    // Remove the newline character at the end of the input string
+++    //    string2[strlen(string2) - 1] = '\0'; 
+++
+++    //    // Concatenate the string2 to the string1
+++    //    strcat(string1, string2);
+++    //    // Display the result after concatenation
+++    //    printf("Concatenated string is '%s'\n", string1);
+++
+++    //} while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
+++
+++    //printf("**** End of Concatenating Strings Demo ****\n");
++ 
++ 
++ /* Version 2 */
++
++commit 99c9ceef9a88f431213291029a49e438562858bd
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Thu Nov 30 23:45:15 2023 -0500
++
++    Version 2: Finish testing with 7 cases with actual output and case report
++
++diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
++index 2a6351e..741f37a 100644
++Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
++diff --git a/manipulating-testing.txt b/manipulating-testing.txt
++index 3cf3d34..1d00335 100644
++--- a/manipulating-testing.txt
+++++ b/manipulating-testing.txt
++@@ -42,3 +42,53 @@ Type the 2nd string:
++  Nice to meet you!
++ Concatenated string is 'Hello this is John Smith, Nice to meet you!'
++ 
+++------Version 2-------
+++Test 1: (Identical)
+++Type the 1st string to compare (q - to quit):
+++test
+++Type the 2nd string to compare:
+++test
+++"test" string is equal to "test"
+++
+++Test 2: (Case sensitive)
+++Type the 1st string to compare (q - to quit):
+++Test
+++Type the 2nd string to compare:
+++test
+++"Test" string is less than "test"
+++
+++Test 3: (Different length)
+++Type the 1st string to compare (q - to quit):
+++Hello World
+++Type the 2nd string to compare:
+++Hello
+++"Hello World" string is greater than "Hello"
+++
+++Test 4: (Empty string)
+++Type the 1st string to compare (q - to quit):
+++
+++Type the 2nd string to compare:
+++
+++"" string is equal to ""
+++
+++Test 5: (Special characters)
+++Type the 1st string to compare (q - to quit):
+++@123
+++Type the 2nd string to compare:
+++$456
+++"@123" string is greater than "$456"
+++
+++Test 6: (Over-the-edge: compare1 over the limit)
+++Type the 1st string to compare (q - to quit):
+++Hello this is John Smith, Nice to meet you!
+++Type the 2nd string to compare:
+++"Hello this is John Smith, Nice" string is less than "to meet you!"
+++
+++Test 7: (Over-the-edge: compare2 over the limit)
+++Type the 1st string to compare (q - to quit):
+++Hello this is John Smith, Nice
+++Type the 2nd string to compare:
+++Hello this is John Smith, Nice to meet you!
+++"Hello this is John Smith, Nice" string is equal to "Hello this is John Smith, Nice"
+++Type the 1st string to compare (q - to quit):
+++Type the 2nd string to compare:
++\ No newline at end of file
++
++commit e1419a3e16637354960b9e5ad4878737841c65c4
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Tue Nov 28 21:02:47 2023 -0500
++
++    Version 2: Finish comments 1.0
++
++diff --git a/manipulating.c b/manipulating.c
++index caa2d08..e57d2ae 100644
++--- a/manipulating.c
+++++ b/manipulating.c
++@@ -32,7 +32,7 @@ void manipulating(void) {
++     do {
++         // Prompt the user for the first string
++         printf("Type the 1st string (q - to quit):\n");
++-        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user
+++        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
++         // Remove the newline character at the end of the input string
++         string1[strlen(string1) - 1] = '\0';
++ 
++@@ -43,7 +43,7 @@ void manipulating(void) {
++ 
++         // Prompt the user for the second string
++         printf("Type the 2nd string:\n");
++-        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user
+++        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
++         // Remove the newline character at the end of the input string
++         string2[strlen(string2) - 1] = '\0'; 
++ 
++@@ -58,31 +58,51 @@ void manipulating(void) {
++ 
++ 
++ /* Version 2 */
+++    //------------- Demo of String Comparing ---------------
+++
+++    // Display the staring message for user to understand the purpose of this demo
++     printf("**** Start of Comparing Strings Demo ****\n");
++-    char compare1[BUFFER_SIZE];
++-    char compare2[BUFFER_SIZE];
++-    int result;
+++
+++    // Declare 2 Cstring to store the string for comparison
+++    char compare1[BUFFER_SIZE]; // first string
+++    char compare2[BUFFER_SIZE]; // second string
+++    int result; // Store the comparison result
+++
+++    // Start a loop at least once and will continue until the user enter q to quit
++     do {
+++        // Prompt the user for the first string
++         printf("Type the 1st string to compare (q - to quit):\n");
++-        fgets(compare1, BUFFER_SIZE, stdin);
+++        fgets(compare1, BUFFER_SIZE, stdin); // Read the first input Cstring from user and stores in compare1
+++        // Remove the newline character at the end of the input string
++         compare1[strlen(compare1) - 1] = '\0';
+++
+++        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
++         if (strcmp(compare1, "q") == 0) {
++             break;
++         }
+++        // Prompt the user for the second string
++         printf("Type the 2nd string to compare:\n");
++-        fgets(compare2, BUFFER_SIZE, stdin);
+++        fgets(compare2, BUFFER_SIZE, stdin); // Read the second input Cstring from user and stores in compare2
+++        // Remove the newline character at the end of the input string
++         compare2[strlen(compare2) - 1] = '\0';
+++
+++        // Compare compare1 with compare2 and store the result to variable reuslt
++         result = strcmp(compare1, compare2);
+++
+++        // Check the value of reuslt and display corresponding message to user
+++        // compare1 < compare2
++         if (result < 0) {
++             printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
++         }
+++        // compare1 = compare2
++         else if (result == 0) {
++             printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
++         }
+++        // compare1 > compare2 
++         else {
++             printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
++         }
++-    } while (strcmp(compare1, "q") != 0);
+++    } while (strcmp(compare1, "q") != 0); // Continue looping until the user enter 'q' for the compare1
++     printf("**** End of Comparing Strings Demo ****\n");
++     
++ 
++
++commit 63486a4aa9da65f01fe5b158a7a62d3683e27e23
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Tue Nov 28 20:48:36 2023 -0500
++
++    Correct a comment for Version 1, which was put for wrong code
++
++diff --git a/manipulating.c b/manipulating.c
++index 58a46ce..caa2d08 100644
++--- a/manipulating.c
+++++ b/manipulating.c
++@@ -43,9 +43,9 @@ void manipulating(void) {
++ 
++         // Prompt the user for the second string
++         printf("Type the 2nd string:\n");
++-        fgets(string2, BUFFER_SIZE, stdin);
+++        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user
++         // Remove the newline character at the end of the input string
++-        string2[strlen(string2) - 1] = '\0'; // Read the second input string from user
+++        string2[strlen(string2) - 1] = '\0'; 
++ 
++         // Concatenate the string2 to the string1
++         strcat(string1, string2);
++
++commit 13220bd1bfb31415bbed9664fd1e9fb3796c0525
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Tue Nov 28 20:27:55 2023 -0500
++
++    Adding completed work of version 1 for manipulating
++
++diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
++new file mode 100644
++index 0000000..2a6351e
++Binary files /dev/null and b/manipulating-test-cases.xlsx differ
++diff --git a/manipulating-testing.txt b/manipulating-testing.txt
++new file mode 100644
++index 0000000..3cf3d34
++--- /dev/null
+++++ b/manipulating-testing.txt
++@@ -0,0 +1,44 @@
+++Manipulating Testing 
+++
+++------Version 1-------
+++Test 1: (Normal case)
+++Type the 1st string (q - to quit):
+++John
+++Type the 2nd string:
+++ Simith
+++Concatenated string is 'John Simith'
+++
+++Test 2: (Empty string)
+++Type the 1st string (q - to quit):
+++
+++Type the 2nd string:
+++
+++Concatenated string is ''
+++
+++Test 3: (Edge case)
+++Type the 1st string (q - to quit):
+++Hi John Smith
+++Type the 2nd string:
+++ Nice to meet you!
+++Concatenated string is 'Hi John Smith Nice to meet you!'
+++
+++Test 4: (Over-the-edge: string1 over the limit)
+++Type the 1st string (q - to quit):
+++Hello this is John Smith, Nice to meet you!
+++Type the 2nd string:
+++Concatenated string is 'Hello this is John Smith, Niceto meet you!'
+++
+++Test 5: (Over-the-edge: string2 over the limit)
+++Type the 1st string (q - to quit):
+++12345
+++Type the 2nd string:
+++Hi John Smith Nice to meet you!
+++Concatenated string is '12345Hi John Smith Nice to meet you'
+++
+++Test 6: (Over-the-edge: after concatenation string1 over the limit)
+++Type the 1st string (q - to quit):
+++Hello this is John Smith,
+++Type the 2nd string:
+++ Nice to meet you!
+++Concatenated string is 'Hello this is John Smith, Nice to meet you!'
+++
++diff --git a/manipulating.c b/manipulating.c
++new file mode 100644
++index 0000000..58a46ce
++--- /dev/null
+++++ b/manipulating.c
++@@ -0,0 +1,114 @@
+++#define _CRT_SECURE_NO_WARNINGS
+++/*
+++Author: Jarvinia Zhao
+++Email: jzhao169@myseneca.ca
+++ID: 143013233
+++Date Written: 11-27-2023
+++Course: CPR101.NNN
+++Final Project
+++*/
+++
+++/* The costomized library "manipulating.h" header file provides :
+++    2 standard libraies: stdio.h and string.h
+++    Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
+++    Prototype for function manipulating
+++*/
+++#include "manipulating.h"   
+++
+++/*
+++Function Purpose: This function provides the functionality to manipulate Cstings
+++*/
+++void manipulating(void) {
+++/* Version 1 */
+++    //------------- Demo of String Concatenate ---------------
+++    
+++    // Display the staring message for user to understand the purpose of this demo
+++    printf("**** Start of Concatenating Strings Demo ****\n");
+++    // Declare 2 Cstring to store the string for concatenation 
+++    char string1[BUFFER_SIZE]; // first string 
+++    char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
+++    
+++    // Start a loop at least once and will continue until the user enter q to quit
+++    do {
+++        // Prompt the user for the first string
+++        printf("Type the 1st string (q - to quit):\n");
+++        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user
+++        // Remove the newline character at the end of the input string
+++        string1[strlen(string1) - 1] = '\0';
+++
+++        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
+++        if (strcmp(string1, "q") == 0) {
+++            break;
+++        }
+++
+++        // Prompt the user for the second string
+++        printf("Type the 2nd string:\n");
+++        fgets(string2, BUFFER_SIZE, stdin);
+++        // Remove the newline character at the end of the input string
+++        string2[strlen(string2) - 1] = '\0'; // Read the second input string from user
+++
+++        // Concatenate the string2 to the string1
+++        strcat(string1, string2);
+++        // Display the result after concatenation
+++        printf("Concatenated string is '%s'\n", string1);
+++
+++    } while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
+++
+++    printf("**** End of Concatenating Strings Demo ****\n");
+++
+++
+++/* Version 2 */
+++    printf("**** Start of Comparing Strings Demo ****\n");
+++    char compare1[BUFFER_SIZE];
+++    char compare2[BUFFER_SIZE];
+++    int result;
+++    do {
+++        printf("Type the 1st string to compare (q - to quit):\n");
+++        fgets(compare1, BUFFER_SIZE, stdin);
+++        compare1[strlen(compare1) - 1] = '\0';
+++        if (strcmp(compare1, "q") == 0) {
+++            break;
+++        }
+++        printf("Type the 2nd string to compare:\n");
+++        fgets(compare2, BUFFER_SIZE, stdin);
+++        compare2[strlen(compare2) - 1] = '\0';
+++        result = strcmp(compare1, compare2);
+++        if (result < 0) {
+++            printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
+++        }
+++        else if (result == 0) {
+++            printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
+++        }
+++        else {
+++            printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
+++        }
+++    } while (strcmp(compare1, "q") != 0);
+++    printf("**** End of Comparing Strings Demo ****\n");
+++    
+++
+++/* Version 3 
+++    printf("**** Start of Searching Strings Demo ****\n");
+++    char haystack[BUFFER_SIZE];
+++    char needle[BUFFER_SIZE];
+++    char* occurrence = NULL;
+++    do {
+++        printf("Type the string (q - to quit):\n");
+++        fgets(haystack, BUFFER_SIZE, stdin);
+++        haystack[strlen(haystack) - 1] = '\0';
+++        if (strcmp(haystack, "q") == 0) {
+++            break;
+++        }
+++        printf("Type the substring:\n");
+++        fgets(needle, BUFFER_SIZE, stdin);
+++        needle[strlen(needle) - 1] = '\0';
+++        occurrence = strstr(haystack, needle);
+++        if (occurrence) {
+++            printf("\"%s\" found at %d position\n", needle, (int)(occurrence - haystack));
+++        }
+++        else {
+++            printf("Not found\n");
+++        }
+++    } while (strcmp(haystack, "q") != 0);
+++    printf("**** End of Searching Strings Demo ****\n");
+++    */
+++}
++\ No newline at end of file
++diff --git a/manipulating.h b/manipulating.h
++new file mode 100644
++index 0000000..fdbd4a4
++--- /dev/null
+++++ b/manipulating.h
++@@ -0,0 +1,15 @@
+++#pragma once
+++// MANIPULATING MODULE HEADER
+++#ifndef _MANIPULATING_H_
+++#define _MANIPULATING_H_
+++
+++#include <stdio.h>
+++#include <string.h>
+++
+++#define BUFFER_SIZE 32 // Define a constant for maximum string length
+++
+++// manipulating prototype: Allow users to manipulate string input
+++//Including: string concatenate
+++void manipulating(void);
+++
+++#endif
++\ No newline at end of file
++
++commit 4382fcc46f84af21341f49a0a3d637836ef55795
++Author: xiaohanfu123 <110127564+xiaohanfu123@users.noreply.github.com>
++Date:   Wed Nov 15 22:09:25 2023 -0500
++
++    Initial commit
++
++diff --git a/LICENSE b/LICENSE
++new file mode 100644
++index 0000000..3db340b
++--- /dev/null
+++++ b/LICENSE
++@@ -0,0 +1,21 @@
+++MIT License
+++
+++Copyright (c) 2023 xiaohanfu123
+++
+++Permission is hereby granted, free of charge, to any person obtaining a copy
+++of this software and associated documentation files (the "Software"), to deal
+++in the Software without restriction, including without limitation the rights
+++to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+++copies of the Software, and to permit persons to whom the Software is
+++furnished to do so, subject to the following conditions:
+++
+++The above copyright notice and this permission notice shall be included in all
+++copies or substantial portions of the Software.
+++
+++THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+++IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+++FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+++AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+++LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+++OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+++SOFTWARE.
++diff --git a/README.md b/README.md
++new file mode 100644
++index 0000000..8a2ba66
++--- /dev/null
+++++ b/README.md
++@@ -0,0 +1 @@
+++# CPR101-Final-Project
++\ No newline at end of file
+
+commit 65fd6432ce4b971660a56f7f960f06a714405a9b
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Sat Dec 2 19:02:49 2023 -0500
+
+    Version 1&2: Correct typos and revise the wording
+
+diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
+index 741f37a..8058037 100644
+Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
+
+commit 4b5197c169be2a959933edfdd976b123ed44f42e
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Sat Dec 2 19:01:42 2023 -0500
+
+    Header file: Add and revise some comment for easy understanding
+
+diff --git a/manipulating.h b/manipulating.h
+index fdbd4a4..e3dcc7a 100644
+--- a/manipulating.h
++++ b/manipulating.h
+@@ -3,10 +3,12 @@
+ #ifndef _MANIPULATING_H_
+ #define _MANIPULATING_H_
+ 
++//All system library needed
+ #include <stdio.h>
+ #include <string.h>
+ 
+-#define BUFFER_SIZE 32 // Define a constant for maximum string length
++// Define a constant for maximum length of input string 
++#define BUFFER_SIZE 32
+ 
+ // manipulating prototype: Allow users to manipulate string input
+ //Including: string concatenate
+
+commit bccbd7b3a5fbf9465d1852b3dd642777bf3f29ce
+Merge: 5724194 723cf02
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Sat Dec 2 18:58:38 2023 -0500
+
+    Merge branch 'manipulating' of https://github.com/xiaohanfu123/CPR101-Final-Project into manipulating
+
+commit 5724194a681ef0c8997824b91fc692f6dc29686f
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Sat Dec 2 18:57:50 2023 -0500
+
+    Version 1&2: Revise some comments to make them easy to understand the codes
+
+diff --git a/manipulating.c b/manipulating.c
+index 31ce090..0e763bf 100644
+--- a/manipulating.c
++++ b/manipulating.c
+@@ -9,9 +9,9 @@ Final Project
+ */
+ 
+ /* The costomized library "manipulating.h" header file provides :
+-    2 standard libraies: stdio.h and string.h
+-    Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
+-    Prototype for function manipulating
++    - 2 standard libraies: stdio.h and string.h
++    - Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
++    - Prototype for function manipulating
+ */
+ #include "manipulating.h"   
+ 
+@@ -26,10 +26,10 @@ void manipulating(void) {
+     // Display the staring message for user to understand the purpose of this demo
+     //printf("**** Start of Concatenating Strings Demo ****\n");
+     //// Declare 2 Cstring to store the string for concatenation 
+-    //char string1[BUFFER_SIZE]; // first string 
+-    //char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
++    //char string1[BUFFER_SIZE]; // first string to store user first input
++    //char string2[BUFFER_SIZE]; // second string to store user second input - concatenate to the end of first string
+     //
+-    //// Start a loop at least once and will continue until the user enter q to quit
++    //// Keep prompt for 2 string input until the user enter q to quit
+     //do {
+     //    // Prompt the user for the first string
+     //    printf("Type the 1st string (q - to quit):\n");
+@@ -65,11 +65,11 @@ void manipulating(void) {
+     printf("**** Start of Comparing Strings Demo ****\n");
+ 
+     // Declare 2 Cstring to store the string for comparison
+-    char compare1[BUFFER_SIZE]; // first string
+-    char compare2[BUFFER_SIZE]; // second string
++    char compare1[BUFFER_SIZE]; // first string to store user first input
++    char compare2[BUFFER_SIZE]; // second string to store user second input
+     int result; // Store the comparison result
+ 
+-    // Start a loop at least once and will continue until the user enter q to quit
++    // Keep prompt for 2 string input until the user enter q to quit
+     do {
+         // Prompt the user for the first string
+         printf("Type the 1st string to compare (q - to quit):\n");
+@@ -91,15 +91,15 @@ void manipulating(void) {
+         result = strcmp(compare1, compare2);
+ 
+         // Check the value of reuslt and display corresponding message to user
+-        // compare1 < compare2
++        // compare1 < compare2 and output proper message to user
+         if (result < 0) {
+             printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
+         }
+-        // compare1 = compare2
++        // compare1 = compare2 and output proper message to user
+         else if (result == 0) {
+             printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
+         }
+-        // compare1 > compare2 
++        // compare1 > compare2 and output proper message to user
+         else {
+             printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
+         }
+
+commit 723cf0212615fd781700c1580261a1488b866e62
+Author: Jarviniazhao <151060098+Jarviniazhao@users.noreply.github.com>
+Date:   Fri Dec 1 09:30:48 2023 -0500
+
+    Add general descriptions of manipulating
+
+diff --git a/README.md b/README.md
+index 8a2ba66..e8b903a 100644
+--- a/README.md
++++ b/README.md
+@@ -1 +1,4 @@
+-# CPR101-Final-Project
+\ No newline at end of file
++# CPR101-Final-Project
++
++- Manipulating <br />
++    This function provides the functionality to manipulate Cstings including 3 versions: string concatenation, comparison, and searching
+
+commit 259290768c7d6f4affc068cf206f83183da7ecb6
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Fri Dec 1 08:33:26 2023 -0500
+
+    Version 2: Comment out version1 code for testing version2 only
+
+diff --git a/manipulating.c b/manipulating.c
+index e57d2ae..31ce090 100644
+--- a/manipulating.c
++++ b/manipulating.c
+@@ -19,42 +19,43 @@ Final Project
+ Function Purpose: This function provides the functionality to manipulate Cstings
+ */
+ void manipulating(void) {
++
+ /* Version 1 */
+     //------------- Demo of String Concatenate ---------------
+     
+     // Display the staring message for user to understand the purpose of this demo
+-    printf("**** Start of Concatenating Strings Demo ****\n");
+-    // Declare 2 Cstring to store the string for concatenation 
+-    char string1[BUFFER_SIZE]; // first string 
+-    char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
+-    
+-    // Start a loop at least once and will continue until the user enter q to quit
+-    do {
+-        // Prompt the user for the first string
+-        printf("Type the 1st string (q - to quit):\n");
+-        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
+-        // Remove the newline character at the end of the input string
+-        string1[strlen(string1) - 1] = '\0';
+-
+-        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
+-        if (strcmp(string1, "q") == 0) {
+-            break;
+-        }
+-
+-        // Prompt the user for the second string
+-        printf("Type the 2nd string:\n");
+-        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
+-        // Remove the newline character at the end of the input string
+-        string2[strlen(string2) - 1] = '\0'; 
+-
+-        // Concatenate the string2 to the string1
+-        strcat(string1, string2);
+-        // Display the result after concatenation
+-        printf("Concatenated string is '%s'\n", string1);
+-
+-    } while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
+-
+-    printf("**** End of Concatenating Strings Demo ****\n");
++    //printf("**** Start of Concatenating Strings Demo ****\n");
++    //// Declare 2 Cstring to store the string for concatenation 
++    //char string1[BUFFER_SIZE]; // first string 
++    //char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
++    //
++    //// Start a loop at least once and will continue until the user enter q to quit
++    //do {
++    //    // Prompt the user for the first string
++    //    printf("Type the 1st string (q - to quit):\n");
++    //    fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
++    //    // Remove the newline character at the end of the input string
++    //    string1[strlen(string1) - 1] = '\0';
++
++    //    // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
++    //    if (strcmp(string1, "q") == 0) {
++    //        break;
++    //    }
++
++    //    // Prompt the user for the second string
++    //    printf("Type the 2nd string:\n");
++    //    fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
++    //    // Remove the newline character at the end of the input string
++    //    string2[strlen(string2) - 1] = '\0'; 
++
++    //    // Concatenate the string2 to the string1
++    //    strcat(string1, string2);
++    //    // Display the result after concatenation
++    //    printf("Concatenated string is '%s'\n", string1);
++
++    //} while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
++
++    //printf("**** End of Concatenating Strings Demo ****\n");
+ 
+ 
+ /* Version 2 */
+
+commit 99c9ceef9a88f431213291029a49e438562858bd
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Thu Nov 30 23:45:15 2023 -0500
+
+    Version 2: Finish testing with 7 cases with actual output and case report
+
+diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
+index 2a6351e..741f37a 100644
+Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
+diff --git a/manipulating-testing.txt b/manipulating-testing.txt
+index 3cf3d34..1d00335 100644
+--- a/manipulating-testing.txt
++++ b/manipulating-testing.txt
+@@ -42,3 +42,53 @@ Type the 2nd string:
+  Nice to meet you!
+ Concatenated string is 'Hello this is John Smith, Nice to meet you!'
+ 
++------Version 2-------
++Test 1: (Identical)
++Type the 1st string to compare (q - to quit):
++test
++Type the 2nd string to compare:
++test
++"test" string is equal to "test"
++
++Test 2: (Case sensitive)
++Type the 1st string to compare (q - to quit):
++Test
++Type the 2nd string to compare:
++test
++"Test" string is less than "test"
++
++Test 3: (Different length)
++Type the 1st string to compare (q - to quit):
++Hello World
++Type the 2nd string to compare:
++Hello
++"Hello World" string is greater than "Hello"
++
++Test 4: (Empty string)
++Type the 1st string to compare (q - to quit):
++
++Type the 2nd string to compare:
++
++"" string is equal to ""
++
++Test 5: (Special characters)
++Type the 1st string to compare (q - to quit):
++@123
++Type the 2nd string to compare:
++$456
++"@123" string is greater than "$456"
++
++Test 6: (Over-the-edge: compare1 over the limit)
++Type the 1st string to compare (q - to quit):
++Hello this is John Smith, Nice to meet you!
++Type the 2nd string to compare:
++"Hello this is John Smith, Nice" string is less than "to meet you!"
++
++Test 7: (Over-the-edge: compare2 over the limit)
++Type the 1st string to compare (q - to quit):
++Hello this is John Smith, Nice
++Type the 2nd string to compare:
++Hello this is John Smith, Nice to meet you!
++"Hello this is John Smith, Nice" string is equal to "Hello this is John Smith, Nice"
++Type the 1st string to compare (q - to quit):
++Type the 2nd string to compare:
+\ No newline at end of file
+
+commit e1419a3e16637354960b9e5ad4878737841c65c4
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Tue Nov 28 21:02:47 2023 -0500
+
+    Version 2: Finish comments 1.0
+
+diff --git a/manipulating.c b/manipulating.c
+index caa2d08..e57d2ae 100644
+--- a/manipulating.c
++++ b/manipulating.c
+@@ -32,7 +32,7 @@ void manipulating(void) {
+     do {
+         // Prompt the user for the first string
+         printf("Type the 1st string (q - to quit):\n");
+-        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user
++        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
+         // Remove the newline character at the end of the input string
+         string1[strlen(string1) - 1] = '\0';
+ 
+@@ -43,7 +43,7 @@ void manipulating(void) {
+ 
+         // Prompt the user for the second string
+         printf("Type the 2nd string:\n");
+-        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user
++        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
+         // Remove the newline character at the end of the input string
+         string2[strlen(string2) - 1] = '\0'; 
+ 
+@@ -58,31 +58,51 @@ void manipulating(void) {
+ 
+ 
+ /* Version 2 */
++    //------------- Demo of String Comparing ---------------
++
++    // Display the staring message for user to understand the purpose of this demo
+     printf("**** Start of Comparing Strings Demo ****\n");
+-    char compare1[BUFFER_SIZE];
+-    char compare2[BUFFER_SIZE];
+-    int result;
++
++    // Declare 2 Cstring to store the string for comparison
++    char compare1[BUFFER_SIZE]; // first string
++    char compare2[BUFFER_SIZE]; // second string
++    int result; // Store the comparison result
++
++    // Start a loop at least once and will continue until the user enter q to quit
+     do {
++        // Prompt the user for the first string
+         printf("Type the 1st string to compare (q - to quit):\n");
+-        fgets(compare1, BUFFER_SIZE, stdin);
++        fgets(compare1, BUFFER_SIZE, stdin); // Read the first input Cstring from user and stores in compare1
++        // Remove the newline character at the end of the input string
+         compare1[strlen(compare1) - 1] = '\0';
++
++        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
+         if (strcmp(compare1, "q") == 0) {
+             break;
+         }
++        // Prompt the user for the second string
+         printf("Type the 2nd string to compare:\n");
+-        fgets(compare2, BUFFER_SIZE, stdin);
++        fgets(compare2, BUFFER_SIZE, stdin); // Read the second input Cstring from user and stores in compare2
++        // Remove the newline character at the end of the input string
+         compare2[strlen(compare2) - 1] = '\0';
++
++        // Compare compare1 with compare2 and store the result to variable reuslt
+         result = strcmp(compare1, compare2);
++
++        // Check the value of reuslt and display corresponding message to user
++        // compare1 < compare2
+         if (result < 0) {
+             printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
+         }
++        // compare1 = compare2
+         else if (result == 0) {
+             printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
+         }
++        // compare1 > compare2 
+         else {
+             printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
+         }
+-    } while (strcmp(compare1, "q") != 0);
++    } while (strcmp(compare1, "q") != 0); // Continue looping until the user enter 'q' for the compare1
+     printf("**** End of Comparing Strings Demo ****\n");
+     
+ 
+
+commit 63486a4aa9da65f01fe5b158a7a62d3683e27e23
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Tue Nov 28 20:48:36 2023 -0500
+
+    Correct a comment for Version 1, which was put for wrong code
+
+diff --git a/manipulating.c b/manipulating.c
+index 58a46ce..caa2d08 100644
+--- a/manipulating.c
++++ b/manipulating.c
+@@ -43,9 +43,9 @@ void manipulating(void) {
+ 
+         // Prompt the user for the second string
+         printf("Type the 2nd string:\n");
+-        fgets(string2, BUFFER_SIZE, stdin);
++        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user
+         // Remove the newline character at the end of the input string
+-        string2[strlen(string2) - 1] = '\0'; // Read the second input string from user
++        string2[strlen(string2) - 1] = '\0'; 
+ 
+         // Concatenate the string2 to the string1
+         strcat(string1, string2);
+
+commit 13220bd1bfb31415bbed9664fd1e9fb3796c0525
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Tue Nov 28 20:27:55 2023 -0500
+
+    Adding completed work of version 1 for manipulating
+
+diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
+new file mode 100644
+index 0000000..2a6351e
+Binary files /dev/null and b/manipulating-test-cases.xlsx differ
+diff --git a/manipulating-testing.txt b/manipulating-testing.txt
+new file mode 100644
+index 0000000..3cf3d34
+--- /dev/null
++++ b/manipulating-testing.txt
+@@ -0,0 +1,44 @@
++Manipulating Testing 
++
++------Version 1-------
++Test 1: (Normal case)
++Type the 1st string (q - to quit):
++John
++Type the 2nd string:
++ Simith
++Concatenated string is 'John Simith'
++
++Test 2: (Empty string)
++Type the 1st string (q - to quit):
++
++Type the 2nd string:
++
++Concatenated string is ''
++
++Test 3: (Edge case)
++Type the 1st string (q - to quit):
++Hi John Smith
++Type the 2nd string:
++ Nice to meet you!
++Concatenated string is 'Hi John Smith Nice to meet you!'
++
++Test 4: (Over-the-edge: string1 over the limit)
++Type the 1st string (q - to quit):
++Hello this is John Smith, Nice to meet you!
++Type the 2nd string:
++Concatenated string is 'Hello this is John Smith, Niceto meet you!'
++
++Test 5: (Over-the-edge: string2 over the limit)
++Type the 1st string (q - to quit):
++12345
++Type the 2nd string:
++Hi John Smith Nice to meet you!
++Concatenated string is '12345Hi John Smith Nice to meet you'
++
++Test 6: (Over-the-edge: after concatenation string1 over the limit)
++Type the 1st string (q - to quit):
++Hello this is John Smith,
++Type the 2nd string:
++ Nice to meet you!
++Concatenated string is 'Hello this is John Smith, Nice to meet you!'
++
+diff --git a/manipulating.c b/manipulating.c
+new file mode 100644
+index 0000000..58a46ce
+--- /dev/null
++++ b/manipulating.c
+@@ -0,0 +1,114 @@
++#define _CRT_SECURE_NO_WARNINGS
++/*
++Author: Jarvinia Zhao
++Email: jzhao169@myseneca.ca
++ID: 143013233
++Date Written: 11-27-2023
++Course: CPR101.NNN
++Final Project
++*/
++
++/* The costomized library "manipulating.h" header file provides :
++    2 standard libraies: stdio.h and string.h
++    Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
++    Prototype for function manipulating
++*/
++#include "manipulating.h"   
++
++/*
++Function Purpose: This function provides the functionality to manipulate Cstings
++*/
++void manipulating(void) {
++/* Version 1 */
++    //------------- Demo of String Concatenate ---------------
++    
++    // Display the staring message for user to understand the purpose of this demo
++    printf("**** Start of Concatenating Strings Demo ****\n");
++    // Declare 2 Cstring to store the string for concatenation 
++    char string1[BUFFER_SIZE]; // first string 
++    char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
++    
++    // Start a loop at least once and will continue until the user enter q to quit
++    do {
++        // Prompt the user for the first string
++        printf("Type the 1st string (q - to quit):\n");
++        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user
++        // Remove the newline character at the end of the input string
++        string1[strlen(string1) - 1] = '\0';
++
++        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
++        if (strcmp(string1, "q") == 0) {
++            break;
++        }
++
++        // Prompt the user for the second string
++        printf("Type the 2nd string:\n");
++        fgets(string2, BUFFER_SIZE, stdin);
++        // Remove the newline character at the end of the input string
++        string2[strlen(string2) - 1] = '\0'; // Read the second input string from user
++
++        // Concatenate the string2 to the string1
++        strcat(string1, string2);
++        // Display the result after concatenation
++        printf("Concatenated string is '%s'\n", string1);
++
++    } while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
++
++    printf("**** End of Concatenating Strings Demo ****\n");
++
++
++/* Version 2 */
++    printf("**** Start of Comparing Strings Demo ****\n");
++    char compare1[BUFFER_SIZE];
++    char compare2[BUFFER_SIZE];
++    int result;
++    do {
++        printf("Type the 1st string to compare (q - to quit):\n");
++        fgets(compare1, BUFFER_SIZE, stdin);
++        compare1[strlen(compare1) - 1] = '\0';
++        if (strcmp(compare1, "q") == 0) {
++            break;
++        }
++        printf("Type the 2nd string to compare:\n");
++        fgets(compare2, BUFFER_SIZE, stdin);
++        compare2[strlen(compare2) - 1] = '\0';
++        result = strcmp(compare1, compare2);
++        if (result < 0) {
++            printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
++        }
++        else if (result == 0) {
++            printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
++        }
++        else {
++            printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
++        }
++    } while (strcmp(compare1, "q") != 0);
++    printf("**** End of Comparing Strings Demo ****\n");
++    
++
++/* Version 3 
++    printf("**** Start of Searching Strings Demo ****\n");
++    char haystack[BUFFER_SIZE];
++    char needle[BUFFER_SIZE];
++    char* occurrence = NULL;
++    do {
++        printf("Type the string (q - to quit):\n");
++        fgets(haystack, BUFFER_SIZE, stdin);
++        haystack[strlen(haystack) - 1] = '\0';
++        if (strcmp(haystack, "q") == 0) {
++            break;
++        }
++        printf("Type the substring:\n");
++        fgets(needle, BUFFER_SIZE, stdin);
++        needle[strlen(needle) - 1] = '\0';
++        occurrence = strstr(haystack, needle);
++        if (occurrence) {
++            printf("\"%s\" found at %d position\n", needle, (int)(occurrence - haystack));
++        }
++        else {
++            printf("Not found\n");
++        }
++    } while (strcmp(haystack, "q") != 0);
++    printf("**** End of Searching Strings Demo ****\n");
++    */
++}
+\ No newline at end of file
+diff --git a/manipulating.h b/manipulating.h
+new file mode 100644
+index 0000000..fdbd4a4
+--- /dev/null
++++ b/manipulating.h
+@@ -0,0 +1,15 @@
++#pragma once
++// MANIPULATING MODULE HEADER
++#ifndef _MANIPULATING_H_
++#define _MANIPULATING_H_
++
++#include <stdio.h>
++#include <string.h>
++
++#define BUFFER_SIZE 32 // Define a constant for maximum string length
++
++// manipulating prototype: Allow users to manipulate string input
++//Including: string concatenate
++void manipulating(void);
++
++#endif
+\ No newline at end of file
+
+commit 4382fcc46f84af21341f49a0a3d637836ef55795
+Author: xiaohanfu123 <110127564+xiaohanfu123@users.noreply.github.com>
+Date:   Wed Nov 15 22:09:25 2023 -0500
+
+    Initial commit
+
+diff --git a/LICENSE b/LICENSE
+new file mode 100644
+index 0000000..3db340b
+--- /dev/null
++++ b/LICENSE
+@@ -0,0 +1,21 @@
++MIT License
++
++Copyright (c) 2023 xiaohanfu123
++
++Permission is hereby granted, free of charge, to any person obtaining a copy
++of this software and associated documentation files (the "Software"), to deal
++in the Software without restriction, including without limitation the rights
++to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
++copies of the Software, and to permit persons to whom the Software is
++furnished to do so, subject to the following conditions:
++
++The above copyright notice and this permission notice shall be included in all
++copies or substantial portions of the Software.
++
++THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
++IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
++FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
++AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
++LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
++OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
++SOFTWARE.
+diff --git a/README.md b/README.md
+new file mode 100644
+index 0000000..8a2ba66
+--- /dev/null
++++ b/README.md
+@@ -0,0 +1 @@
++# CPR101-Final-Project
+\ No newline at end of file

commit 5a3524818e6647e5c64fe3c56c8ec6d64b168871
Merge: 9b58569 e351a0c
Author: Jarviniazhao <151060098+Jarviniazhao@users.noreply.github.com>
Date:   Wed Dec 6 19:30:36 2023 -0500

    Recover manipulating files to main
    
    Manipulating

commit e351a0c8bc6dad7d94bbda1f7f6f7665c5e8b3bd
Merge: ebf7c56 9b58569
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Wed Dec 6 19:29:42 2023 -0500

    Recover manipulating files

commit ebf7c561176789f01a7452fd6bd8d01f8358984d
Merge: ed3b2fb 271481c
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Wed Dec 6 19:21:51 2023 -0500

    Merge branch 'manipulating' of https://github.com/xiaohanfu123/CPR101-Final-Project into manipulating

commit ed3b2fbd0b4f5b35bc82eaf8d84bbde4f85fe2c8
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Wed Dec 6 19:21:27 2023 -0500

    Minor modifications for recovering

diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
index e55d243..eaa935b 100644
Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
diff --git a/manipulating-testing.txt b/manipulating-testing.txt
index 80e1c9d..1fdf1c4 100644
--- a/manipulating-testing.txt
+++ b/manipulating-testing.txt
@@ -1,4 +1,4 @@
-Manipulating Testing Records
+Manipulating Testing Record
 
 -------------- Version 1: String Concatenate -------------------------------
 >> Test 1: (Normal case)
diff --git a/manipulating.c b/manipulating.c
index 095ec35..74b3758 100644
--- a/manipulating.c
+++ b/manipulating.c
@@ -8,7 +8,7 @@ Course: CPR101.NNN
 Final Project
 */
 
-/* The costomized library "manipulating.h" header file provides :
+/* The costom library "manipulating.h" header file provides :
     - 2 standard libraies: stdio.h and string.h
     - Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
     - Prototype for function manipulating
diff --git a/manipulating.h b/manipulating.h
index e3dcc7a..7157dfa 100644
--- a/manipulating.h
+++ b/manipulating.h
@@ -10,7 +10,7 @@
 // Define a constant for maximum length of input string 
 #define BUFFER_SIZE 32
 
-// manipulating prototype: Allow users to manipulate string input
+// manipulating prototype: Allow users to manipulate the string input
 //Including: string concatenate
 void manipulating(void);
 

commit 9b58569d522706c7202c499efdcfff1fd4839754
Merge: e7b6f3b 271481c
Author: Jarviniazhao <151060098+Jarviniazhao@users.noreply.github.com>
Date:   Wed Dec 6 19:16:38 2023 -0500

    Merge pull request #7 from xiaohanfu123/manipulating
    
    Recover manipulating to main 2

commit 271481c9928cbcd0140607f0df3c19cb62c5ce58
Author: Jarviniazhao <151060098+Jarviniazhao@users.noreply.github.com>
Date:   Wed Dec 6 19:15:13 2023 -0500

    Update README.md for testing

diff --git a/README.md b/README.md
index e8b903a..6b4263e 100644
--- a/README.md
+++ b/README.md
@@ -2,3 +2,5 @@
 
 - Manipulating <br />
     This function provides the functionality to manipulate Cstings including 3 versions: string concatenation, comparison, and searching
+- Converting <br />
+  

commit e7b6f3bfa5eb71fb045c90bc24c3107aa2d18ec9
Merge: 2e95683 6d0f8fa
Author: Jarviniazhao <151060098+Jarviniazhao@users.noreply.github.com>
Date:   Wed Dec 6 19:07:58 2023 -0500

    Merge pull request #6 from xiaohanfu123/testing
    
    Testing

commit 6d0f8fab7dcb25f132086ea3c3a56f26fefaf840
Author: Jarviniazhao <151060098+Jarviniazhao@users.noreply.github.com>
Date:   Wed Dec 6 19:07:36 2023 -0500

    testing

diff --git a/README.md b/README.md
index e8b903a..33df24c 100644
--- a/README.md
+++ b/README.md
@@ -1,4 +1,4 @@
-# CPR101-Final-Project
-
+# CPR101 Final Project
+- Fundamental <br />
 - Manipulating <br />
     This function provides the functionality to manipulate Cstings including 3 versions: string concatenation, comparison, and searching

commit b853a5555af26d28526e321f9f4530a16c660eef
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Wed Dec 6 19:06:06 2023 -0500

    Testing only

diff --git a/manipulating-git-log.txt b/manipulating-git-log.txt
deleted file mode 100644
index 8b091e6..0000000
--- a/manipulating-git-log.txt
+++ /dev/null
@@ -1,2750 +0,0 @@
-commit 44cf4ae524920927671da5f49b525f7fe894fe15
-Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-Date:   Wed Dec 6 14:02:16 2023 -0500
-
-    General: Delete the example sheet and renamed the test-case sheet
-
-diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
-index 2fa13a7..e55d243 100644
-Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
-
-commit ade68ed792cdc989504fc2205528e57ebffb905b
-Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-Date:   Wed Dec 6 13:47:52 2023 -0500
-
-    Version3: Add git log of version3
-
-diff --git a/manipulating-git-log.txt b/manipulating-git-log.txt
-index 7af623f..d31f09c 100644
---- a/manipulating-git-log.txt
-+++ b/manipulating-git-log.txt
-@@ -1,3 +1,1044 @@
-+commit cecfd8b0942d30a1248e56d1d1968e2866004398
-+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-+Date:   Wed Dec 6 13:45:46 2023 -0500
-+
-+    Version3: Minor format modifications
-+
-+diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
-+index 5449f31..2fa13a7 100644
-+Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
-+diff --git a/manipulating-testing.txt b/manipulating-testing.txt
-+index f73a2bc..80e1c9d 100644
-+--- a/manipulating-testing.txt
-++++ b/manipulating-testing.txt
-+@@ -1,4 +1,4 @@
-+-Manipulating Testing 
-++Manipulating Testing Records
-+ 
-+ -------------- Version 1: String Concatenate -------------------------------
-+ >> Test 1: (Normal case)
-+
-+commit 5ca8d5a33a8d2db071a1748e1c439a083789c4c7
-+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-+Date:   Sat Dec 2 21:30:36 2023 -0500
-+
-+    Version 2: Add one more testing case - one empty string
-+
-+diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
-+index 4990758..5449f31 100644
-+Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
-+diff --git a/manipulating-testing.txt b/manipulating-testing.txt
-+index 57c3364..f73a2bc 100644
-+--- a/manipulating-testing.txt
-++++ b/manipulating-testing.txt
-+@@ -64,27 +64,34 @@ Type the 2nd string to compare:
-+ Hello
-+ "Hello World" string is greater than "Hello"
-+ 
-+->> Test 4: (Empty string)
-++>> Test 4: (Compare one empty string)
-++Type the 1st string to compare (q - to quit):
-++
-++Type the 2nd string to compare:
-++test
-++"" string is less than "test"
-++
-++>> Test 5: (Both string are empty )
-+ Type the 1st string to compare (q - to quit):
-+ 
-+ Type the 2nd string to compare:
-+ 
-+ "" string is equal to ""
-+ 
-+->> Test 5: (Special characters)
-++>> Test 6: (Special characters)
-+ Type the 1st string to compare (q - to quit):
-+ @123
-+ Type the 2nd string to compare:
-+ $456
-+ "@123" string is greater than "$456"
-+ 
-+->> Test 6: (Over-the-edge: compare1 over the limit)
-++>> Test 7: (Over-the-edge: compare1 over the limit)
-+ Type the 1st string to compare (q - to quit):
-+ Hello this is John Smith, Nice to meet you!
-+ Type the 2nd string to compare:
-+ "Hello this is John Smith, Nice" string is less than "to meet you!"
-+ 
-+->> Test 7: (Over-the-edge: compare2 over the limit)
-++>> Test 8: (Over-the-edge: compare2 over the limit)
-+ Type the 1st string to compare (q - to quit):
-+ Hello this is John Smith, Nice
-+ Type the 2nd string to compare:
-+
-+commit 4b8535e987cecb5e0dc6519e9aa7a5d8b2e87950
-+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-+Date:   Sat Dec 2 21:23:39 2023 -0500
-+
-+    Version 3: Upload testing case records, and modify the format of testing.txt
-+
-+diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
-+index 8058037..4990758 100644
-+Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
-+diff --git a/manipulating-testing.txt b/manipulating-testing.txt
-+index 1d00335..57c3364 100644
-+--- a/manipulating-testing.txt
-++++ b/manipulating-testing.txt
-+@@ -1,94 +1,175 @@
-+ Manipulating Testing 
-+ 
-+-------Version 1-------
-+-Test 1: (Normal case)
-++-------------- Version 1: String Concatenate -------------------------------
-++>> Test 1: (Normal case)
-+ Type the 1st string (q - to quit):
-+ John
-+ Type the 2nd string:
-+  Simith
-+ Concatenated string is 'John Simith'
-+ 
-+-Test 2: (Empty string)
-++>> Test 2: (Empty string)
-+ Type the 1st string (q - to quit):
-+ 
-+ Type the 2nd string:
-+ 
-+ Concatenated string is ''
-+ 
-+-Test 3: (Edge case)
-++>> Test 3: (Edge case)
-+ Type the 1st string (q - to quit):
-+ Hi John Smith
-+ Type the 2nd string:
-+  Nice to meet you!
-+ Concatenated string is 'Hi John Smith Nice to meet you!'
-+ 
-+-Test 4: (Over-the-edge: string1 over the limit)
-++>> Test 4: (Over-the-edge: string1 over the limit)
-+ Type the 1st string (q - to quit):
-+ Hello this is John Smith, Nice to meet you!
-+ Type the 2nd string:
-+ Concatenated string is 'Hello this is John Smith, Niceto meet you!'
-+ 
-+-Test 5: (Over-the-edge: string2 over the limit)
-++>> Test 5: (Over-the-edge: string2 over the limit)
-+ Type the 1st string (q - to quit):
-+ 12345
-+ Type the 2nd string:
-+ Hi John Smith Nice to meet you!
-+ Concatenated string is '12345Hi John Smith Nice to meet you'
-+ 
-+-Test 6: (Over-the-edge: after concatenation string1 over the limit)
-++>> Test 6: (Over-the-edge: after concatenation string1 over the limit)
-+ Type the 1st string (q - to quit):
-+ Hello this is John Smith,
-+ Type the 2nd string:
-+  Nice to meet you!
-+ Concatenated string is 'Hello this is John Smith, Nice to meet you!'
-+ 
-+-------Version 2-------
-+-Test 1: (Identical)
-++--------------- Version 2: String Comparision -------------------------------
-++>> Test 1: (Identical)
-+ Type the 1st string to compare (q - to quit):
-+ test
-+ Type the 2nd string to compare:
-+ test
-+ "test" string is equal to "test"
-+ 
-+-Test 2: (Case sensitive)
-++>> Test 2: (Case sensitive)
-+ Type the 1st string to compare (q - to quit):
-+ Test
-+ Type the 2nd string to compare:
-+ test
-+ "Test" string is less than "test"
-+ 
-+-Test 3: (Different length)
-++>> Test 3: (Different length)
-+ Type the 1st string to compare (q - to quit):
-+ Hello World
-+ Type the 2nd string to compare:
-+ Hello
-+ "Hello World" string is greater than "Hello"
-+ 
-+-Test 4: (Empty string)
-++>> Test 4: (Empty string)
-+ Type the 1st string to compare (q - to quit):
-+ 
-+ Type the 2nd string to compare:
-+ 
-+ "" string is equal to ""
-+ 
-+-Test 5: (Special characters)
-++>> Test 5: (Special characters)
-+ Type the 1st string to compare (q - to quit):
-+ @123
-+ Type the 2nd string to compare:
-+ $456
-+ "@123" string is greater than "$456"
-+ 
-+-Test 6: (Over-the-edge: compare1 over the limit)
-++>> Test 6: (Over-the-edge: compare1 over the limit)
-+ Type the 1st string to compare (q - to quit):
-+ Hello this is John Smith, Nice to meet you!
-+ Type the 2nd string to compare:
-+ "Hello this is John Smith, Nice" string is less than "to meet you!"
-+ 
-+-Test 7: (Over-the-edge: compare2 over the limit)
-++>> Test 7: (Over-the-edge: compare2 over the limit)
-+ Type the 1st string to compare (q - to quit):
-+ Hello this is John Smith, Nice
-+ Type the 2nd string to compare:
-+ Hello this is John Smith, Nice to meet you!
-+ "Hello this is John Smith, Nice" string is equal to "Hello this is John Smith, Nice"
-+ Type the 1st string to compare (q - to quit):
-+-Type the 2nd string to compare:
-+\ No newline at end of file
-++Type the 2nd string to compare:
-++
-++--------------- Version 3: String Search -------------------------------
-++>> Test 1: (Normal case)
-++Type the string (q - to quit):
-++Hello World!
-++Type the substring:
-++World
-++"World" found at 6 position
-++
-++>> Test 2: (needle at beginning)
-++Type the string (q - to quit):
-++Test starts now right?
-++Type the substring:
-++Test
-++"Test" found at 0 position
-++
-++>> Test 3: (needle at end)
-++Type the string (q - to quit):
-++This is a test
-++Type the substring:
-++test
-++"test" found at 10 position
-++
-++>> Test 4: (needle is single character)
-++Type the string (q - to quit):
-++Hello World!
-++Type the substring:
-++o
-++"o" found at 4 position
-++
-++>> Test 5: (needle not found)
-++Type the string (q - to quit):
-++Hello World!
-++Type the substring:
-++Happy
-++Not found
-++
-++>> Test 6: (haystack is empty)
-++Type the string (q - to quit):
-++
-++Type the substring:
-++test
-++Not found
-++
-++>> Test 7: (needle is empty)
-++Type the string (q - to quit):
-++test
-++Type the substring:
-++
-++"" found at 0 position
-++
-++>> Test 8: (Both string is empty)
-++Type the string (q - to quit):
-++
-++Type the substring:
-++
-++"" found at 0 position
-++
-++>> Test 9: (Over-the-edge: haystack over the limit)
-++Type the string (q - to quit):
-++one two three four five six seven eight nine ten
-++Type the substring:
-++Not found
-++
-++>> Test 10: (Over-the-edge: haystack over the limit with repeated pattern)
-++Type the string (q - to quit):
-++two three four two three four two three four two three four
-++Type the substring:
-++"wo three four two three four" found at 1 position
-++
-++>>Test 11: (Over-the-edge: needle over the limit)
-++Type the string (q - to quit):
-++four
-++Type the substring:
-++one two three four five six seven eight nine ten
-++Not found
-++Type the string (q - to quit):
-++Type the substring:
-++
-++
-++
-+
-+commit b70dcc9b0533d13e72fe7be9759f3bdeebd7747d
-+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-+Date:   Sat Dec 2 21:21:59 2023 -0500
-+
-+    Version 3: Finish code comments
-+
-+diff --git a/manipulating.c b/manipulating.c
-+index c1f52ee..095ec35 100644
-+--- a/manipulating.c
-++++ b/manipulating.c
-+@@ -58,7 +58,7 @@ void manipulating(void) {
-+     //printf("**** End of Concatenating Strings Demo ****\n");
-+ 
-+ 
-+-/* Version 2 */
-++/* Version 2 
-+     //------------- Demo of String Comparing ---------------
-+ 
-+     // Display the staring message for user to understand the purpose of this demo
-+@@ -105,31 +105,49 @@ void manipulating(void) {
-+         }
-+     } while (strcmp(compare1, "q") != 0); // Continue looping until the user enter 'q' for the compare1
-+     printf("**** End of Comparing Strings Demo ****\n");
-++    */
-+     
-+ 
-+ /* Version 3 */
-++    //------------- Demo of String Search ---------------
-++
-++    // Display the staring message for user to understand the purpose of this demo
-+     printf("**** Start of Searching Strings Demo ****\n");
-+-    char haystack[BUFFER_SIZE];
-+-    char needle[BUFFER_SIZE];
-+-    char* occurrence = NULL;
-++    char haystack[BUFFER_SIZE]; // string to store user input as a searching library
-++    char needle[BUFFER_SIZE];  // string to store user input as a searching keyword
-++    char* occurrence = NULL; // variable to store search result, NULL = not found
-++    
-++    // Keep prompt for 2 string input until the user enter q to quit
-+     do {
-++        // Prompt the user for the library string
-+         printf("Type the string (q - to quit):\n");
-+-        fgets(haystack, BUFFER_SIZE, stdin);
-++        fgets(haystack, BUFFER_SIZE, stdin); // Read the first input Cstring from user and stores in haystack
-++        // Remove the newline character at the end of the input string
-+         haystack[strlen(haystack) - 1] = '\0';
-++        
-++        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
-+         if (strcmp(haystack, "q") == 0) {
-+             break;
-+         }
-++        
-++        // Prompt the user for the keyword string/substring
-+         printf("Type the substring:\n");
-+-        fgets(needle, BUFFER_SIZE, stdin);
-++        fgets(needle, BUFFER_SIZE, stdin); // Read the second input Cstring from user and stores in needle
-++        // Remove the newline character at the end of the input string
-+         needle[strlen(needle) - 1] = '\0';
-++
-++        //Search the occurrence of needle in haystack and store the result in variable occurance
-+         occurrence = strstr(haystack, needle);
-++
-++        // Check the value of occurence and display corresponding message to user
-++        // Found the needle in haystack and give the exact position of needle in haystack
-+         if (occurrence) {
-+             printf("\"%s\" found at %d position\n", needle, (int)(occurrence - haystack));
-+         }
-+         else {
-+             printf("Not found\n");
-+         }
-+-    } while (strcmp(haystack, "q") != 0);
-++    } while (strcmp(haystack, "q") != 0);// Continue looping until the user enter 'q' for the haystack
-+     printf("**** End of Searching Strings Demo ****\n");
-+     
-+ }
-+\ No newline at end of file
-+
-+commit be760f11843fc5c19823ee5807bad95400b2702f
-+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-+Date:   Sat Dec 2 19:29:27 2023 -0500
-+
-+    Version 3: Code without any comments
-+
-+diff --git a/manipulating.c b/manipulating.c
-+index 0e763bf..c1f52ee 100644
-+--- a/manipulating.c
-++++ b/manipulating.c
-+@@ -107,7 +107,7 @@ void manipulating(void) {
-+     printf("**** End of Comparing Strings Demo ****\n");
-+     
-+ 
-+-/* Version 3 
-++/* Version 3 */
-+     printf("**** Start of Searching Strings Demo ****\n");
-+     char haystack[BUFFER_SIZE];
-+     char needle[BUFFER_SIZE];
-+@@ -131,5 +131,5 @@ void manipulating(void) {
-+         }
-+     } while (strcmp(haystack, "q") != 0);
-+     printf("**** End of Searching Strings Demo ****\n");
-+-    */
-++    
-+ }
-+\ No newline at end of file
-+
-+commit 60a339ffd2fcde2efa9b67ff5a315351107677a3
-+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-+Date:   Sat Dec 2 19:11:51 2023 -0500
-+
-+    Version 2: upload git log
-+
-+diff --git a/manipulating-git-log.txt b/manipulating-git-log.txt
-+new file mode 100644
-+index 0000000..7af623f
-+--- /dev/null
-++++ b/manipulating-git-log.txt
-+@@ -0,0 +1,643 @@
-++commit 65fd6432ce4b971660a56f7f960f06a714405a9b
-++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-++Date:   Sat Dec 2 19:02:49 2023 -0500
-++
-++    Version 1&2: Correct typos and revise the wording
-++
-++diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
-++index 741f37a..8058037 100644
-++Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
-++
-++commit 4b5197c169be2a959933edfdd976b123ed44f42e
-++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-++Date:   Sat Dec 2 19:01:42 2023 -0500
-++
-++    Header file: Add and revise some comment for easy understanding
-++
-++diff --git a/manipulating.h b/manipulating.h
-++index fdbd4a4..e3dcc7a 100644
-++--- a/manipulating.h
-+++++ b/manipulating.h
-++@@ -3,10 +3,12 @@
-++ #ifndef _MANIPULATING_H_
-++ #define _MANIPULATING_H_
-++ 
-+++//All system library needed
-++ #include <stdio.h>
-++ #include <string.h>
-++ 
-++-#define BUFFER_SIZE 32 // Define a constant for maximum string length
-+++// Define a constant for maximum length of input string 
-+++#define BUFFER_SIZE 32
-++ 
-++ // manipulating prototype: Allow users to manipulate string input
-++ //Including: string concatenate
-++
-++commit bccbd7b3a5fbf9465d1852b3dd642777bf3f29ce
-++Merge: 5724194 723cf02
-++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-++Date:   Sat Dec 2 18:58:38 2023 -0500
-++
-++    Merge branch 'manipulating' of https://github.com/xiaohanfu123/CPR101-Final-Project into manipulating
-++
-++commit 5724194a681ef0c8997824b91fc692f6dc29686f
-++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-++Date:   Sat Dec 2 18:57:50 2023 -0500
-++
-++    Version 1&2: Revise some comments to make them easy to understand the codes
-++
-++diff --git a/manipulating.c b/manipulating.c
-++index 31ce090..0e763bf 100644
-++--- a/manipulating.c
-+++++ b/manipulating.c
-++@@ -9,9 +9,9 @@ Final Project
-++ */
-++ 
-++ /* The costomized library "manipulating.h" header file provides :
-++-    2 standard libraies: stdio.h and string.h
-++-    Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
-++-    Prototype for function manipulating
-+++    - 2 standard libraies: stdio.h and string.h
-+++    - Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
-+++    - Prototype for function manipulating
-++ */
-++ #include "manipulating.h"   
-++ 
-++@@ -26,10 +26,10 @@ void manipulating(void) {
-++     // Display the staring message for user to understand the purpose of this demo
-++     //printf("**** Start of Concatenating Strings Demo ****\n");
-++     //// Declare 2 Cstring to store the string for concatenation 
-++-    //char string1[BUFFER_SIZE]; // first string 
-++-    //char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
-+++    //char string1[BUFFER_SIZE]; // first string to store user first input
-+++    //char string2[BUFFER_SIZE]; // second string to store user second input - concatenate to the end of first string
-++     //
-++-    //// Start a loop at least once and will continue until the user enter q to quit
-+++    //// Keep prompt for 2 string input until the user enter q to quit
-++     //do {
-++     //    // Prompt the user for the first string
-++     //    printf("Type the 1st string (q - to quit):\n");
-++@@ -65,11 +65,11 @@ void manipulating(void) {
-++     printf("**** Start of Comparing Strings Demo ****\n");
-++ 
-++     // Declare 2 Cstring to store the string for comparison
-++-    char compare1[BUFFER_SIZE]; // first string
-++-    char compare2[BUFFER_SIZE]; // second string
-+++    char compare1[BUFFER_SIZE]; // first string to store user first input
-+++    char compare2[BUFFER_SIZE]; // second string to store user second input
-++     int result; // Store the comparison result
-++ 
-++-    // Start a loop at least once and will continue until the user enter q to quit
-+++    // Keep prompt for 2 string input until the user enter q to quit
-++     do {
-++         // Prompt the user for the first string
-++         printf("Type the 1st string to compare (q - to quit):\n");
-++@@ -91,15 +91,15 @@ void manipulating(void) {
-++         result = strcmp(compare1, compare2);
-++ 
-++         // Check the value of reuslt and display corresponding message to user
-++-        // compare1 < compare2
-+++        // compare1 < compare2 and output proper message to user
-++         if (result < 0) {
-++             printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
-++         }
-++-        // compare1 = compare2
-+++        // compare1 = compare2 and output proper message to user
-++         else if (result == 0) {
-++             printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
-++         }
-++-        // compare1 > compare2 
-+++        // compare1 > compare2 and output proper message to user
-++         else {
-++             printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
-++         }
-++
-++commit 723cf0212615fd781700c1580261a1488b866e62
-++Author: Jarviniazhao <151060098+Jarviniazhao@users.noreply.github.com>
-++Date:   Fri Dec 1 09:30:48 2023 -0500
-++
-++    Add general descriptions of manipulating
-++
-++diff --git a/README.md b/README.md
-++index 8a2ba66..e8b903a 100644
-++--- a/README.md
-+++++ b/README.md
-++@@ -1 +1,4 @@
-++-# CPR101-Final-Project
-++\ No newline at end of file
-+++# CPR101-Final-Project
-+++
-+++- Manipulating <br />
-+++    This function provides the functionality to manipulate Cstings including 3 versions: string concatenation, comparison, and searching
-++
-++commit 259290768c7d6f4affc068cf206f83183da7ecb6
-++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-++Date:   Fri Dec 1 08:33:26 2023 -0500
-++
-++    Version 2: Comment out version1 code for testing version2 only
-++
-++diff --git a/manipulating.c b/manipulating.c
-++index e57d2ae..31ce090 100644
-++--- a/manipulating.c
-+++++ b/manipulating.c
-++@@ -19,42 +19,43 @@ Final Project
-++ Function Purpose: This function provides the functionality to manipulate Cstings
-++ */
-++ void manipulating(void) {
-+++
-++ /* Version 1 */
-++     //------------- Demo of String Concatenate ---------------
-++     
-++     // Display the staring message for user to understand the purpose of this demo
-++-    printf("**** Start of Concatenating Strings Demo ****\n");
-++-    // Declare 2 Cstring to store the string for concatenation 
-++-    char string1[BUFFER_SIZE]; // first string 
-++-    char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
-++-    
-++-    // Start a loop at least once and will continue until the user enter q to quit
-++-    do {
-++-        // Prompt the user for the first string
-++-        printf("Type the 1st string (q - to quit):\n");
-++-        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
-++-        // Remove the newline character at the end of the input string
-++-        string1[strlen(string1) - 1] = '\0';
-++-
-++-        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
-++-        if (strcmp(string1, "q") == 0) {
-++-            break;
-++-        }
-++-
-++-        // Prompt the user for the second string
-++-        printf("Type the 2nd string:\n");
-++-        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
-++-        // Remove the newline character at the end of the input string
-++-        string2[strlen(string2) - 1] = '\0'; 
-++-
-++-        // Concatenate the string2 to the string1
-++-        strcat(string1, string2);
-++-        // Display the result after concatenation
-++-        printf("Concatenated string is '%s'\n", string1);
-++-
-++-    } while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
-++-
-++-    printf("**** End of Concatenating Strings Demo ****\n");
-+++    //printf("**** Start of Concatenating Strings Demo ****\n");
-+++    //// Declare 2 Cstring to store the string for concatenation 
-+++    //char string1[BUFFER_SIZE]; // first string 
-+++    //char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
-+++    //
-+++    //// Start a loop at least once and will continue until the user enter q to quit
-+++    //do {
-+++    //    // Prompt the user for the first string
-+++    //    printf("Type the 1st string (q - to quit):\n");
-+++    //    fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
-+++    //    // Remove the newline character at the end of the input string
-+++    //    string1[strlen(string1) - 1] = '\0';
-+++
-+++    //    // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
-+++    //    if (strcmp(string1, "q") == 0) {
-+++    //        break;
-+++    //    }
-+++
-+++    //    // Prompt the user for the second string
-+++    //    printf("Type the 2nd string:\n");
-+++    //    fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
-+++    //    // Remove the newline character at the end of the input string
-+++    //    string2[strlen(string2) - 1] = '\0'; 
-+++
-+++    //    // Concatenate the string2 to the string1
-+++    //    strcat(string1, string2);
-+++    //    // Display the result after concatenation
-+++    //    printf("Concatenated string is '%s'\n", string1);
-+++
-+++    //} while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
-+++
-+++    //printf("**** End of Concatenating Strings Demo ****\n");
-++ 
-++ 
-++ /* Version 2 */
-++
-++commit 99c9ceef9a88f431213291029a49e438562858bd
-++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-++Date:   Thu Nov 30 23:45:15 2023 -0500
-++
-++    Version 2: Finish testing with 7 cases with actual output and case report
-++
-++diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
-++index 2a6351e..741f37a 100644
-++Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
-++diff --git a/manipulating-testing.txt b/manipulating-testing.txt
-++index 3cf3d34..1d00335 100644
-++--- a/manipulating-testing.txt
-+++++ b/manipulating-testing.txt
-++@@ -42,3 +42,53 @@ Type the 2nd string:
-++  Nice to meet you!
-++ Concatenated string is 'Hello this is John Smith, Nice to meet you!'
-++ 
-+++------Version 2-------
-+++Test 1: (Identical)
-+++Type the 1st string to compare (q - to quit):
-+++test
-+++Type the 2nd string to compare:
-+++test
-+++"test" string is equal to "test"
-+++
-+++Test 2: (Case sensitive)
-+++Type the 1st string to compare (q - to quit):
-+++Test
-+++Type the 2nd string to compare:
-+++test
-+++"Test" string is less than "test"
-+++
-+++Test 3: (Different length)
-+++Type the 1st string to compare (q - to quit):
-+++Hello World
-+++Type the 2nd string to compare:
-+++Hello
-+++"Hello World" string is greater than "Hello"
-+++
-+++Test 4: (Empty string)
-+++Type the 1st string to compare (q - to quit):
-+++
-+++Type the 2nd string to compare:
-+++
-+++"" string is equal to ""
-+++
-+++Test 5: (Special characters)
-+++Type the 1st string to compare (q - to quit):
-+++@123
-+++Type the 2nd string to compare:
-+++$456
-+++"@123" string is greater than "$456"
-+++
-+++Test 6: (Over-the-edge: compare1 over the limit)
-+++Type the 1st string to compare (q - to quit):
-+++Hello this is John Smith, Nice to meet you!
-+++Type the 2nd string to compare:
-+++"Hello this is John Smith, Nice" string is less than "to meet you!"
-+++
-+++Test 7: (Over-the-edge: compare2 over the limit)
-+++Type the 1st string to compare (q - to quit):
-+++Hello this is John Smith, Nice
-+++Type the 2nd string to compare:
-+++Hello this is John Smith, Nice to meet you!
-+++"Hello this is John Smith, Nice" string is equal to "Hello this is John Smith, Nice"
-+++Type the 1st string to compare (q - to quit):
-+++Type the 2nd string to compare:
-++\ No newline at end of file
-++
-++commit e1419a3e16637354960b9e5ad4878737841c65c4
-++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-++Date:   Tue Nov 28 21:02:47 2023 -0500
-++
-++    Version 2: Finish comments 1.0
-++
-++diff --git a/manipulating.c b/manipulating.c
-++index caa2d08..e57d2ae 100644
-++--- a/manipulating.c
-+++++ b/manipulating.c
-++@@ -32,7 +32,7 @@ void manipulating(void) {
-++     do {
-++         // Prompt the user for the first string
-++         printf("Type the 1st string (q - to quit):\n");
-++-        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user
-+++        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
-++         // Remove the newline character at the end of the input string
-++         string1[strlen(string1) - 1] = '\0';
-++ 
-++@@ -43,7 +43,7 @@ void manipulating(void) {
-++ 
-++         // Prompt the user for the second string
-++         printf("Type the 2nd string:\n");
-++-        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user
-+++        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
-++         // Remove the newline character at the end of the input string
-++         string2[strlen(string2) - 1] = '\0'; 
-++ 
-++@@ -58,31 +58,51 @@ void manipulating(void) {
-++ 
-++ 
-++ /* Version 2 */
-+++    //------------- Demo of String Comparing ---------------
-+++
-+++    // Display the staring message for user to understand the purpose of this demo
-++     printf("**** Start of Comparing Strings Demo ****\n");
-++-    char compare1[BUFFER_SIZE];
-++-    char compare2[BUFFER_SIZE];
-++-    int result;
-+++
-+++    // Declare 2 Cstring to store the string for comparison
-+++    char compare1[BUFFER_SIZE]; // first string
-+++    char compare2[BUFFER_SIZE]; // second string
-+++    int result; // Store the comparison result
-+++
-+++    // Start a loop at least once and will continue until the user enter q to quit
-++     do {
-+++        // Prompt the user for the first string
-++         printf("Type the 1st string to compare (q - to quit):\n");
-++-        fgets(compare1, BUFFER_SIZE, stdin);
-+++        fgets(compare1, BUFFER_SIZE, stdin); // Read the first input Cstring from user and stores in compare1
-+++        // Remove the newline character at the end of the input string
-++         compare1[strlen(compare1) - 1] = '\0';
-+++
-+++        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
-++         if (strcmp(compare1, "q") == 0) {
-++             break;
-++         }
-+++        // Prompt the user for the second string
-++         printf("Type the 2nd string to compare:\n");
-++-        fgets(compare2, BUFFER_SIZE, stdin);
-+++        fgets(compare2, BUFFER_SIZE, stdin); // Read the second input Cstring from user and stores in compare2
-+++        // Remove the newline character at the end of the input string
-++         compare2[strlen(compare2) - 1] = '\0';
-+++
-+++        // Compare compare1 with compare2 and store the result to variable reuslt
-++         result = strcmp(compare1, compare2);
-+++
-+++        // Check the value of reuslt and display corresponding message to user
-+++        // compare1 < compare2
-++         if (result < 0) {
-++             printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
-++         }
-+++        // compare1 = compare2
-++         else if (result == 0) {
-++             printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
-++         }
-+++        // compare1 > compare2 
-++         else {
-++             printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
-++         }
-++-    } while (strcmp(compare1, "q") != 0);
-+++    } while (strcmp(compare1, "q") != 0); // Continue looping until the user enter 'q' for the compare1
-++     printf("**** End of Comparing Strings Demo ****\n");
-++     
-++ 
-++
-++commit 63486a4aa9da65f01fe5b158a7a62d3683e27e23
-++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-++Date:   Tue Nov 28 20:48:36 2023 -0500
-++
-++    Correct a comment for Version 1, which was put for wrong code
-++
-++diff --git a/manipulating.c b/manipulating.c
-++index 58a46ce..caa2d08 100644
-++--- a/manipulating.c
-+++++ b/manipulating.c
-++@@ -43,9 +43,9 @@ void manipulating(void) {
-++ 
-++         // Prompt the user for the second string
-++         printf("Type the 2nd string:\n");
-++-        fgets(string2, BUFFER_SIZE, stdin);
-+++        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user
-++         // Remove the newline character at the end of the input string
-++-        string2[strlen(string2) - 1] = '\0'; // Read the second input string from user
-+++        string2[strlen(string2) - 1] = '\0'; 
-++ 
-++         // Concatenate the string2 to the string1
-++         strcat(string1, string2);
-++
-++commit 13220bd1bfb31415bbed9664fd1e9fb3796c0525
-++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-++Date:   Tue Nov 28 20:27:55 2023 -0500
-++
-++    Adding completed work of version 1 for manipulating
-++
-++diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
-++new file mode 100644
-++index 0000000..2a6351e
-++Binary files /dev/null and b/manipulating-test-cases.xlsx differ
-++diff --git a/manipulating-testing.txt b/manipulating-testing.txt
-++new file mode 100644
-++index 0000000..3cf3d34
-++--- /dev/null
-+++++ b/manipulating-testing.txt
-++@@ -0,0 +1,44 @@
-+++Manipulating Testing 
-+++
-+++------Version 1-------
-+++Test 1: (Normal case)
-+++Type the 1st string (q - to quit):
-+++John
-+++Type the 2nd string:
-+++ Simith
-+++Concatenated string is 'John Simith'
-+++
-+++Test 2: (Empty string)
-+++Type the 1st string (q - to quit):
-+++
-+++Type the 2nd string:
-+++
-+++Concatenated string is ''
-+++
-+++Test 3: (Edge case)
-+++Type the 1st string (q - to quit):
-+++Hi John Smith
-+++Type the 2nd string:
-+++ Nice to meet you!
-+++Concatenated string is 'Hi John Smith Nice to meet you!'
-+++
-+++Test 4: (Over-the-edge: string1 over the limit)
-+++Type the 1st string (q - to quit):
-+++Hello this is John Smith, Nice to meet you!
-+++Type the 2nd string:
-+++Concatenated string is 'Hello this is John Smith, Niceto meet you!'
-+++
-+++Test 5: (Over-the-edge: string2 over the limit)
-+++Type the 1st string (q - to quit):
-+++12345
-+++Type the 2nd string:
-+++Hi John Smith Nice to meet you!
-+++Concatenated string is '12345Hi John Smith Nice to meet you'
-+++
-+++Test 6: (Over-the-edge: after concatenation string1 over the limit)
-+++Type the 1st string (q - to quit):
-+++Hello this is John Smith,
-+++Type the 2nd string:
-+++ Nice to meet you!
-+++Concatenated string is 'Hello this is John Smith, Nice to meet you!'
-+++
-++diff --git a/manipulating.c b/manipulating.c
-++new file mode 100644
-++index 0000000..58a46ce
-++--- /dev/null
-+++++ b/manipulating.c
-++@@ -0,0 +1,114 @@
-+++#define _CRT_SECURE_NO_WARNINGS
-+++/*
-+++Author: Jarvinia Zhao
-+++Email: jzhao169@myseneca.ca
-+++ID: 143013233
-+++Date Written: 11-27-2023
-+++Course: CPR101.NNN
-+++Final Project
-+++*/
-+++
-+++/* The costomized library "manipulating.h" header file provides :
-+++    2 standard libraies: stdio.h and string.h
-+++    Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
-+++    Prototype for function manipulating
-+++*/
-+++#include "manipulating.h"   
-+++
-+++/*
-+++Function Purpose: This function provides the functionality to manipulate Cstings
-+++*/
-+++void manipulating(void) {
-+++/* Version 1 */
-+++    //------------- Demo of String Concatenate ---------------
-+++    
-+++    // Display the staring message for user to understand the purpose of this demo
-+++    printf("**** Start of Concatenating Strings Demo ****\n");
-+++    // Declare 2 Cstring to store the string for concatenation 
-+++    char string1[BUFFER_SIZE]; // first string 
-+++    char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
-+++    
-+++    // Start a loop at least once and will continue until the user enter q to quit
-+++    do {
-+++        // Prompt the user for the first string
-+++        printf("Type the 1st string (q - to quit):\n");
-+++        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user
-+++        // Remove the newline character at the end of the input string
-+++        string1[strlen(string1) - 1] = '\0';
-+++
-+++        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
-+++        if (strcmp(string1, "q") == 0) {
-+++            break;
-+++        }
-+++
-+++        // Prompt the user for the second string
-+++        printf("Type the 2nd string:\n");
-+++        fgets(string2, BUFFER_SIZE, stdin);
-+++        // Remove the newline character at the end of the input string
-+++        string2[strlen(string2) - 1] = '\0'; // Read the second input string from user
-+++
-+++        // Concatenate the string2 to the string1
-+++        strcat(string1, string2);
-+++        // Display the result after concatenation
-+++        printf("Concatenated string is '%s'\n", string1);
-+++
-+++    } while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
-+++
-+++    printf("**** End of Concatenating Strings Demo ****\n");
-+++
-+++
-+++/* Version 2 */
-+++    printf("**** Start of Comparing Strings Demo ****\n");
-+++    char compare1[BUFFER_SIZE];
-+++    char compare2[BUFFER_SIZE];
-+++    int result;
-+++    do {
-+++        printf("Type the 1st string to compare (q - to quit):\n");
-+++        fgets(compare1, BUFFER_SIZE, stdin);
-+++        compare1[strlen(compare1) - 1] = '\0';
-+++        if (strcmp(compare1, "q") == 0) {
-+++            break;
-+++        }
-+++        printf("Type the 2nd string to compare:\n");
-+++        fgets(compare2, BUFFER_SIZE, stdin);
-+++        compare2[strlen(compare2) - 1] = '\0';
-+++        result = strcmp(compare1, compare2);
-+++        if (result < 0) {
-+++            printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
-+++        }
-+++        else if (result == 0) {
-+++            printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
-+++        }
-+++        else {
-+++            printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
-+++        }
-+++    } while (strcmp(compare1, "q") != 0);
-+++    printf("**** End of Comparing Strings Demo ****\n");
-+++    
-+++
-+++/* Version 3 
-+++    printf("**** Start of Searching Strings Demo ****\n");
-+++    char haystack[BUFFER_SIZE];
-+++    char needle[BUFFER_SIZE];
-+++    char* occurrence = NULL;
-+++    do {
-+++        printf("Type the string (q - to quit):\n");
-+++        fgets(haystack, BUFFER_SIZE, stdin);
-+++        haystack[strlen(haystack) - 1] = '\0';
-+++        if (strcmp(haystack, "q") == 0) {
-+++            break;
-+++        }
-+++        printf("Type the substring:\n");
-+++        fgets(needle, BUFFER_SIZE, stdin);
-+++        needle[strlen(needle) - 1] = '\0';
-+++        occurrence = strstr(haystack, needle);
-+++        if (occurrence) {
-+++            printf("\"%s\" found at %d position\n", needle, (int)(occurrence - haystack));
-+++        }
-+++        else {
-+++            printf("Not found\n");
-+++        }
-+++    } while (strcmp(haystack, "q") != 0);
-+++    printf("**** End of Searching Strings Demo ****\n");
-+++    */
-+++}
-++\ No newline at end of file
-++diff --git a/manipulating.h b/manipulating.h
-++new file mode 100644
-++index 0000000..fdbd4a4
-++--- /dev/null
-+++++ b/manipulating.h
-++@@ -0,0 +1,15 @@
-+++#pragma once
-+++// MANIPULATING MODULE HEADER
-+++#ifndef _MANIPULATING_H_
-+++#define _MANIPULATING_H_
-+++
-+++#include <stdio.h>
-+++#include <string.h>
-+++
-+++#define BUFFER_SIZE 32 // Define a constant for maximum string length
-+++
-+++// manipulating prototype: Allow users to manipulate string input
-+++//Including: string concatenate
-+++void manipulating(void);
-+++
-+++#endif
-++\ No newline at end of file
-++
-++commit 4382fcc46f84af21341f49a0a3d637836ef55795
-++Author: xiaohanfu123 <110127564+xiaohanfu123@users.noreply.github.com>
-++Date:   Wed Nov 15 22:09:25 2023 -0500
-++
-++    Initial commit
-++
-++diff --git a/LICENSE b/LICENSE
-++new file mode 100644
-++index 0000000..3db340b
-++--- /dev/null
-+++++ b/LICENSE
-++@@ -0,0 +1,21 @@
-+++MIT License
-+++
-+++Copyright (c) 2023 xiaohanfu123
-+++
-+++Permission is hereby granted, free of charge, to any person obtaining a copy
-+++of this software and associated documentation files (the "Software"), to deal
-+++in the Software without restriction, including without limitation the rights
-+++to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-+++copies of the Software, and to permit persons to whom the Software is
-+++furnished to do so, subject to the following conditions:
-+++
-+++The above copyright notice and this permission notice shall be included in all
-+++copies or substantial portions of the Software.
-+++
-+++THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-+++IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-+++FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-+++AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-+++LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-+++OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-+++SOFTWARE.
-++diff --git a/README.md b/README.md
-++new file mode 100644
-++index 0000000..8a2ba66
-++--- /dev/null
-+++++ b/README.md
-++@@ -0,0 +1 @@
-+++# CPR101-Final-Project
-++\ No newline at end of file
-+
- commit 65fd6432ce4b971660a56f7f960f06a714405a9b
- Author: Jarvinia Zhao <jzhao169@myseneca.ca>
- Date:   Sat Dec 2 19:02:49 2023 -0500
-
-commit cecfd8b0942d30a1248e56d1d1968e2866004398
-Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-Date:   Wed Dec 6 13:45:46 2023 -0500
-
-    Version3: Minor format modifications
-
-diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
-index 5449f31..2fa13a7 100644
-Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
-diff --git a/manipulating-testing.txt b/manipulating-testing.txt
-index f73a2bc..80e1c9d 100644
---- a/manipulating-testing.txt
-+++ b/manipulating-testing.txt
-@@ -1,4 +1,4 @@
--Manipulating Testing 
-+Manipulating Testing Records
- 
- -------------- Version 1: String Concatenate -------------------------------
- >> Test 1: (Normal case)
-
-commit 5ca8d5a33a8d2db071a1748e1c439a083789c4c7
-Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-Date:   Sat Dec 2 21:30:36 2023 -0500
-
-    Version 2: Add one more testing case - one empty string
-
-diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
-index 4990758..5449f31 100644
-Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
-diff --git a/manipulating-testing.txt b/manipulating-testing.txt
-index 57c3364..f73a2bc 100644
---- a/manipulating-testing.txt
-+++ b/manipulating-testing.txt
-@@ -64,27 +64,34 @@ Type the 2nd string to compare:
- Hello
- "Hello World" string is greater than "Hello"
- 
-->> Test 4: (Empty string)
-+>> Test 4: (Compare one empty string)
-+Type the 1st string to compare (q - to quit):
-+
-+Type the 2nd string to compare:
-+test
-+"" string is less than "test"
-+
-+>> Test 5: (Both string are empty )
- Type the 1st string to compare (q - to quit):
- 
- Type the 2nd string to compare:
- 
- "" string is equal to ""
- 
-->> Test 5: (Special characters)
-+>> Test 6: (Special characters)
- Type the 1st string to compare (q - to quit):
- @123
- Type the 2nd string to compare:
- $456
- "@123" string is greater than "$456"
- 
-->> Test 6: (Over-the-edge: compare1 over the limit)
-+>> Test 7: (Over-the-edge: compare1 over the limit)
- Type the 1st string to compare (q - to quit):
- Hello this is John Smith, Nice to meet you!
- Type the 2nd string to compare:
- "Hello this is John Smith, Nice" string is less than "to meet you!"
- 
-->> Test 7: (Over-the-edge: compare2 over the limit)
-+>> Test 8: (Over-the-edge: compare2 over the limit)
- Type the 1st string to compare (q - to quit):
- Hello this is John Smith, Nice
- Type the 2nd string to compare:
-
-commit 4b8535e987cecb5e0dc6519e9aa7a5d8b2e87950
-Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-Date:   Sat Dec 2 21:23:39 2023 -0500
-
-    Version 3: Upload testing case records, and modify the format of testing.txt
-
-diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
-index 8058037..4990758 100644
-Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
-diff --git a/manipulating-testing.txt b/manipulating-testing.txt
-index 1d00335..57c3364 100644
---- a/manipulating-testing.txt
-+++ b/manipulating-testing.txt
-@@ -1,94 +1,175 @@
- Manipulating Testing 
- 
--------Version 1-------
--Test 1: (Normal case)
-+-------------- Version 1: String Concatenate -------------------------------
-+>> Test 1: (Normal case)
- Type the 1st string (q - to quit):
- John
- Type the 2nd string:
-  Simith
- Concatenated string is 'John Simith'
- 
--Test 2: (Empty string)
-+>> Test 2: (Empty string)
- Type the 1st string (q - to quit):
- 
- Type the 2nd string:
- 
- Concatenated string is ''
- 
--Test 3: (Edge case)
-+>> Test 3: (Edge case)
- Type the 1st string (q - to quit):
- Hi John Smith
- Type the 2nd string:
-  Nice to meet you!
- Concatenated string is 'Hi John Smith Nice to meet you!'
- 
--Test 4: (Over-the-edge: string1 over the limit)
-+>> Test 4: (Over-the-edge: string1 over the limit)
- Type the 1st string (q - to quit):
- Hello this is John Smith, Nice to meet you!
- Type the 2nd string:
- Concatenated string is 'Hello this is John Smith, Niceto meet you!'
- 
--Test 5: (Over-the-edge: string2 over the limit)
-+>> Test 5: (Over-the-edge: string2 over the limit)
- Type the 1st string (q - to quit):
- 12345
- Type the 2nd string:
- Hi John Smith Nice to meet you!
- Concatenated string is '12345Hi John Smith Nice to meet you'
- 
--Test 6: (Over-the-edge: after concatenation string1 over the limit)
-+>> Test 6: (Over-the-edge: after concatenation string1 over the limit)
- Type the 1st string (q - to quit):
- Hello this is John Smith,
- Type the 2nd string:
-  Nice to meet you!
- Concatenated string is 'Hello this is John Smith, Nice to meet you!'
- 
--------Version 2-------
--Test 1: (Identical)
-+--------------- Version 2: String Comparision -------------------------------
-+>> Test 1: (Identical)
- Type the 1st string to compare (q - to quit):
- test
- Type the 2nd string to compare:
- test
- "test" string is equal to "test"
- 
--Test 2: (Case sensitive)
-+>> Test 2: (Case sensitive)
- Type the 1st string to compare (q - to quit):
- Test
- Type the 2nd string to compare:
- test
- "Test" string is less than "test"
- 
--Test 3: (Different length)
-+>> Test 3: (Different length)
- Type the 1st string to compare (q - to quit):
- Hello World
- Type the 2nd string to compare:
- Hello
- "Hello World" string is greater than "Hello"
- 
--Test 4: (Empty string)
-+>> Test 4: (Empty string)
- Type the 1st string to compare (q - to quit):
- 
- Type the 2nd string to compare:
- 
- "" string is equal to ""
- 
--Test 5: (Special characters)
-+>> Test 5: (Special characters)
- Type the 1st string to compare (q - to quit):
- @123
- Type the 2nd string to compare:
- $456
- "@123" string is greater than "$456"
- 
--Test 6: (Over-the-edge: compare1 over the limit)
-+>> Test 6: (Over-the-edge: compare1 over the limit)
- Type the 1st string to compare (q - to quit):
- Hello this is John Smith, Nice to meet you!
- Type the 2nd string to compare:
- "Hello this is John Smith, Nice" string is less than "to meet you!"
- 
--Test 7: (Over-the-edge: compare2 over the limit)
-+>> Test 7: (Over-the-edge: compare2 over the limit)
- Type the 1st string to compare (q - to quit):
- Hello this is John Smith, Nice
- Type the 2nd string to compare:
- Hello this is John Smith, Nice to meet you!
- "Hello this is John Smith, Nice" string is equal to "Hello this is John Smith, Nice"
- Type the 1st string to compare (q - to quit):
--Type the 2nd string to compare:
-\ No newline at end of file
-+Type the 2nd string to compare:
-+
-+--------------- Version 3: String Search -------------------------------
-+>> Test 1: (Normal case)
-+Type the string (q - to quit):
-+Hello World!
-+Type the substring:
-+World
-+"World" found at 6 position
-+
-+>> Test 2: (needle at beginning)
-+Type the string (q - to quit):
-+Test starts now right?
-+Type the substring:
-+Test
-+"Test" found at 0 position
-+
-+>> Test 3: (needle at end)
-+Type the string (q - to quit):
-+This is a test
-+Type the substring:
-+test
-+"test" found at 10 position
-+
-+>> Test 4: (needle is single character)
-+Type the string (q - to quit):
-+Hello World!
-+Type the substring:
-+o
-+"o" found at 4 position
-+
-+>> Test 5: (needle not found)
-+Type the string (q - to quit):
-+Hello World!
-+Type the substring:
-+Happy
-+Not found
-+
-+>> Test 6: (haystack is empty)
-+Type the string (q - to quit):
-+
-+Type the substring:
-+test
-+Not found
-+
-+>> Test 7: (needle is empty)
-+Type the string (q - to quit):
-+test
-+Type the substring:
-+
-+"" found at 0 position
-+
-+>> Test 8: (Both string is empty)
-+Type the string (q - to quit):
-+
-+Type the substring:
-+
-+"" found at 0 position
-+
-+>> Test 9: (Over-the-edge: haystack over the limit)
-+Type the string (q - to quit):
-+one two three four five six seven eight nine ten
-+Type the substring:
-+Not found
-+
-+>> Test 10: (Over-the-edge: haystack over the limit with repeated pattern)
-+Type the string (q - to quit):
-+two three four two three four two three four two three four
-+Type the substring:
-+"wo three four two three four" found at 1 position
-+
-+>>Test 11: (Over-the-edge: needle over the limit)
-+Type the string (q - to quit):
-+four
-+Type the substring:
-+one two three four five six seven eight nine ten
-+Not found
-+Type the string (q - to quit):
-+Type the substring:
-+
-+
-+
-
-commit b70dcc9b0533d13e72fe7be9759f3bdeebd7747d
-Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-Date:   Sat Dec 2 21:21:59 2023 -0500
-
-    Version 3: Finish code comments
-
-diff --git a/manipulating.c b/manipulating.c
-index c1f52ee..095ec35 100644
---- a/manipulating.c
-+++ b/manipulating.c
-@@ -58,7 +58,7 @@ void manipulating(void) {
-     //printf("**** End of Concatenating Strings Demo ****\n");
- 
- 
--/* Version 2 */
-+/* Version 2 
-     //------------- Demo of String Comparing ---------------
- 
-     // Display the staring message for user to understand the purpose of this demo
-@@ -105,31 +105,49 @@ void manipulating(void) {
-         }
-     } while (strcmp(compare1, "q") != 0); // Continue looping until the user enter 'q' for the compare1
-     printf("**** End of Comparing Strings Demo ****\n");
-+    */
-     
- 
- /* Version 3 */
-+    //------------- Demo of String Search ---------------
-+
-+    // Display the staring message for user to understand the purpose of this demo
-     printf("**** Start of Searching Strings Demo ****\n");
--    char haystack[BUFFER_SIZE];
--    char needle[BUFFER_SIZE];
--    char* occurrence = NULL;
-+    char haystack[BUFFER_SIZE]; // string to store user input as a searching library
-+    char needle[BUFFER_SIZE];  // string to store user input as a searching keyword
-+    char* occurrence = NULL; // variable to store search result, NULL = not found
-+    
-+    // Keep prompt for 2 string input until the user enter q to quit
-     do {
-+        // Prompt the user for the library string
-         printf("Type the string (q - to quit):\n");
--        fgets(haystack, BUFFER_SIZE, stdin);
-+        fgets(haystack, BUFFER_SIZE, stdin); // Read the first input Cstring from user and stores in haystack
-+        // Remove the newline character at the end of the input string
-         haystack[strlen(haystack) - 1] = '\0';
-+        
-+        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
-         if (strcmp(haystack, "q") == 0) {
-             break;
-         }
-+        
-+        // Prompt the user for the keyword string/substring
-         printf("Type the substring:\n");
--        fgets(needle, BUFFER_SIZE, stdin);
-+        fgets(needle, BUFFER_SIZE, stdin); // Read the second input Cstring from user and stores in needle
-+        // Remove the newline character at the end of the input string
-         needle[strlen(needle) - 1] = '\0';
-+
-+        //Search the occurrence of needle in haystack and store the result in variable occurance
-         occurrence = strstr(haystack, needle);
-+
-+        // Check the value of occurence and display corresponding message to user
-+        // Found the needle in haystack and give the exact position of needle in haystack
-         if (occurrence) {
-             printf("\"%s\" found at %d position\n", needle, (int)(occurrence - haystack));
-         }
-         else {
-             printf("Not found\n");
-         }
--    } while (strcmp(haystack, "q") != 0);
-+    } while (strcmp(haystack, "q") != 0);// Continue looping until the user enter 'q' for the haystack
-     printf("**** End of Searching Strings Demo ****\n");
-     
- }
-\ No newline at end of file
-
-commit be760f11843fc5c19823ee5807bad95400b2702f
-Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-Date:   Sat Dec 2 19:29:27 2023 -0500
-
-    Version 3: Code without any comments
-
-diff --git a/manipulating.c b/manipulating.c
-index 0e763bf..c1f52ee 100644
---- a/manipulating.c
-+++ b/manipulating.c
-@@ -107,7 +107,7 @@ void manipulating(void) {
-     printf("**** End of Comparing Strings Demo ****\n");
-     
- 
--/* Version 3 
-+/* Version 3 */
-     printf("**** Start of Searching Strings Demo ****\n");
-     char haystack[BUFFER_SIZE];
-     char needle[BUFFER_SIZE];
-@@ -131,5 +131,5 @@ void manipulating(void) {
-         }
-     } while (strcmp(haystack, "q") != 0);
-     printf("**** End of Searching Strings Demo ****\n");
--    */
-+    
- }
-\ No newline at end of file
-
-commit 60a339ffd2fcde2efa9b67ff5a315351107677a3
-Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-Date:   Sat Dec 2 19:11:51 2023 -0500
-
-    Version 2: upload git log
-
-diff --git a/manipulating-git-log.txt b/manipulating-git-log.txt
-new file mode 100644
-index 0000000..7af623f
---- /dev/null
-+++ b/manipulating-git-log.txt
-@@ -0,0 +1,643 @@
-+commit 65fd6432ce4b971660a56f7f960f06a714405a9b
-+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-+Date:   Sat Dec 2 19:02:49 2023 -0500
-+
-+    Version 1&2: Correct typos and revise the wording
-+
-+diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
-+index 741f37a..8058037 100644
-+Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
-+
-+commit 4b5197c169be2a959933edfdd976b123ed44f42e
-+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-+Date:   Sat Dec 2 19:01:42 2023 -0500
-+
-+    Header file: Add and revise some comment for easy understanding
-+
-+diff --git a/manipulating.h b/manipulating.h
-+index fdbd4a4..e3dcc7a 100644
-+--- a/manipulating.h
-++++ b/manipulating.h
-+@@ -3,10 +3,12 @@
-+ #ifndef _MANIPULATING_H_
-+ #define _MANIPULATING_H_
-+ 
-++//All system library needed
-+ #include <stdio.h>
-+ #include <string.h>
-+ 
-+-#define BUFFER_SIZE 32 // Define a constant for maximum string length
-++// Define a constant for maximum length of input string 
-++#define BUFFER_SIZE 32
-+ 
-+ // manipulating prototype: Allow users to manipulate string input
-+ //Including: string concatenate
-+
-+commit bccbd7b3a5fbf9465d1852b3dd642777bf3f29ce
-+Merge: 5724194 723cf02
-+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-+Date:   Sat Dec 2 18:58:38 2023 -0500
-+
-+    Merge branch 'manipulating' of https://github.com/xiaohanfu123/CPR101-Final-Project into manipulating
-+
-+commit 5724194a681ef0c8997824b91fc692f6dc29686f
-+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-+Date:   Sat Dec 2 18:57:50 2023 -0500
-+
-+    Version 1&2: Revise some comments to make them easy to understand the codes
-+
-+diff --git a/manipulating.c b/manipulating.c
-+index 31ce090..0e763bf 100644
-+--- a/manipulating.c
-++++ b/manipulating.c
-+@@ -9,9 +9,9 @@ Final Project
-+ */
-+ 
-+ /* The costomized library "manipulating.h" header file provides :
-+-    2 standard libraies: stdio.h and string.h
-+-    Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
-+-    Prototype for function manipulating
-++    - 2 standard libraies: stdio.h and string.h
-++    - Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
-++    - Prototype for function manipulating
-+ */
-+ #include "manipulating.h"   
-+ 
-+@@ -26,10 +26,10 @@ void manipulating(void) {
-+     // Display the staring message for user to understand the purpose of this demo
-+     //printf("**** Start of Concatenating Strings Demo ****\n");
-+     //// Declare 2 Cstring to store the string for concatenation 
-+-    //char string1[BUFFER_SIZE]; // first string 
-+-    //char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
-++    //char string1[BUFFER_SIZE]; // first string to store user first input
-++    //char string2[BUFFER_SIZE]; // second string to store user second input - concatenate to the end of first string
-+     //
-+-    //// Start a loop at least once and will continue until the user enter q to quit
-++    //// Keep prompt for 2 string input until the user enter q to quit
-+     //do {
-+     //    // Prompt the user for the first string
-+     //    printf("Type the 1st string (q - to quit):\n");
-+@@ -65,11 +65,11 @@ void manipulating(void) {
-+     printf("**** Start of Comparing Strings Demo ****\n");
-+ 
-+     // Declare 2 Cstring to store the string for comparison
-+-    char compare1[BUFFER_SIZE]; // first string
-+-    char compare2[BUFFER_SIZE]; // second string
-++    char compare1[BUFFER_SIZE]; // first string to store user first input
-++    char compare2[BUFFER_SIZE]; // second string to store user second input
-+     int result; // Store the comparison result
-+ 
-+-    // Start a loop at least once and will continue until the user enter q to quit
-++    // Keep prompt for 2 string input until the user enter q to quit
-+     do {
-+         // Prompt the user for the first string
-+         printf("Type the 1st string to compare (q - to quit):\n");
-+@@ -91,15 +91,15 @@ void manipulating(void) {
-+         result = strcmp(compare1, compare2);
-+ 
-+         // Check the value of reuslt and display corresponding message to user
-+-        // compare1 < compare2
-++        // compare1 < compare2 and output proper message to user
-+         if (result < 0) {
-+             printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
-+         }
-+-        // compare1 = compare2
-++        // compare1 = compare2 and output proper message to user
-+         else if (result == 0) {
-+             printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
-+         }
-+-        // compare1 > compare2 
-++        // compare1 > compare2 and output proper message to user
-+         else {
-+             printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
-+         }
-+
-+commit 723cf0212615fd781700c1580261a1488b866e62
-+Author: Jarviniazhao <151060098+Jarviniazhao@users.noreply.github.com>
-+Date:   Fri Dec 1 09:30:48 2023 -0500
-+
-+    Add general descriptions of manipulating
-+
-+diff --git a/README.md b/README.md
-+index 8a2ba66..e8b903a 100644
-+--- a/README.md
-++++ b/README.md
-+@@ -1 +1,4 @@
-+-# CPR101-Final-Project
-+\ No newline at end of file
-++# CPR101-Final-Project
-++
-++- Manipulating <br />
-++    This function provides the functionality to manipulate Cstings including 3 versions: string concatenation, comparison, and searching
-+
-+commit 259290768c7d6f4affc068cf206f83183da7ecb6
-+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-+Date:   Fri Dec 1 08:33:26 2023 -0500
-+
-+    Version 2: Comment out version1 code for testing version2 only
-+
-+diff --git a/manipulating.c b/manipulating.c
-+index e57d2ae..31ce090 100644
-+--- a/manipulating.c
-++++ b/manipulating.c
-+@@ -19,42 +19,43 @@ Final Project
-+ Function Purpose: This function provides the functionality to manipulate Cstings
-+ */
-+ void manipulating(void) {
-++
-+ /* Version 1 */
-+     //------------- Demo of String Concatenate ---------------
-+     
-+     // Display the staring message for user to understand the purpose of this demo
-+-    printf("**** Start of Concatenating Strings Demo ****\n");
-+-    // Declare 2 Cstring to store the string for concatenation 
-+-    char string1[BUFFER_SIZE]; // first string 
-+-    char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
-+-    
-+-    // Start a loop at least once and will continue until the user enter q to quit
-+-    do {
-+-        // Prompt the user for the first string
-+-        printf("Type the 1st string (q - to quit):\n");
-+-        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
-+-        // Remove the newline character at the end of the input string
-+-        string1[strlen(string1) - 1] = '\0';
-+-
-+-        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
-+-        if (strcmp(string1, "q") == 0) {
-+-            break;
-+-        }
-+-
-+-        // Prompt the user for the second string
-+-        printf("Type the 2nd string:\n");
-+-        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
-+-        // Remove the newline character at the end of the input string
-+-        string2[strlen(string2) - 1] = '\0'; 
-+-
-+-        // Concatenate the string2 to the string1
-+-        strcat(string1, string2);
-+-        // Display the result after concatenation
-+-        printf("Concatenated string is '%s'\n", string1);
-+-
-+-    } while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
-+-
-+-    printf("**** End of Concatenating Strings Demo ****\n");
-++    //printf("**** Start of Concatenating Strings Demo ****\n");
-++    //// Declare 2 Cstring to store the string for concatenation 
-++    //char string1[BUFFER_SIZE]; // first string 
-++    //char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
-++    //
-++    //// Start a loop at least once and will continue until the user enter q to quit
-++    //do {
-++    //    // Prompt the user for the first string
-++    //    printf("Type the 1st string (q - to quit):\n");
-++    //    fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
-++    //    // Remove the newline character at the end of the input string
-++    //    string1[strlen(string1) - 1] = '\0';
-++
-++    //    // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
-++    //    if (strcmp(string1, "q") == 0) {
-++    //        break;
-++    //    }
-++
-++    //    // Prompt the user for the second string
-++    //    printf("Type the 2nd string:\n");
-++    //    fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
-++    //    // Remove the newline character at the end of the input string
-++    //    string2[strlen(string2) - 1] = '\0'; 
-++
-++    //    // Concatenate the string2 to the string1
-++    //    strcat(string1, string2);
-++    //    // Display the result after concatenation
-++    //    printf("Concatenated string is '%s'\n", string1);
-++
-++    //} while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
-++
-++    //printf("**** End of Concatenating Strings Demo ****\n");
-+ 
-+ 
-+ /* Version 2 */
-+
-+commit 99c9ceef9a88f431213291029a49e438562858bd
-+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-+Date:   Thu Nov 30 23:45:15 2023 -0500
-+
-+    Version 2: Finish testing with 7 cases with actual output and case report
-+
-+diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
-+index 2a6351e..741f37a 100644
-+Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
-+diff --git a/manipulating-testing.txt b/manipulating-testing.txt
-+index 3cf3d34..1d00335 100644
-+--- a/manipulating-testing.txt
-++++ b/manipulating-testing.txt
-+@@ -42,3 +42,53 @@ Type the 2nd string:
-+  Nice to meet you!
-+ Concatenated string is 'Hello this is John Smith, Nice to meet you!'
-+ 
-++------Version 2-------
-++Test 1: (Identical)
-++Type the 1st string to compare (q - to quit):
-++test
-++Type the 2nd string to compare:
-++test
-++"test" string is equal to "test"
-++
-++Test 2: (Case sensitive)
-++Type the 1st string to compare (q - to quit):
-++Test
-++Type the 2nd string to compare:
-++test
-++"Test" string is less than "test"
-++
-++Test 3: (Different length)
-++Type the 1st string to compare (q - to quit):
-++Hello World
-++Type the 2nd string to compare:
-++Hello
-++"Hello World" string is greater than "Hello"
-++
-++Test 4: (Empty string)
-++Type the 1st string to compare (q - to quit):
-++
-++Type the 2nd string to compare:
-++
-++"" string is equal to ""
-++
-++Test 5: (Special characters)
-++Type the 1st string to compare (q - to quit):
-++@123
-++Type the 2nd string to compare:
-++$456
-++"@123" string is greater than "$456"
-++
-++Test 6: (Over-the-edge: compare1 over the limit)
-++Type the 1st string to compare (q - to quit):
-++Hello this is John Smith, Nice to meet you!
-++Type the 2nd string to compare:
-++"Hello this is John Smith, Nice" string is less than "to meet you!"
-++
-++Test 7: (Over-the-edge: compare2 over the limit)
-++Type the 1st string to compare (q - to quit):
-++Hello this is John Smith, Nice
-++Type the 2nd string to compare:
-++Hello this is John Smith, Nice to meet you!
-++"Hello this is John Smith, Nice" string is equal to "Hello this is John Smith, Nice"
-++Type the 1st string to compare (q - to quit):
-++Type the 2nd string to compare:
-+\ No newline at end of file
-+
-+commit e1419a3e16637354960b9e5ad4878737841c65c4
-+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-+Date:   Tue Nov 28 21:02:47 2023 -0500
-+
-+    Version 2: Finish comments 1.0
-+
-+diff --git a/manipulating.c b/manipulating.c
-+index caa2d08..e57d2ae 100644
-+--- a/manipulating.c
-++++ b/manipulating.c
-+@@ -32,7 +32,7 @@ void manipulating(void) {
-+     do {
-+         // Prompt the user for the first string
-+         printf("Type the 1st string (q - to quit):\n");
-+-        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user
-++        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
-+         // Remove the newline character at the end of the input string
-+         string1[strlen(string1) - 1] = '\0';
-+ 
-+@@ -43,7 +43,7 @@ void manipulating(void) {
-+ 
-+         // Prompt the user for the second string
-+         printf("Type the 2nd string:\n");
-+-        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user
-++        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
-+         // Remove the newline character at the end of the input string
-+         string2[strlen(string2) - 1] = '\0'; 
-+ 
-+@@ -58,31 +58,51 @@ void manipulating(void) {
-+ 
-+ 
-+ /* Version 2 */
-++    //------------- Demo of String Comparing ---------------
-++
-++    // Display the staring message for user to understand the purpose of this demo
-+     printf("**** Start of Comparing Strings Demo ****\n");
-+-    char compare1[BUFFER_SIZE];
-+-    char compare2[BUFFER_SIZE];
-+-    int result;
-++
-++    // Declare 2 Cstring to store the string for comparison
-++    char compare1[BUFFER_SIZE]; // first string
-++    char compare2[BUFFER_SIZE]; // second string
-++    int result; // Store the comparison result
-++
-++    // Start a loop at least once and will continue until the user enter q to quit
-+     do {
-++        // Prompt the user for the first string
-+         printf("Type the 1st string to compare (q - to quit):\n");
-+-        fgets(compare1, BUFFER_SIZE, stdin);
-++        fgets(compare1, BUFFER_SIZE, stdin); // Read the first input Cstring from user and stores in compare1
-++        // Remove the newline character at the end of the input string
-+         compare1[strlen(compare1) - 1] = '\0';
-++
-++        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
-+         if (strcmp(compare1, "q") == 0) {
-+             break;
-+         }
-++        // Prompt the user for the second string
-+         printf("Type the 2nd string to compare:\n");
-+-        fgets(compare2, BUFFER_SIZE, stdin);
-++        fgets(compare2, BUFFER_SIZE, stdin); // Read the second input Cstring from user and stores in compare2
-++        // Remove the newline character at the end of the input string
-+         compare2[strlen(compare2) - 1] = '\0';
-++
-++        // Compare compare1 with compare2 and store the result to variable reuslt
-+         result = strcmp(compare1, compare2);
-++
-++        // Check the value of reuslt and display corresponding message to user
-++        // compare1 < compare2
-+         if (result < 0) {
-+             printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
-+         }
-++        // compare1 = compare2
-+         else if (result == 0) {
-+             printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
-+         }
-++        // compare1 > compare2 
-+         else {
-+             printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
-+         }
-+-    } while (strcmp(compare1, "q") != 0);
-++    } while (strcmp(compare1, "q") != 0); // Continue looping until the user enter 'q' for the compare1
-+     printf("**** End of Comparing Strings Demo ****\n");
-+     
-+ 
-+
-+commit 63486a4aa9da65f01fe5b158a7a62d3683e27e23
-+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-+Date:   Tue Nov 28 20:48:36 2023 -0500
-+
-+    Correct a comment for Version 1, which was put for wrong code
-+
-+diff --git a/manipulating.c b/manipulating.c
-+index 58a46ce..caa2d08 100644
-+--- a/manipulating.c
-++++ b/manipulating.c
-+@@ -43,9 +43,9 @@ void manipulating(void) {
-+ 
-+         // Prompt the user for the second string
-+         printf("Type the 2nd string:\n");
-+-        fgets(string2, BUFFER_SIZE, stdin);
-++        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user
-+         // Remove the newline character at the end of the input string
-+-        string2[strlen(string2) - 1] = '\0'; // Read the second input string from user
-++        string2[strlen(string2) - 1] = '\0'; 
-+ 
-+         // Concatenate the string2 to the string1
-+         strcat(string1, string2);
-+
-+commit 13220bd1bfb31415bbed9664fd1e9fb3796c0525
-+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-+Date:   Tue Nov 28 20:27:55 2023 -0500
-+
-+    Adding completed work of version 1 for manipulating
-+
-+diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
-+new file mode 100644
-+index 0000000..2a6351e
-+Binary files /dev/null and b/manipulating-test-cases.xlsx differ
-+diff --git a/manipulating-testing.txt b/manipulating-testing.txt
-+new file mode 100644
-+index 0000000..3cf3d34
-+--- /dev/null
-++++ b/manipulating-testing.txt
-+@@ -0,0 +1,44 @@
-++Manipulating Testing 
-++
-++------Version 1-------
-++Test 1: (Normal case)
-++Type the 1st string (q - to quit):
-++John
-++Type the 2nd string:
-++ Simith
-++Concatenated string is 'John Simith'
-++
-++Test 2: (Empty string)
-++Type the 1st string (q - to quit):
-++
-++Type the 2nd string:
-++
-++Concatenated string is ''
-++
-++Test 3: (Edge case)
-++Type the 1st string (q - to quit):
-++Hi John Smith
-++Type the 2nd string:
-++ Nice to meet you!
-++Concatenated string is 'Hi John Smith Nice to meet you!'
-++
-++Test 4: (Over-the-edge: string1 over the limit)
-++Type the 1st string (q - to quit):
-++Hello this is John Smith, Nice to meet you!
-++Type the 2nd string:
-++Concatenated string is 'Hello this is John Smith, Niceto meet you!'
-++
-++Test 5: (Over-the-edge: string2 over the limit)
-++Type the 1st string (q - to quit):
-++12345
-++Type the 2nd string:
-++Hi John Smith Nice to meet you!
-++Concatenated string is '12345Hi John Smith Nice to meet you'
-++
-++Test 6: (Over-the-edge: after concatenation string1 over the limit)
-++Type the 1st string (q - to quit):
-++Hello this is John Smith,
-++Type the 2nd string:
-++ Nice to meet you!
-++Concatenated string is 'Hello this is John Smith, Nice to meet you!'
-++
-+diff --git a/manipulating.c b/manipulating.c
-+new file mode 100644
-+index 0000000..58a46ce
-+--- /dev/null
-++++ b/manipulating.c
-+@@ -0,0 +1,114 @@
-++#define _CRT_SECURE_NO_WARNINGS
-++/*
-++Author: Jarvinia Zhao
-++Email: jzhao169@myseneca.ca
-++ID: 143013233
-++Date Written: 11-27-2023
-++Course: CPR101.NNN
-++Final Project
-++*/
-++
-++/* The costomized library "manipulating.h" header file provides :
-++    2 standard libraies: stdio.h and string.h
-++    Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
-++    Prototype for function manipulating
-++*/
-++#include "manipulating.h"   
-++
-++/*
-++Function Purpose: This function provides the functionality to manipulate Cstings
-++*/
-++void manipulating(void) {
-++/* Version 1 */
-++    //------------- Demo of String Concatenate ---------------
-++    
-++    // Display the staring message for user to understand the purpose of this demo
-++    printf("**** Start of Concatenating Strings Demo ****\n");
-++    // Declare 2 Cstring to store the string for concatenation 
-++    char string1[BUFFER_SIZE]; // first string 
-++    char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
-++    
-++    // Start a loop at least once and will continue until the user enter q to quit
-++    do {
-++        // Prompt the user for the first string
-++        printf("Type the 1st string (q - to quit):\n");
-++        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user
-++        // Remove the newline character at the end of the input string
-++        string1[strlen(string1) - 1] = '\0';
-++
-++        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
-++        if (strcmp(string1, "q") == 0) {
-++            break;
-++        }
-++
-++        // Prompt the user for the second string
-++        printf("Type the 2nd string:\n");
-++        fgets(string2, BUFFER_SIZE, stdin);
-++        // Remove the newline character at the end of the input string
-++        string2[strlen(string2) - 1] = '\0'; // Read the second input string from user
-++
-++        // Concatenate the string2 to the string1
-++        strcat(string1, string2);
-++        // Display the result after concatenation
-++        printf("Concatenated string is '%s'\n", string1);
-++
-++    } while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
-++
-++    printf("**** End of Concatenating Strings Demo ****\n");
-++
-++
-++/* Version 2 */
-++    printf("**** Start of Comparing Strings Demo ****\n");
-++    char compare1[BUFFER_SIZE];
-++    char compare2[BUFFER_SIZE];
-++    int result;
-++    do {
-++        printf("Type the 1st string to compare (q - to quit):\n");
-++        fgets(compare1, BUFFER_SIZE, stdin);
-++        compare1[strlen(compare1) - 1] = '\0';
-++        if (strcmp(compare1, "q") == 0) {
-++            break;
-++        }
-++        printf("Type the 2nd string to compare:\n");
-++        fgets(compare2, BUFFER_SIZE, stdin);
-++        compare2[strlen(compare2) - 1] = '\0';
-++        result = strcmp(compare1, compare2);
-++        if (result < 0) {
-++            printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
-++        }
-++        else if (result == 0) {
-++            printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
-++        }
-++        else {
-++            printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
-++        }
-++    } while (strcmp(compare1, "q") != 0);
-++    printf("**** End of Comparing Strings Demo ****\n");
-++    
-++
-++/* Version 3 
-++    printf("**** Start of Searching Strings Demo ****\n");
-++    char haystack[BUFFER_SIZE];
-++    char needle[BUFFER_SIZE];
-++    char* occurrence = NULL;
-++    do {
-++        printf("Type the string (q - to quit):\n");
-++        fgets(haystack, BUFFER_SIZE, stdin);
-++        haystack[strlen(haystack) - 1] = '\0';
-++        if (strcmp(haystack, "q") == 0) {
-++            break;
-++        }
-++        printf("Type the substring:\n");
-++        fgets(needle, BUFFER_SIZE, stdin);
-++        needle[strlen(needle) - 1] = '\0';
-++        occurrence = strstr(haystack, needle);
-++        if (occurrence) {
-++            printf("\"%s\" found at %d position\n", needle, (int)(occurrence - haystack));
-++        }
-++        else {
-++            printf("Not found\n");
-++        }
-++    } while (strcmp(haystack, "q") != 0);
-++    printf("**** End of Searching Strings Demo ****\n");
-++    */
-++}
-+\ No newline at end of file
-+diff --git a/manipulating.h b/manipulating.h
-+new file mode 100644
-+index 0000000..fdbd4a4
-+--- /dev/null
-++++ b/manipulating.h
-+@@ -0,0 +1,15 @@
-++#pragma once
-++// MANIPULATING MODULE HEADER
-++#ifndef _MANIPULATING_H_
-++#define _MANIPULATING_H_
-++
-++#include <stdio.h>
-++#include <string.h>
-++
-++#define BUFFER_SIZE 32 // Define a constant for maximum string length
-++
-++// manipulating prototype: Allow users to manipulate string input
-++//Including: string concatenate
-++void manipulating(void);
-++
-++#endif
-+\ No newline at end of file
-+
-+commit 4382fcc46f84af21341f49a0a3d637836ef55795
-+Author: xiaohanfu123 <110127564+xiaohanfu123@users.noreply.github.com>
-+Date:   Wed Nov 15 22:09:25 2023 -0500
-+
-+    Initial commit
-+
-+diff --git a/LICENSE b/LICENSE
-+new file mode 100644
-+index 0000000..3db340b
-+--- /dev/null
-++++ b/LICENSE
-+@@ -0,0 +1,21 @@
-++MIT License
-++
-++Copyright (c) 2023 xiaohanfu123
-++
-++Permission is hereby granted, free of charge, to any person obtaining a copy
-++of this software and associated documentation files (the "Software"), to deal
-++in the Software without restriction, including without limitation the rights
-++to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-++copies of the Software, and to permit persons to whom the Software is
-++furnished to do so, subject to the following conditions:
-++
-++The above copyright notice and this permission notice shall be included in all
-++copies or substantial portions of the Software.
-++
-++THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-++IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-++FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-++AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-++LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-++OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-++SOFTWARE.
-+diff --git a/README.md b/README.md
-+new file mode 100644
-+index 0000000..8a2ba66
-+--- /dev/null
-++++ b/README.md
-+@@ -0,0 +1 @@
-++# CPR101-Final-Project
-+\ No newline at end of file
-
-commit 65fd6432ce4b971660a56f7f960f06a714405a9b
-Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-Date:   Sat Dec 2 19:02:49 2023 -0500
-
-    Version 1&2: Correct typos and revise the wording
-
-diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
-index 741f37a..8058037 100644
-Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
-
-commit 4b5197c169be2a959933edfdd976b123ed44f42e
-Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-Date:   Sat Dec 2 19:01:42 2023 -0500
-
-    Header file: Add and revise some comment for easy understanding
-
-diff --git a/manipulating.h b/manipulating.h
-index fdbd4a4..e3dcc7a 100644
---- a/manipulating.h
-+++ b/manipulating.h
-@@ -3,10 +3,12 @@
- #ifndef _MANIPULATING_H_
- #define _MANIPULATING_H_
- 
-+//All system library needed
- #include <stdio.h>
- #include <string.h>
- 
--#define BUFFER_SIZE 32 // Define a constant for maximum string length
-+// Define a constant for maximum length of input string 
-+#define BUFFER_SIZE 32
- 
- // manipulating prototype: Allow users to manipulate string input
- //Including: string concatenate
-
-commit bccbd7b3a5fbf9465d1852b3dd642777bf3f29ce
-Merge: 5724194 723cf02
-Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-Date:   Sat Dec 2 18:58:38 2023 -0500
-
-    Merge branch 'manipulating' of https://github.com/xiaohanfu123/CPR101-Final-Project into manipulating
-
-commit 5724194a681ef0c8997824b91fc692f6dc29686f
-Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-Date:   Sat Dec 2 18:57:50 2023 -0500
-
-    Version 1&2: Revise some comments to make them easy to understand the codes
-
-diff --git a/manipulating.c b/manipulating.c
-index 31ce090..0e763bf 100644
---- a/manipulating.c
-+++ b/manipulating.c
-@@ -9,9 +9,9 @@ Final Project
- */
- 
- /* The costomized library "manipulating.h" header file provides :
--    2 standard libraies: stdio.h and string.h
--    Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
--    Prototype for function manipulating
-+    - 2 standard libraies: stdio.h and string.h
-+    - Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
-+    - Prototype for function manipulating
- */
- #include "manipulating.h"   
- 
-@@ -26,10 +26,10 @@ void manipulating(void) {
-     // Display the staring message for user to understand the purpose of this demo
-     //printf("**** Start of Concatenating Strings Demo ****\n");
-     //// Declare 2 Cstring to store the string for concatenation 
--    //char string1[BUFFER_SIZE]; // first string 
--    //char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
-+    //char string1[BUFFER_SIZE]; // first string to store user first input
-+    //char string2[BUFFER_SIZE]; // second string to store user second input - concatenate to the end of first string
-     //
--    //// Start a loop at least once and will continue until the user enter q to quit
-+    //// Keep prompt for 2 string input until the user enter q to quit
-     //do {
-     //    // Prompt the user for the first string
-     //    printf("Type the 1st string (q - to quit):\n");
-@@ -65,11 +65,11 @@ void manipulating(void) {
-     printf("**** Start of Comparing Strings Demo ****\n");
- 
-     // Declare 2 Cstring to store the string for comparison
--    char compare1[BUFFER_SIZE]; // first string
--    char compare2[BUFFER_SIZE]; // second string
-+    char compare1[BUFFER_SIZE]; // first string to store user first input
-+    char compare2[BUFFER_SIZE]; // second string to store user second input
-     int result; // Store the comparison result
- 
--    // Start a loop at least once and will continue until the user enter q to quit
-+    // Keep prompt for 2 string input until the user enter q to quit
-     do {
-         // Prompt the user for the first string
-         printf("Type the 1st string to compare (q - to quit):\n");
-@@ -91,15 +91,15 @@ void manipulating(void) {
-         result = strcmp(compare1, compare2);
- 
-         // Check the value of reuslt and display corresponding message to user
--        // compare1 < compare2
-+        // compare1 < compare2 and output proper message to user
-         if (result < 0) {
-             printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
-         }
--        // compare1 = compare2
-+        // compare1 = compare2 and output proper message to user
-         else if (result == 0) {
-             printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
-         }
--        // compare1 > compare2 
-+        // compare1 > compare2 and output proper message to user
-         else {
-             printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
-         }
-
-commit 723cf0212615fd781700c1580261a1488b866e62
-Author: Jarviniazhao <151060098+Jarviniazhao@users.noreply.github.com>
-Date:   Fri Dec 1 09:30:48 2023 -0500
-
-    Add general descriptions of manipulating
-
-diff --git a/README.md b/README.md
-index 8a2ba66..e8b903a 100644
---- a/README.md
-+++ b/README.md
-@@ -1 +1,4 @@
--# CPR101-Final-Project
-\ No newline at end of file
-+# CPR101-Final-Project
-+
-+- Manipulating <br />
-+    This function provides the functionality to manipulate Cstings including 3 versions: string concatenation, comparison, and searching
-
-commit 259290768c7d6f4affc068cf206f83183da7ecb6
-Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-Date:   Fri Dec 1 08:33:26 2023 -0500
-
-    Version 2: Comment out version1 code for testing version2 only
-
-diff --git a/manipulating.c b/manipulating.c
-index e57d2ae..31ce090 100644
---- a/manipulating.c
-+++ b/manipulating.c
-@@ -19,42 +19,43 @@ Final Project
- Function Purpose: This function provides the functionality to manipulate Cstings
- */
- void manipulating(void) {
-+
- /* Version 1 */
-     //------------- Demo of String Concatenate ---------------
-     
-     // Display the staring message for user to understand the purpose of this demo
--    printf("**** Start of Concatenating Strings Demo ****\n");
--    // Declare 2 Cstring to store the string for concatenation 
--    char string1[BUFFER_SIZE]; // first string 
--    char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
--    
--    // Start a loop at least once and will continue until the user enter q to quit
--    do {
--        // Prompt the user for the first string
--        printf("Type the 1st string (q - to quit):\n");
--        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
--        // Remove the newline character at the end of the input string
--        string1[strlen(string1) - 1] = '\0';
--
--        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
--        if (strcmp(string1, "q") == 0) {
--            break;
--        }
--
--        // Prompt the user for the second string
--        printf("Type the 2nd string:\n");
--        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
--        // Remove the newline character at the end of the input string
--        string2[strlen(string2) - 1] = '\0'; 
--
--        // Concatenate the string2 to the string1
--        strcat(string1, string2);
--        // Display the result after concatenation
--        printf("Concatenated string is '%s'\n", string1);
--
--    } while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
--
--    printf("**** End of Concatenating Strings Demo ****\n");
-+    //printf("**** Start of Concatenating Strings Demo ****\n");
-+    //// Declare 2 Cstring to store the string for concatenation 
-+    //char string1[BUFFER_SIZE]; // first string 
-+    //char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
-+    //
-+    //// Start a loop at least once and will continue until the user enter q to quit
-+    //do {
-+    //    // Prompt the user for the first string
-+    //    printf("Type the 1st string (q - to quit):\n");
-+    //    fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
-+    //    // Remove the newline character at the end of the input string
-+    //    string1[strlen(string1) - 1] = '\0';
-+
-+    //    // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
-+    //    if (strcmp(string1, "q") == 0) {
-+    //        break;
-+    //    }
-+
-+    //    // Prompt the user for the second string
-+    //    printf("Type the 2nd string:\n");
-+    //    fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
-+    //    // Remove the newline character at the end of the input string
-+    //    string2[strlen(string2) - 1] = '\0'; 
-+
-+    //    // Concatenate the string2 to the string1
-+    //    strcat(string1, string2);
-+    //    // Display the result after concatenation
-+    //    printf("Concatenated string is '%s'\n", string1);
-+
-+    //} while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
-+
-+    //printf("**** End of Concatenating Strings Demo ****\n");
- 
- 
- /* Version 2 */
-
-commit 99c9ceef9a88f431213291029a49e438562858bd
-Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-Date:   Thu Nov 30 23:45:15 2023 -0500
-
-    Version 2: Finish testing with 7 cases with actual output and case report
-
-diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
-index 2a6351e..741f37a 100644
-Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
-diff --git a/manipulating-testing.txt b/manipulating-testing.txt
-index 3cf3d34..1d00335 100644
---- a/manipulating-testing.txt
-+++ b/manipulating-testing.txt
-@@ -42,3 +42,53 @@ Type the 2nd string:
-  Nice to meet you!
- Concatenated string is 'Hello this is John Smith, Nice to meet you!'
- 
-+------Version 2-------
-+Test 1: (Identical)
-+Type the 1st string to compare (q - to quit):
-+test
-+Type the 2nd string to compare:
-+test
-+"test" string is equal to "test"
-+
-+Test 2: (Case sensitive)
-+Type the 1st string to compare (q - to quit):
-+Test
-+Type the 2nd string to compare:
-+test
-+"Test" string is less than "test"
-+
-+Test 3: (Different length)
-+Type the 1st string to compare (q - to quit):
-+Hello World
-+Type the 2nd string to compare:
-+Hello
-+"Hello World" string is greater than "Hello"
-+
-+Test 4: (Empty string)
-+Type the 1st string to compare (q - to quit):
-+
-+Type the 2nd string to compare:
-+
-+"" string is equal to ""
-+
-+Test 5: (Special characters)
-+Type the 1st string to compare (q - to quit):
-+@123
-+Type the 2nd string to compare:
-+$456
-+"@123" string is greater than "$456"
-+
-+Test 6: (Over-the-edge: compare1 over the limit)
-+Type the 1st string to compare (q - to quit):
-+Hello this is John Smith, Nice to meet you!
-+Type the 2nd string to compare:
-+"Hello this is John Smith, Nice" string is less than "to meet you!"
-+
-+Test 7: (Over-the-edge: compare2 over the limit)
-+Type the 1st string to compare (q - to quit):
-+Hello this is John Smith, Nice
-+Type the 2nd string to compare:
-+Hello this is John Smith, Nice to meet you!
-+"Hello this is John Smith, Nice" string is equal to "Hello this is John Smith, Nice"
-+Type the 1st string to compare (q - to quit):
-+Type the 2nd string to compare:
-\ No newline at end of file
-
-commit e1419a3e16637354960b9e5ad4878737841c65c4
-Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-Date:   Tue Nov 28 21:02:47 2023 -0500
-
-    Version 2: Finish comments 1.0
-
-diff --git a/manipulating.c b/manipulating.c
-index caa2d08..e57d2ae 100644
---- a/manipulating.c
-+++ b/manipulating.c
-@@ -32,7 +32,7 @@ void manipulating(void) {
-     do {
-         // Prompt the user for the first string
-         printf("Type the 1st string (q - to quit):\n");
--        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user
-+        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
-         // Remove the newline character at the end of the input string
-         string1[strlen(string1) - 1] = '\0';
- 
-@@ -43,7 +43,7 @@ void manipulating(void) {
- 
-         // Prompt the user for the second string
-         printf("Type the 2nd string:\n");
--        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user
-+        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
-         // Remove the newline character at the end of the input string
-         string2[strlen(string2) - 1] = '\0'; 
- 
-@@ -58,31 +58,51 @@ void manipulating(void) {
- 
- 
- /* Version 2 */
-+    //------------- Demo of String Comparing ---------------
-+
-+    // Display the staring message for user to understand the purpose of this demo
-     printf("**** Start of Comparing Strings Demo ****\n");
--    char compare1[BUFFER_SIZE];
--    char compare2[BUFFER_SIZE];
--    int result;
-+
-+    // Declare 2 Cstring to store the string for comparison
-+    char compare1[BUFFER_SIZE]; // first string
-+    char compare2[BUFFER_SIZE]; // second string
-+    int result; // Store the comparison result
-+
-+    // Start a loop at least once and will continue until the user enter q to quit
-     do {
-+        // Prompt the user for the first string
-         printf("Type the 1st string to compare (q - to quit):\n");
--        fgets(compare1, BUFFER_SIZE, stdin);
-+        fgets(compare1, BUFFER_SIZE, stdin); // Read the first input Cstring from user and stores in compare1
-+        // Remove the newline character at the end of the input string
-         compare1[strlen(compare1) - 1] = '\0';
-+
-+        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
-         if (strcmp(compare1, "q") == 0) {
-             break;
-         }
-+        // Prompt the user for the second string
-         printf("Type the 2nd string to compare:\n");
--        fgets(compare2, BUFFER_SIZE, stdin);
-+        fgets(compare2, BUFFER_SIZE, stdin); // Read the second input Cstring from user and stores in compare2
-+        // Remove the newline character at the end of the input string
-         compare2[strlen(compare2) - 1] = '\0';
-+
-+        // Compare compare1 with compare2 and store the result to variable reuslt
-         result = strcmp(compare1, compare2);
-+
-+        // Check the value of reuslt and display corresponding message to user
-+        // compare1 < compare2
-         if (result < 0) {
-             printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
-         }
-+        // compare1 = compare2
-         else if (result == 0) {
-             printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
-         }
-+        // compare1 > compare2 
-         else {
-             printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
-         }
--    } while (strcmp(compare1, "q") != 0);
-+    } while (strcmp(compare1, "q") != 0); // Continue looping until the user enter 'q' for the compare1
-     printf("**** End of Comparing Strings Demo ****\n");
-     
- 
-
-commit 63486a4aa9da65f01fe5b158a7a62d3683e27e23
-Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-Date:   Tue Nov 28 20:48:36 2023 -0500
-
-    Correct a comment for Version 1, which was put for wrong code
-
-diff --git a/manipulating.c b/manipulating.c
-index 58a46ce..caa2d08 100644
---- a/manipulating.c
-+++ b/manipulating.c
-@@ -43,9 +43,9 @@ void manipulating(void) {
- 
-         // Prompt the user for the second string
-         printf("Type the 2nd string:\n");
--        fgets(string2, BUFFER_SIZE, stdin);
-+        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user
-         // Remove the newline character at the end of the input string
--        string2[strlen(string2) - 1] = '\0'; // Read the second input string from user
-+        string2[strlen(string2) - 1] = '\0'; 
- 
-         // Concatenate the string2 to the string1
-         strcat(string1, string2);
-
-commit 13220bd1bfb31415bbed9664fd1e9fb3796c0525
-Author: Jarvinia Zhao <jzhao169@myseneca.ca>
-Date:   Tue Nov 28 20:27:55 2023 -0500
-
-    Adding completed work of version 1 for manipulating
-
-diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
-new file mode 100644
-index 0000000..2a6351e
-Binary files /dev/null and b/manipulating-test-cases.xlsx differ
-diff --git a/manipulating-testing.txt b/manipulating-testing.txt
-new file mode 100644
-index 0000000..3cf3d34
---- /dev/null
-+++ b/manipulating-testing.txt
-@@ -0,0 +1,44 @@
-+Manipulating Testing 
-+
-+------Version 1-------
-+Test 1: (Normal case)
-+Type the 1st string (q - to quit):
-+John
-+Type the 2nd string:
-+ Simith
-+Concatenated string is 'John Simith'
-+
-+Test 2: (Empty string)
-+Type the 1st string (q - to quit):
-+
-+Type the 2nd string:
-+
-+Concatenated string is ''
-+
-+Test 3: (Edge case)
-+Type the 1st string (q - to quit):
-+Hi John Smith
-+Type the 2nd string:
-+ Nice to meet you!
-+Concatenated string is 'Hi John Smith Nice to meet you!'
-+
-+Test 4: (Over-the-edge: string1 over the limit)
-+Type the 1st string (q - to quit):
-+Hello this is John Smith, Nice to meet you!
-+Type the 2nd string:
-+Concatenated string is 'Hello this is John Smith, Niceto meet you!'
-+
-+Test 5: (Over-the-edge: string2 over the limit)
-+Type the 1st string (q - to quit):
-+12345
-+Type the 2nd string:
-+Hi John Smith Nice to meet you!
-+Concatenated string is '12345Hi John Smith Nice to meet you'
-+
-+Test 6: (Over-the-edge: after concatenation string1 over the limit)
-+Type the 1st string (q - to quit):
-+Hello this is John Smith,
-+Type the 2nd string:
-+ Nice to meet you!
-+Concatenated string is 'Hello this is John Smith, Nice to meet you!'
-+
-diff --git a/manipulating.c b/manipulating.c
-new file mode 100644
-index 0000000..58a46ce
---- /dev/null
-+++ b/manipulating.c
-@@ -0,0 +1,114 @@
-+#define _CRT_SECURE_NO_WARNINGS
-+/*
-+Author: Jarvinia Zhao
-+Email: jzhao169@myseneca.ca
-+ID: 143013233
-+Date Written: 11-27-2023
-+Course: CPR101.NNN
-+Final Project
-+*/
-+
-+/* The costomized library "manipulating.h" header file provides :
-+    2 standard libraies: stdio.h and string.h
-+    Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
-+    Prototype for function manipulating
-+*/
-+#include "manipulating.h"   
-+
-+/*
-+Function Purpose: This function provides the functionality to manipulate Cstings
-+*/
-+void manipulating(void) {
-+/* Version 1 */
-+    //------------- Demo of String Concatenate ---------------
-+    
-+    // Display the staring message for user to understand the purpose of this demo
-+    printf("**** Start of Concatenating Strings Demo ****\n");
-+    // Declare 2 Cstring to store the string for concatenation 
-+    char string1[BUFFER_SIZE]; // first string 
-+    char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
-+    
-+    // Start a loop at least once and will continue until the user enter q to quit
-+    do {
-+        // Prompt the user for the first string
-+        printf("Type the 1st string (q - to quit):\n");
-+        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user
-+        // Remove the newline character at the end of the input string
-+        string1[strlen(string1) - 1] = '\0';
-+
-+        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
-+        if (strcmp(string1, "q") == 0) {
-+            break;
-+        }
-+
-+        // Prompt the user for the second string
-+        printf("Type the 2nd string:\n");
-+        fgets(string2, BUFFER_SIZE, stdin);
-+        // Remove the newline character at the end of the input string
-+        string2[strlen(string2) - 1] = '\0'; // Read the second input string from user
-+
-+        // Concatenate the string2 to the string1
-+        strcat(string1, string2);
-+        // Display the result after concatenation
-+        printf("Concatenated string is '%s'\n", string1);
-+
-+    } while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
-+
-+    printf("**** End of Concatenating Strings Demo ****\n");
-+
-+
-+/* Version 2 */
-+    printf("**** Start of Comparing Strings Demo ****\n");
-+    char compare1[BUFFER_SIZE];
-+    char compare2[BUFFER_SIZE];
-+    int result;
-+    do {
-+        printf("Type the 1st string to compare (q - to quit):\n");
-+        fgets(compare1, BUFFER_SIZE, stdin);
-+        compare1[strlen(compare1) - 1] = '\0';
-+        if (strcmp(compare1, "q") == 0) {
-+            break;
-+        }
-+        printf("Type the 2nd string to compare:\n");
-+        fgets(compare2, BUFFER_SIZE, stdin);
-+        compare2[strlen(compare2) - 1] = '\0';
-+        result = strcmp(compare1, compare2);
-+        if (result < 0) {
-+            printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
-+        }
-+        else if (result == 0) {
-+            printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
-+        }
-+        else {
-+            printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
-+        }
-+    } while (strcmp(compare1, "q") != 0);
-+    printf("**** End of Comparing Strings Demo ****\n");
-+    
-+
-+/* Version 3 
-+    printf("**** Start of Searching Strings Demo ****\n");
-+    char haystack[BUFFER_SIZE];
-+    char needle[BUFFER_SIZE];
-+    char* occurrence = NULL;
-+    do {
-+        printf("Type the string (q - to quit):\n");
-+        fgets(haystack, BUFFER_SIZE, stdin);
-+        haystack[strlen(haystack) - 1] = '\0';
-+        if (strcmp(haystack, "q") == 0) {
-+            break;
-+        }
-+        printf("Type the substring:\n");
-+        fgets(needle, BUFFER_SIZE, stdin);
-+        needle[strlen(needle) - 1] = '\0';
-+        occurrence = strstr(haystack, needle);
-+        if (occurrence) {
-+            printf("\"%s\" found at %d position\n", needle, (int)(occurrence - haystack));
-+        }
-+        else {
-+            printf("Not found\n");
-+        }
-+    } while (strcmp(haystack, "q") != 0);
-+    printf("**** End of Searching Strings Demo ****\n");
-+    */
-+}
-\ No newline at end of file
-diff --git a/manipulating.h b/manipulating.h
-new file mode 100644
-index 0000000..fdbd4a4
---- /dev/null
-+++ b/manipulating.h
-@@ -0,0 +1,15 @@
-+#pragma once
-+// MANIPULATING MODULE HEADER
-+#ifndef _MANIPULATING_H_
-+#define _MANIPULATING_H_
-+
-+#include <stdio.h>
-+#include <string.h>
-+
-+#define BUFFER_SIZE 32 // Define a constant for maximum string length
-+
-+// manipulating prototype: Allow users to manipulate string input
-+//Including: string concatenate
-+void manipulating(void);
-+
-+#endif
-\ No newline at end of file
-
-commit 4382fcc46f84af21341f49a0a3d637836ef55795
-Author: xiaohanfu123 <110127564+xiaohanfu123@users.noreply.github.com>
-Date:   Wed Nov 15 22:09:25 2023 -0500
-
-    Initial commit
-
-diff --git a/LICENSE b/LICENSE
-new file mode 100644
-index 0000000..3db340b
---- /dev/null
-+++ b/LICENSE
-@@ -0,0 +1,21 @@
-+MIT License
-+
-+Copyright (c) 2023 xiaohanfu123
-+
-+Permission is hereby granted, free of charge, to any person obtaining a copy
-+of this software and associated documentation files (the "Software"), to deal
-+in the Software without restriction, including without limitation the rights
-+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-+copies of the Software, and to permit persons to whom the Software is
-+furnished to do so, subject to the following conditions:
-+
-+The above copyright notice and this permission notice shall be included in all
-+copies or substantial portions of the Software.
-+
-+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-+SOFTWARE.
-diff --git a/README.md b/README.md
-new file mode 100644
-index 0000000..8a2ba66
---- /dev/null
-+++ b/README.md
-@@ -0,0 +1 @@
-+# CPR101-Final-Project
-\ No newline at end of file
diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
deleted file mode 100644
index e55d243..0000000
Binary files a/manipulating-test-cases.xlsx and /dev/null differ
diff --git a/manipulating-testing.txt b/manipulating-testing.txt
deleted file mode 100644
index 80e1c9d..0000000
--- a/manipulating-testing.txt
+++ /dev/null
@@ -1,182 +0,0 @@
-Manipulating Testing Records
-
--------------- Version 1: String Concatenate -------------------------------
->> Test 1: (Normal case)
-Type the 1st string (q - to quit):
-John
-Type the 2nd string:
- Simith
-Concatenated string is 'John Simith'
-
->> Test 2: (Empty string)
-Type the 1st string (q - to quit):
-
-Type the 2nd string:
-
-Concatenated string is ''
-
->> Test 3: (Edge case)
-Type the 1st string (q - to quit):
-Hi John Smith
-Type the 2nd string:
- Nice to meet you!
-Concatenated string is 'Hi John Smith Nice to meet you!'
-
->> Test 4: (Over-the-edge: string1 over the limit)
-Type the 1st string (q - to quit):
-Hello this is John Smith, Nice to meet you!
-Type the 2nd string:
-Concatenated string is 'Hello this is John Smith, Niceto meet you!'
-
->> Test 5: (Over-the-edge: string2 over the limit)
-Type the 1st string (q - to quit):
-12345
-Type the 2nd string:
-Hi John Smith Nice to meet you!
-Concatenated string is '12345Hi John Smith Nice to meet you'
-
->> Test 6: (Over-the-edge: after concatenation string1 over the limit)
-Type the 1st string (q - to quit):
-Hello this is John Smith,
-Type the 2nd string:
- Nice to meet you!
-Concatenated string is 'Hello this is John Smith, Nice to meet you!'
-
---------------- Version 2: String Comparision -------------------------------
->> Test 1: (Identical)
-Type the 1st string to compare (q - to quit):
-test
-Type the 2nd string to compare:
-test
-"test" string is equal to "test"
-
->> Test 2: (Case sensitive)
-Type the 1st string to compare (q - to quit):
-Test
-Type the 2nd string to compare:
-test
-"Test" string is less than "test"
-
->> Test 3: (Different length)
-Type the 1st string to compare (q - to quit):
-Hello World
-Type the 2nd string to compare:
-Hello
-"Hello World" string is greater than "Hello"
-
->> Test 4: (Compare one empty string)
-Type the 1st string to compare (q - to quit):
-
-Type the 2nd string to compare:
-test
-"" string is less than "test"
-
->> Test 5: (Both string are empty )
-Type the 1st string to compare (q - to quit):
-
-Type the 2nd string to compare:
-
-"" string is equal to ""
-
->> Test 6: (Special characters)
-Type the 1st string to compare (q - to quit):
-@123
-Type the 2nd string to compare:
-$456
-"@123" string is greater than "$456"
-
->> Test 7: (Over-the-edge: compare1 over the limit)
-Type the 1st string to compare (q - to quit):
-Hello this is John Smith, Nice to meet you!
-Type the 2nd string to compare:
-"Hello this is John Smith, Nice" string is less than "to meet you!"
-
->> Test 8: (Over-the-edge: compare2 over the limit)
-Type the 1st string to compare (q - to quit):
-Hello this is John Smith, Nice
-Type the 2nd string to compare:
-Hello this is John Smith, Nice to meet you!
-"Hello this is John Smith, Nice" string is equal to "Hello this is John Smith, Nice"
-Type the 1st string to compare (q - to quit):
-Type the 2nd string to compare:
-
---------------- Version 3: String Search -------------------------------
->> Test 1: (Normal case)
-Type the string (q - to quit):
-Hello World!
-Type the substring:
-World
-"World" found at 6 position
-
->> Test 2: (needle at beginning)
-Type the string (q - to quit):
-Test starts now right?
-Type the substring:
-Test
-"Test" found at 0 position
-
->> Test 3: (needle at end)
-Type the string (q - to quit):
-This is a test
-Type the substring:
-test
-"test" found at 10 position
-
->> Test 4: (needle is single character)
-Type the string (q - to quit):
-Hello World!
-Type the substring:
-o
-"o" found at 4 position
-
->> Test 5: (needle not found)
-Type the string (q - to quit):
-Hello World!
-Type the substring:
-Happy
-Not found
-
->> Test 6: (haystack is empty)
-Type the string (q - to quit):
-
-Type the substring:
-test
-Not found
-
->> Test 7: (needle is empty)
-Type the string (q - to quit):
-test
-Type the substring:
-
-"" found at 0 position
-
->> Test 8: (Both string is empty)
-Type the string (q - to quit):
-
-Type the substring:
-
-"" found at 0 position
-
->> Test 9: (Over-the-edge: haystack over the limit)
-Type the string (q - to quit):
-one two three four five six seven eight nine ten
-Type the substring:
-Not found
-
->> Test 10: (Over-the-edge: haystack over the limit with repeated pattern)
-Type the string (q - to quit):
-two three four two three four two three four two three four
-Type the substring:
-"wo three four two three four" found at 1 position
-
->>Test 11: (Over-the-edge: needle over the limit)
-Type the string (q - to quit):
-four
-Type the substring:
-one two three four five six seven eight nine ten
-Not found
-Type the string (q - to quit):
-Type the substring:
-
-
-
diff --git a/manipulating.c b/manipulating.c
deleted file mode 100644
index 095ec35..0000000
--- a/manipulating.c
+++ /dev/null
@@ -1,153 +0,0 @@
-#define _CRT_SECURE_NO_WARNINGS
-/*
-Author: Jarvinia Zhao
-Email: jzhao169@myseneca.ca
-ID: 143013233
-Date Written: 11-27-2023
-Course: CPR101.NNN
-Final Project
-*/
-
-/* The costomized library "manipulating.h" header file provides :
-    - 2 standard libraies: stdio.h and string.h
-    - Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
-    - Prototype for function manipulating
-*/
-#include "manipulating.h"   
-
-/*
-Function Purpose: This function provides the functionality to manipulate Cstings
-*/
-void manipulating(void) {
-
-/* Version 1 */
-    //------------- Demo of String Concatenate ---------------
-    
-    // Display the staring message for user to understand the purpose of this demo
-    //printf("**** Start of Concatenating Strings Demo ****\n");
-    //// Declare 2 Cstring to store the string for concatenation 
-    //char string1[BUFFER_SIZE]; // first string to store user first input
-    //char string2[BUFFER_SIZE]; // second string to store user second input - concatenate to the end of first string
-    //
-    //// Keep prompt for 2 string input until the user enter q to quit
-    //do {
-    //    // Prompt the user for the first string
-    //    printf("Type the 1st string (q - to quit):\n");
-    //    fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
-    //    // Remove the newline character at the end of the input string
-    //    string1[strlen(string1) - 1] = '\0';
-
-    //    // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
-    //    if (strcmp(string1, "q") == 0) {
-    //        break;
-    //    }
-
-    //    // Prompt the user for the second string
-    //    printf("Type the 2nd string:\n");
-    //    fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
-    //    // Remove the newline character at the end of the input string
-    //    string2[strlen(string2) - 1] = '\0'; 
-
-    //    // Concatenate the string2 to the string1
-    //    strcat(string1, string2);
-    //    // Display the result after concatenation
-    //    printf("Concatenated string is '%s'\n", string1);
-
-    //} while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
-
-    //printf("**** End of Concatenating Strings Demo ****\n");
-
-
-/* Version 2 
-    //------------- Demo of String Comparing ---------------
-
-    // Display the staring message for user to understand the purpose of this demo
-    printf("**** Start of Comparing Strings Demo ****\n");
-
-    // Declare 2 Cstring to store the string for comparison
-    char compare1[BUFFER_SIZE]; // first string to store user first input
-    char compare2[BUFFER_SIZE]; // second string to store user second input
-    int result; // Store the comparison result
-
-    // Keep prompt for 2 string input until the user enter q to quit
-    do {
-        // Prompt the user for the first string
-        printf("Type the 1st string to compare (q - to quit):\n");
-        fgets(compare1, BUFFER_SIZE, stdin); // Read the first input Cstring from user and stores in compare1
-        // Remove the newline character at the end of the input string
-        compare1[strlen(compare1) - 1] = '\0';
-
-        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
-        if (strcmp(compare1, "q") == 0) {
-            break;
-        }
-        // Prompt the user for the second string
-        printf("Type the 2nd string to compare:\n");
-        fgets(compare2, BUFFER_SIZE, stdin); // Read the second input Cstring from user and stores in compare2
-        // Remove the newline character at the end of the input string
-        compare2[strlen(compare2) - 1] = '\0';
-
-        // Compare compare1 with compare2 and store the result to variable reuslt
-        result = strcmp(compare1, compare2);
-
-        // Check the value of reuslt and display corresponding message to user
-        // compare1 < compare2 and output proper message to user
-        if (result < 0) {
-            printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
-        }
-        // compare1 = compare2 and output proper message to user
-        else if (result == 0) {
-            printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
-        }
-        // compare1 > compare2 and output proper message to user
-        else {
-            printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
-        }
-    } while (strcmp(compare1, "q") != 0); // Continue looping until the user enter 'q' for the compare1
-    printf("**** End of Comparing Strings Demo ****\n");
-    */
-    
-
-/* Version 3 */
-    //------------- Demo of String Search ---------------
-
-    // Display the staring message for user to understand the purpose of this demo
-    printf("**** Start of Searching Strings Demo ****\n");
-    char haystack[BUFFER_SIZE]; // string to store user input as a searching library
-    char needle[BUFFER_SIZE];  // string to store user input as a searching keyword
-    char* occurrence = NULL; // variable to store search result, NULL = not found
-    
-    // Keep prompt for 2 string input until the user enter q to quit
-    do {
-        // Prompt the user for the library string
-        printf("Type the string (q - to quit):\n");
-        fgets(haystack, BUFFER_SIZE, stdin); // Read the first input Cstring from user and stores in haystack
-        // Remove the newline character at the end of the input string
-        haystack[strlen(haystack) - 1] = '\0';
-        
-        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
-        if (strcmp(haystack, "q") == 0) {
-            break;
-        }
-        
-        // Prompt the user for the keyword string/substring
-        printf("Type the substring:\n");
-        fgets(needle, BUFFER_SIZE, stdin); // Read the second input Cstring from user and stores in needle
-        // Remove the newline character at the end of the input string
-        needle[strlen(needle) - 1] = '\0';
-
-        //Search the occurrence of needle in haystack and store the result in variable occurance
-        occurrence = strstr(haystack, needle);
-
-        // Check the value of occurence and display corresponding message to user
-        // Found the needle in haystack and give the exact position of needle in haystack
-        if (occurrence) {
-            printf("\"%s\" found at %d position\n", needle, (int)(occurrence - haystack));
-        }
-        else {
-            printf("Not found\n");
-        }
-    } while (strcmp(haystack, "q") != 0);// Continue looping until the user enter 'q' for the haystack
-    printf("**** End of Searching Strings Demo ****\n");
-    
-}
\ No newline at end of file
diff --git a/manipulating.h b/manipulating.h
deleted file mode 100644
index e3dcc7a..0000000
--- a/manipulating.h
+++ /dev/null
@@ -1,17 +0,0 @@
-#pragma once
-// MANIPULATING MODULE HEADER
-#ifndef _MANIPULATING_H_
-#define _MANIPULATING_H_
-
-//All system library needed
-#include <stdio.h>
-#include <string.h>
-
-// Define a constant for maximum length of input string 
-#define BUFFER_SIZE 32
-
-// manipulating prototype: Allow users to manipulate string input
-//Including: string concatenate
-void manipulating(void);
-
-#endif
\ No newline at end of file

commit 2e9568371cfab969dee37ec6615d61c57ca1ee9f
Merge: 6400cfc e832ebf
Author: Jarviniazhao <151060098+Jarviniazhao@users.noreply.github.com>
Date:   Wed Dec 6 18:57:45 2023 -0500

    Merge pull request #5 from xiaohanfu123/manipulating
    
    Recover Manipulating work

commit e832ebf66814f9ab07a69cf499e04a0a468e4718
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Wed Dec 6 18:47:39 2023 -0500

    Tried to recover previous work

diff --git a/tokenizing-test-cases.xlsx b/tokenizing-test-cases.xlsx
deleted file mode 100644
index a5db0a7..0000000
Binary files a/tokenizing-test-cases.xlsx and /dev/null differ
diff --git a/tokenizing.c b/tokenizing.c
deleted file mode 100644
index 6caea55..0000000
--- a/tokenizing.c
+++ /dev/null
@@ -1,64 +0,0 @@
-/*
-Author: Wing Ho Chau
-Email: myseneca@myseneca.ca
-ID: 150924231
-Date Written: 12-1-2023
-Course: CPR101.NNN
-Final Project
-*/
-
-// TOKENIZING MODULE SOURCE
-#define _CRT_SECURE_NO_WARNINGS  
-#define BUFFER_SIZE 300  //Sets how many letters the user can input.
-#include "tokenizing.h"  //includes header file to point libaraies
-
-void tokenizing() {
-	/* Version 1 */
-	//printf("*** Start of Tokenizing Words Demo ***\n");
-	//char words[BUFFER_SIZE];  //words will be used for user input
-	//char* nextWord = NULL;  //nextWord is an array to store the return of tokenized strings.
-	//int wordsCounter;  //wordsCounter will be used to count how many tokenized words are in the delimited input
-
-	//do {
-	//	printf("Type a few words separated by space (q - to quit):\n");
-	//	fgets(words, BUFFER_SIZE, stdin);  //receives input from user and store in words[]
-	//	words[strlen(words) - 1] = '\0';  //Put a null terminator to the end of array
-	//	if (strcmp(words, "q") != 0) {  //Do the tokenizing if user doesn't input 'q'
-	//		nextWord = strtok(words, " ");  //use of tokenizing function to tokenize the word by delimiter 'whitespace'
-	//		wordsCounter = 1;  //Count the words, start with 1
-	//		while (nextWord) {  //A loop for printing tokenized words unless no more are found
-	//			printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord); //Print the tokenized words
-	//			nextWord = strtok(NULL, " ");  //Get the next tokenized words
-	//		}
-	//	}
-	//} while (strcmp(words, "q") != 0);  //infinite loop unless 'q' is input by user
-	//printf("*** End of Tokenizing Words Demo ***\n\n");
-
-
-/* Version 2 */
-//>> insert here
-	printf("*** Start of Tokenizing Words Demo ***\n");
-	char phrases[BUFFER_SIZE];  //phrases will be used for user input and is the argument for 
-	char* nextPhrase = NULL;  //nextPhrase is an array to store the return of tokenized strings.
-	int phrasesCounter;  //phrasesCounter will be used to count how many tokenized phrases are in the delimited input
-
-	do {
-		printf("Type a few words separated by space (q - to quit):\n");
-		fgets(phrases, BUFFER_SIZE, stdin);  //receives input from user and store in phrases[]
-		phrases[strlen(phrases) - 1] = '\0';  //Put a null terminator to the end of array
-		if (strcmp(phrases, "q") != 0) {  //Do the tokenizing if user doesn't input 'q'
-			nextPhrase = strtok(phrases, ",");  //use of tokenizing function to tokenize the input by delimiter ','(comma)
-			phrasesCounter = 1;  //Count the words, start with 1
-			while (nextPhrase) {  //A loop for printing tokenized phrases unless no more are found
-				printf("Phrase #%d is \'%s\'\n", phrasesCounter++, nextPhrase); //Print the tokenized phrases
-				nextPhrase = strtok(NULL, ",");  //Get the next tokenized phrases
-			}
-		}
-	} while (strcmp(phrases, "q") != 0);  //infinite loop unless 'q' is input by user
-	printf("*** End of Tokenizing Words Demo ***\n\n");
-
-/* Version 3 */
-//>> insert here
-
-
-}
\ No newline at end of file
diff --git a/tokenizing.h b/tokenizing.h
deleted file mode 100644
index 62e8745..0000000
--- a/tokenizing.h
+++ /dev/null
@@ -1,7 +0,0 @@
-//TOKENIZING MODULE HEADER
-#ifndef _TOKENIZING_H_
-#define _TOKENIZING_H_
-#include <stdio.h>
-#include <string.h>
-void tokenizing(void);
-#endif
diff --git a/tokenizing_testing.txt b/tokenizing_testing.txt
deleted file mode 100644
index 661a37a..0000000
--- a/tokenizing_testing.txt
+++ /dev/null
@@ -1,107 +0,0 @@
-Tokenizing testing
-
-------Version 1-------
-Test case 1:
-*** Start of Tokenizing Words Demo ***
-Type a few words separated by space (q - to quit):
-Hello World! Today is 11 / 28 / 2023
-Word #1 is 'Hello'
-Word #2 is 'World!'
-Word #3 is 'Today'
-Word #4 is 'is'
-Word #5 is '11'
-Word #6 is '/'
-Word #7 is '28'
-Word #8 is '/'
-Word #9 is '2023'
-Type a few words separated by space (q - to quit):
-
-
-Test case 2:
-Type a few words separated by space (q - to quit):
-
-Type a few words separated by space (q - to quit):
-
-
-Test case 3:
-Type a few words separated by space (q - to quit):
- 
-Type a few words separated by space (q - to quit):
-
-
-Test case 4:
-Type a few words separated by space (q - to quit):
-Hello     World!
-Word #1 is 'Hello'
-Word #2 is 'World!'
-Type a few words separated by space (q - to quit):
-
-
-Test case 5:
-Type a few words separated by space (q - to quit):
-q
-*** End of Tokenizing Words Demo ***
-
-Test case 6:
-Type a few words separated by space (q - to quit):
-q Hello World!
-Word #1 is 'q'
-Word #2 is 'Hello'
-Word #3 is 'World!'
-*** End of Tokenizing Words Demo ***
-
-
-
-------Version 2-------
-Test case 1:
-*** Start of Tokenizing Words Demo ***
-Type a few words separated by space (q - to quit):
-Hello, World!!, 123, 1,2,3
-Phrase #1 is 'Hello'
-Phrase #2 is ' World!!'
-Phrase #3 is ' 123'
-Phrase #4 is ' 1'
-Phrase #5 is '2'
-Phrase #6 is '3'
-Type a few words separated by space (q - to quit):
-
-
-Test case 2:
-Type a few words separated by space (q - to quit):
-Hi123,,,,,,,,,,,,,,,,,Hi123
-Phrase #1 is 'Hi123'
-Phrase #2 is 'Hi123'
-Type a few words separated by space (q - to quit):
-
-
-Test case 3:
-Type a few words separated by space (q - to quit):
-,,,,,,,,,
-Type a few words separated by space (q - to quit):
-
-
-Test case 4:
-Type a few words separated by space (q - to quit):
-1111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110
-Phrase #1 is '1111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111'
-Type a few words separated by space (q - to quit):
-Phrase #1 is '01111111110'
-Type a few words separated by space (q - to quit):
-
-
-Test case 5:
-Type a few words separated by space (q - to quit):
-1111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110,11111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110,1111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110
-Phrase #1 is '1111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110'
-Phrase #2 is '11111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110'
-Phrase #3 is '11111111101111111110111111111011111111101111111110111111111011111111101111111110111111'
-Type a few words separated by space (q - to quit):
-Phrase #1 is '1101111111110'
-Type a few words separated by space (q - to quit):
-
-
-Test case 6:Type a few words separated by space (q - to quit):
-q,123
-Phrase #1 is 'q'
-Phrase #2 is '123'
-*** End of Tokenizing Words Demo ***
\ No newline at end of file

commit 02577d61580a62350365202aafaa158434b7297b
Merge: 648e05e 1126842
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Wed Dec 6 18:45:25 2023 -0500

    Merge branch 'manipulating' of https://github.com/xiaohanfu123/CPR101-Final-Project into manipulating

commit 648e05e6dcb220a8cb9ede39bc923c534b267b9d
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Wed Dec 6 14:04:06 2023 -0500

    General: new log after renaming sheet in test-case.xlsx

diff --git a/manipulating-git-log.txt b/manipulating-git-log.txt
index d31f09c..8b091e6 100644
--- a/manipulating-git-log.txt
+++ b/manipulating-git-log.txt
@@ -1,3 +1,1069 @@
+commit 44cf4ae524920927671da5f49b525f7fe894fe15
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Wed Dec 6 14:02:16 2023 -0500
+
+    General: Delete the example sheet and renamed the test-case sheet
+
+diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
+index 2fa13a7..e55d243 100644
+Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
+
+commit ade68ed792cdc989504fc2205528e57ebffb905b
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Wed Dec 6 13:47:52 2023 -0500
+
+    Version3: Add git log of version3
+
+diff --git a/manipulating-git-log.txt b/manipulating-git-log.txt
+index 7af623f..d31f09c 100644
+--- a/manipulating-git-log.txt
++++ b/manipulating-git-log.txt
+@@ -1,3 +1,1044 @@
++commit cecfd8b0942d30a1248e56d1d1968e2866004398
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Wed Dec 6 13:45:46 2023 -0500
++
++    Version3: Minor format modifications
++
++diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
++index 5449f31..2fa13a7 100644
++Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
++diff --git a/manipulating-testing.txt b/manipulating-testing.txt
++index f73a2bc..80e1c9d 100644
++--- a/manipulating-testing.txt
+++++ b/manipulating-testing.txt
++@@ -1,4 +1,4 @@
++-Manipulating Testing 
+++Manipulating Testing Records
++ 
++ -------------- Version 1: String Concatenate -------------------------------
++ >> Test 1: (Normal case)
++
++commit 5ca8d5a33a8d2db071a1748e1c439a083789c4c7
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Sat Dec 2 21:30:36 2023 -0500
++
++    Version 2: Add one more testing case - one empty string
++
++diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
++index 4990758..5449f31 100644
++Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
++diff --git a/manipulating-testing.txt b/manipulating-testing.txt
++index 57c3364..f73a2bc 100644
++--- a/manipulating-testing.txt
+++++ b/manipulating-testing.txt
++@@ -64,27 +64,34 @@ Type the 2nd string to compare:
++ Hello
++ "Hello World" string is greater than "Hello"
++ 
++->> Test 4: (Empty string)
+++>> Test 4: (Compare one empty string)
+++Type the 1st string to compare (q - to quit):
+++
+++Type the 2nd string to compare:
+++test
+++"" string is less than "test"
+++
+++>> Test 5: (Both string are empty )
++ Type the 1st string to compare (q - to quit):
++ 
++ Type the 2nd string to compare:
++ 
++ "" string is equal to ""
++ 
++->> Test 5: (Special characters)
+++>> Test 6: (Special characters)
++ Type the 1st string to compare (q - to quit):
++ @123
++ Type the 2nd string to compare:
++ $456
++ "@123" string is greater than "$456"
++ 
++->> Test 6: (Over-the-edge: compare1 over the limit)
+++>> Test 7: (Over-the-edge: compare1 over the limit)
++ Type the 1st string to compare (q - to quit):
++ Hello this is John Smith, Nice to meet you!
++ Type the 2nd string to compare:
++ "Hello this is John Smith, Nice" string is less than "to meet you!"
++ 
++->> Test 7: (Over-the-edge: compare2 over the limit)
+++>> Test 8: (Over-the-edge: compare2 over the limit)
++ Type the 1st string to compare (q - to quit):
++ Hello this is John Smith, Nice
++ Type the 2nd string to compare:
++
++commit 4b8535e987cecb5e0dc6519e9aa7a5d8b2e87950
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Sat Dec 2 21:23:39 2023 -0500
++
++    Version 3: Upload testing case records, and modify the format of testing.txt
++
++diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
++index 8058037..4990758 100644
++Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
++diff --git a/manipulating-testing.txt b/manipulating-testing.txt
++index 1d00335..57c3364 100644
++--- a/manipulating-testing.txt
+++++ b/manipulating-testing.txt
++@@ -1,94 +1,175 @@
++ Manipulating Testing 
++ 
++-------Version 1-------
++-Test 1: (Normal case)
+++-------------- Version 1: String Concatenate -------------------------------
+++>> Test 1: (Normal case)
++ Type the 1st string (q - to quit):
++ John
++ Type the 2nd string:
++  Simith
++ Concatenated string is 'John Simith'
++ 
++-Test 2: (Empty string)
+++>> Test 2: (Empty string)
++ Type the 1st string (q - to quit):
++ 
++ Type the 2nd string:
++ 
++ Concatenated string is ''
++ 
++-Test 3: (Edge case)
+++>> Test 3: (Edge case)
++ Type the 1st string (q - to quit):
++ Hi John Smith
++ Type the 2nd string:
++  Nice to meet you!
++ Concatenated string is 'Hi John Smith Nice to meet you!'
++ 
++-Test 4: (Over-the-edge: string1 over the limit)
+++>> Test 4: (Over-the-edge: string1 over the limit)
++ Type the 1st string (q - to quit):
++ Hello this is John Smith, Nice to meet you!
++ Type the 2nd string:
++ Concatenated string is 'Hello this is John Smith, Niceto meet you!'
++ 
++-Test 5: (Over-the-edge: string2 over the limit)
+++>> Test 5: (Over-the-edge: string2 over the limit)
++ Type the 1st string (q - to quit):
++ 12345
++ Type the 2nd string:
++ Hi John Smith Nice to meet you!
++ Concatenated string is '12345Hi John Smith Nice to meet you'
++ 
++-Test 6: (Over-the-edge: after concatenation string1 over the limit)
+++>> Test 6: (Over-the-edge: after concatenation string1 over the limit)
++ Type the 1st string (q - to quit):
++ Hello this is John Smith,
++ Type the 2nd string:
++  Nice to meet you!
++ Concatenated string is 'Hello this is John Smith, Nice to meet you!'
++ 
++-------Version 2-------
++-Test 1: (Identical)
+++--------------- Version 2: String Comparision -------------------------------
+++>> Test 1: (Identical)
++ Type the 1st string to compare (q - to quit):
++ test
++ Type the 2nd string to compare:
++ test
++ "test" string is equal to "test"
++ 
++-Test 2: (Case sensitive)
+++>> Test 2: (Case sensitive)
++ Type the 1st string to compare (q - to quit):
++ Test
++ Type the 2nd string to compare:
++ test
++ "Test" string is less than "test"
++ 
++-Test 3: (Different length)
+++>> Test 3: (Different length)
++ Type the 1st string to compare (q - to quit):
++ Hello World
++ Type the 2nd string to compare:
++ Hello
++ "Hello World" string is greater than "Hello"
++ 
++-Test 4: (Empty string)
+++>> Test 4: (Empty string)
++ Type the 1st string to compare (q - to quit):
++ 
++ Type the 2nd string to compare:
++ 
++ "" string is equal to ""
++ 
++-Test 5: (Special characters)
+++>> Test 5: (Special characters)
++ Type the 1st string to compare (q - to quit):
++ @123
++ Type the 2nd string to compare:
++ $456
++ "@123" string is greater than "$456"
++ 
++-Test 6: (Over-the-edge: compare1 over the limit)
+++>> Test 6: (Over-the-edge: compare1 over the limit)
++ Type the 1st string to compare (q - to quit):
++ Hello this is John Smith, Nice to meet you!
++ Type the 2nd string to compare:
++ "Hello this is John Smith, Nice" string is less than "to meet you!"
++ 
++-Test 7: (Over-the-edge: compare2 over the limit)
+++>> Test 7: (Over-the-edge: compare2 over the limit)
++ Type the 1st string to compare (q - to quit):
++ Hello this is John Smith, Nice
++ Type the 2nd string to compare:
++ Hello this is John Smith, Nice to meet you!
++ "Hello this is John Smith, Nice" string is equal to "Hello this is John Smith, Nice"
++ Type the 1st string to compare (q - to quit):
++-Type the 2nd string to compare:
++\ No newline at end of file
+++Type the 2nd string to compare:
+++
+++--------------- Version 3: String Search -------------------------------
+++>> Test 1: (Normal case)
+++Type the string (q - to quit):
+++Hello World!
+++Type the substring:
+++World
+++"World" found at 6 position
+++
+++>> Test 2: (needle at beginning)
+++Type the string (q - to quit):
+++Test starts now right?
+++Type the substring:
+++Test
+++"Test" found at 0 position
+++
+++>> Test 3: (needle at end)
+++Type the string (q - to quit):
+++This is a test
+++Type the substring:
+++test
+++"test" found at 10 position
+++
+++>> Test 4: (needle is single character)
+++Type the string (q - to quit):
+++Hello World!
+++Type the substring:
+++o
+++"o" found at 4 position
+++
+++>> Test 5: (needle not found)
+++Type the string (q - to quit):
+++Hello World!
+++Type the substring:
+++Happy
+++Not found
+++
+++>> Test 6: (haystack is empty)
+++Type the string (q - to quit):
+++
+++Type the substring:
+++test
+++Not found
+++
+++>> Test 7: (needle is empty)
+++Type the string (q - to quit):
+++test
+++Type the substring:
+++
+++"" found at 0 position
+++
+++>> Test 8: (Both string is empty)
+++Type the string (q - to quit):
+++
+++Type the substring:
+++
+++"" found at 0 position
+++
+++>> Test 9: (Over-the-edge: haystack over the limit)
+++Type the string (q - to quit):
+++one two three four five six seven eight nine ten
+++Type the substring:
+++Not found
+++
+++>> Test 10: (Over-the-edge: haystack over the limit with repeated pattern)
+++Type the string (q - to quit):
+++two three four two three four two three four two three four
+++Type the substring:
+++"wo three four two three four" found at 1 position
+++
+++>>Test 11: (Over-the-edge: needle over the limit)
+++Type the string (q - to quit):
+++four
+++Type the substring:
+++one two three four five six seven eight nine ten
+++Not found
+++Type the string (q - to quit):
+++Type the substring:
+++
+++
+++
++
++commit b70dcc9b0533d13e72fe7be9759f3bdeebd7747d
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Sat Dec 2 21:21:59 2023 -0500
++
++    Version 3: Finish code comments
++
++diff --git a/manipulating.c b/manipulating.c
++index c1f52ee..095ec35 100644
++--- a/manipulating.c
+++++ b/manipulating.c
++@@ -58,7 +58,7 @@ void manipulating(void) {
++     //printf("**** End of Concatenating Strings Demo ****\n");
++ 
++ 
++-/* Version 2 */
+++/* Version 2 
++     //------------- Demo of String Comparing ---------------
++ 
++     // Display the staring message for user to understand the purpose of this demo
++@@ -105,31 +105,49 @@ void manipulating(void) {
++         }
++     } while (strcmp(compare1, "q") != 0); // Continue looping until the user enter 'q' for the compare1
++     printf("**** End of Comparing Strings Demo ****\n");
+++    */
++     
++ 
++ /* Version 3 */
+++    //------------- Demo of String Search ---------------
+++
+++    // Display the staring message for user to understand the purpose of this demo
++     printf("**** Start of Searching Strings Demo ****\n");
++-    char haystack[BUFFER_SIZE];
++-    char needle[BUFFER_SIZE];
++-    char* occurrence = NULL;
+++    char haystack[BUFFER_SIZE]; // string to store user input as a searching library
+++    char needle[BUFFER_SIZE];  // string to store user input as a searching keyword
+++    char* occurrence = NULL; // variable to store search result, NULL = not found
+++    
+++    // Keep prompt for 2 string input until the user enter q to quit
++     do {
+++        // Prompt the user for the library string
++         printf("Type the string (q - to quit):\n");
++-        fgets(haystack, BUFFER_SIZE, stdin);
+++        fgets(haystack, BUFFER_SIZE, stdin); // Read the first input Cstring from user and stores in haystack
+++        // Remove the newline character at the end of the input string
++         haystack[strlen(haystack) - 1] = '\0';
+++        
+++        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
++         if (strcmp(haystack, "q") == 0) {
++             break;
++         }
+++        
+++        // Prompt the user for the keyword string/substring
++         printf("Type the substring:\n");
++-        fgets(needle, BUFFER_SIZE, stdin);
+++        fgets(needle, BUFFER_SIZE, stdin); // Read the second input Cstring from user and stores in needle
+++        // Remove the newline character at the end of the input string
++         needle[strlen(needle) - 1] = '\0';
+++
+++        //Search the occurrence of needle in haystack and store the result in variable occurance
++         occurrence = strstr(haystack, needle);
+++
+++        // Check the value of occurence and display corresponding message to user
+++        // Found the needle in haystack and give the exact position of needle in haystack
++         if (occurrence) {
++             printf("\"%s\" found at %d position\n", needle, (int)(occurrence - haystack));
++         }
++         else {
++             printf("Not found\n");
++         }
++-    } while (strcmp(haystack, "q") != 0);
+++    } while (strcmp(haystack, "q") != 0);// Continue looping until the user enter 'q' for the haystack
++     printf("**** End of Searching Strings Demo ****\n");
++     
++ }
++\ No newline at end of file
++
++commit be760f11843fc5c19823ee5807bad95400b2702f
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Sat Dec 2 19:29:27 2023 -0500
++
++    Version 3: Code without any comments
++
++diff --git a/manipulating.c b/manipulating.c
++index 0e763bf..c1f52ee 100644
++--- a/manipulating.c
+++++ b/manipulating.c
++@@ -107,7 +107,7 @@ void manipulating(void) {
++     printf("**** End of Comparing Strings Demo ****\n");
++     
++ 
++-/* Version 3 
+++/* Version 3 */
++     printf("**** Start of Searching Strings Demo ****\n");
++     char haystack[BUFFER_SIZE];
++     char needle[BUFFER_SIZE];
++@@ -131,5 +131,5 @@ void manipulating(void) {
++         }
++     } while (strcmp(haystack, "q") != 0);
++     printf("**** End of Searching Strings Demo ****\n");
++-    */
+++    
++ }
++\ No newline at end of file
++
++commit 60a339ffd2fcde2efa9b67ff5a315351107677a3
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Sat Dec 2 19:11:51 2023 -0500
++
++    Version 2: upload git log
++
++diff --git a/manipulating-git-log.txt b/manipulating-git-log.txt
++new file mode 100644
++index 0000000..7af623f
++--- /dev/null
+++++ b/manipulating-git-log.txt
++@@ -0,0 +1,643 @@
+++commit 65fd6432ce4b971660a56f7f960f06a714405a9b
+++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+++Date:   Sat Dec 2 19:02:49 2023 -0500
+++
+++    Version 1&2: Correct typos and revise the wording
+++
+++diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
+++index 741f37a..8058037 100644
+++Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
+++
+++commit 4b5197c169be2a959933edfdd976b123ed44f42e
+++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+++Date:   Sat Dec 2 19:01:42 2023 -0500
+++
+++    Header file: Add and revise some comment for easy understanding
+++
+++diff --git a/manipulating.h b/manipulating.h
+++index fdbd4a4..e3dcc7a 100644
+++--- a/manipulating.h
++++++ b/manipulating.h
+++@@ -3,10 +3,12 @@
+++ #ifndef _MANIPULATING_H_
+++ #define _MANIPULATING_H_
+++ 
++++//All system library needed
+++ #include <stdio.h>
+++ #include <string.h>
+++ 
+++-#define BUFFER_SIZE 32 // Define a constant for maximum string length
++++// Define a constant for maximum length of input string 
++++#define BUFFER_SIZE 32
+++ 
+++ // manipulating prototype: Allow users to manipulate string input
+++ //Including: string concatenate
+++
+++commit bccbd7b3a5fbf9465d1852b3dd642777bf3f29ce
+++Merge: 5724194 723cf02
+++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+++Date:   Sat Dec 2 18:58:38 2023 -0500
+++
+++    Merge branch 'manipulating' of https://github.com/xiaohanfu123/CPR101-Final-Project into manipulating
+++
+++commit 5724194a681ef0c8997824b91fc692f6dc29686f
+++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+++Date:   Sat Dec 2 18:57:50 2023 -0500
+++
+++    Version 1&2: Revise some comments to make them easy to understand the codes
+++
+++diff --git a/manipulating.c b/manipulating.c
+++index 31ce090..0e763bf 100644
+++--- a/manipulating.c
++++++ b/manipulating.c
+++@@ -9,9 +9,9 @@ Final Project
+++ */
+++ 
+++ /* The costomized library "manipulating.h" header file provides :
+++-    2 standard libraies: stdio.h and string.h
+++-    Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
+++-    Prototype for function manipulating
++++    - 2 standard libraies: stdio.h and string.h
++++    - Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
++++    - Prototype for function manipulating
+++ */
+++ #include "manipulating.h"   
+++ 
+++@@ -26,10 +26,10 @@ void manipulating(void) {
+++     // Display the staring message for user to understand the purpose of this demo
+++     //printf("**** Start of Concatenating Strings Demo ****\n");
+++     //// Declare 2 Cstring to store the string for concatenation 
+++-    //char string1[BUFFER_SIZE]; // first string 
+++-    //char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
++++    //char string1[BUFFER_SIZE]; // first string to store user first input
++++    //char string2[BUFFER_SIZE]; // second string to store user second input - concatenate to the end of first string
+++     //
+++-    //// Start a loop at least once and will continue until the user enter q to quit
++++    //// Keep prompt for 2 string input until the user enter q to quit
+++     //do {
+++     //    // Prompt the user for the first string
+++     //    printf("Type the 1st string (q - to quit):\n");
+++@@ -65,11 +65,11 @@ void manipulating(void) {
+++     printf("**** Start of Comparing Strings Demo ****\n");
+++ 
+++     // Declare 2 Cstring to store the string for comparison
+++-    char compare1[BUFFER_SIZE]; // first string
+++-    char compare2[BUFFER_SIZE]; // second string
++++    char compare1[BUFFER_SIZE]; // first string to store user first input
++++    char compare2[BUFFER_SIZE]; // second string to store user second input
+++     int result; // Store the comparison result
+++ 
+++-    // Start a loop at least once and will continue until the user enter q to quit
++++    // Keep prompt for 2 string input until the user enter q to quit
+++     do {
+++         // Prompt the user for the first string
+++         printf("Type the 1st string to compare (q - to quit):\n");
+++@@ -91,15 +91,15 @@ void manipulating(void) {
+++         result = strcmp(compare1, compare2);
+++ 
+++         // Check the value of reuslt and display corresponding message to user
+++-        // compare1 < compare2
++++        // compare1 < compare2 and output proper message to user
+++         if (result < 0) {
+++             printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
+++         }
+++-        // compare1 = compare2
++++        // compare1 = compare2 and output proper message to user
+++         else if (result == 0) {
+++             printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
+++         }
+++-        // compare1 > compare2 
++++        // compare1 > compare2 and output proper message to user
+++         else {
+++             printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
+++         }
+++
+++commit 723cf0212615fd781700c1580261a1488b866e62
+++Author: Jarviniazhao <151060098+Jarviniazhao@users.noreply.github.com>
+++Date:   Fri Dec 1 09:30:48 2023 -0500
+++
+++    Add general descriptions of manipulating
+++
+++diff --git a/README.md b/README.md
+++index 8a2ba66..e8b903a 100644
+++--- a/README.md
++++++ b/README.md
+++@@ -1 +1,4 @@
+++-# CPR101-Final-Project
+++\ No newline at end of file
++++# CPR101-Final-Project
++++
++++- Manipulating <br />
++++    This function provides the functionality to manipulate Cstings including 3 versions: string concatenation, comparison, and searching
+++
+++commit 259290768c7d6f4affc068cf206f83183da7ecb6
+++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+++Date:   Fri Dec 1 08:33:26 2023 -0500
+++
+++    Version 2: Comment out version1 code for testing version2 only
+++
+++diff --git a/manipulating.c b/manipulating.c
+++index e57d2ae..31ce090 100644
+++--- a/manipulating.c
++++++ b/manipulating.c
+++@@ -19,42 +19,43 @@ Final Project
+++ Function Purpose: This function provides the functionality to manipulate Cstings
+++ */
+++ void manipulating(void) {
++++
+++ /* Version 1 */
+++     //------------- Demo of String Concatenate ---------------
+++     
+++     // Display the staring message for user to understand the purpose of this demo
+++-    printf("**** Start of Concatenating Strings Demo ****\n");
+++-    // Declare 2 Cstring to store the string for concatenation 
+++-    char string1[BUFFER_SIZE]; // first string 
+++-    char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
+++-    
+++-    // Start a loop at least once and will continue until the user enter q to quit
+++-    do {
+++-        // Prompt the user for the first string
+++-        printf("Type the 1st string (q - to quit):\n");
+++-        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
+++-        // Remove the newline character at the end of the input string
+++-        string1[strlen(string1) - 1] = '\0';
+++-
+++-        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
+++-        if (strcmp(string1, "q") == 0) {
+++-            break;
+++-        }
+++-
+++-        // Prompt the user for the second string
+++-        printf("Type the 2nd string:\n");
+++-        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
+++-        // Remove the newline character at the end of the input string
+++-        string2[strlen(string2) - 1] = '\0'; 
+++-
+++-        // Concatenate the string2 to the string1
+++-        strcat(string1, string2);
+++-        // Display the result after concatenation
+++-        printf("Concatenated string is '%s'\n", string1);
+++-
+++-    } while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
+++-
+++-    printf("**** End of Concatenating Strings Demo ****\n");
++++    //printf("**** Start of Concatenating Strings Demo ****\n");
++++    //// Declare 2 Cstring to store the string for concatenation 
++++    //char string1[BUFFER_SIZE]; // first string 
++++    //char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
++++    //
++++    //// Start a loop at least once and will continue until the user enter q to quit
++++    //do {
++++    //    // Prompt the user for the first string
++++    //    printf("Type the 1st string (q - to quit):\n");
++++    //    fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
++++    //    // Remove the newline character at the end of the input string
++++    //    string1[strlen(string1) - 1] = '\0';
++++
++++    //    // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
++++    //    if (strcmp(string1, "q") == 0) {
++++    //        break;
++++    //    }
++++
++++    //    // Prompt the user for the second string
++++    //    printf("Type the 2nd string:\n");
++++    //    fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
++++    //    // Remove the newline character at the end of the input string
++++    //    string2[strlen(string2) - 1] = '\0'; 
++++
++++    //    // Concatenate the string2 to the string1
++++    //    strcat(string1, string2);
++++    //    // Display the result after concatenation
++++    //    printf("Concatenated string is '%s'\n", string1);
++++
++++    //} while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
++++
++++    //printf("**** End of Concatenating Strings Demo ****\n");
+++ 
+++ 
+++ /* Version 2 */
+++
+++commit 99c9ceef9a88f431213291029a49e438562858bd
+++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+++Date:   Thu Nov 30 23:45:15 2023 -0500
+++
+++    Version 2: Finish testing with 7 cases with actual output and case report
+++
+++diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
+++index 2a6351e..741f37a 100644
+++Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
+++diff --git a/manipulating-testing.txt b/manipulating-testing.txt
+++index 3cf3d34..1d00335 100644
+++--- a/manipulating-testing.txt
++++++ b/manipulating-testing.txt
+++@@ -42,3 +42,53 @@ Type the 2nd string:
+++  Nice to meet you!
+++ Concatenated string is 'Hello this is John Smith, Nice to meet you!'
+++ 
++++------Version 2-------
++++Test 1: (Identical)
++++Type the 1st string to compare (q - to quit):
++++test
++++Type the 2nd string to compare:
++++test
++++"test" string is equal to "test"
++++
++++Test 2: (Case sensitive)
++++Type the 1st string to compare (q - to quit):
++++Test
++++Type the 2nd string to compare:
++++test
++++"Test" string is less than "test"
++++
++++Test 3: (Different length)
++++Type the 1st string to compare (q - to quit):
++++Hello World
++++Type the 2nd string to compare:
++++Hello
++++"Hello World" string is greater than "Hello"
++++
++++Test 4: (Empty string)
++++Type the 1st string to compare (q - to quit):
++++
++++Type the 2nd string to compare:
++++
++++"" string is equal to ""
++++
++++Test 5: (Special characters)
++++Type the 1st string to compare (q - to quit):
++++@123
++++Type the 2nd string to compare:
++++$456
++++"@123" string is greater than "$456"
++++
++++Test 6: (Over-the-edge: compare1 over the limit)
++++Type the 1st string to compare (q - to quit):
++++Hello this is John Smith, Nice to meet you!
++++Type the 2nd string to compare:
++++"Hello this is John Smith, Nice" string is less than "to meet you!"
++++
++++Test 7: (Over-the-edge: compare2 over the limit)
++++Type the 1st string to compare (q - to quit):
++++Hello this is John Smith, Nice
++++Type the 2nd string to compare:
++++Hello this is John Smith, Nice to meet you!
++++"Hello this is John Smith, Nice" string is equal to "Hello this is John Smith, Nice"
++++Type the 1st string to compare (q - to quit):
++++Type the 2nd string to compare:
+++\ No newline at end of file
+++
+++commit e1419a3e16637354960b9e5ad4878737841c65c4
+++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+++Date:   Tue Nov 28 21:02:47 2023 -0500
+++
+++    Version 2: Finish comments 1.0
+++
+++diff --git a/manipulating.c b/manipulating.c
+++index caa2d08..e57d2ae 100644
+++--- a/manipulating.c
++++++ b/manipulating.c
+++@@ -32,7 +32,7 @@ void manipulating(void) {
+++     do {
+++         // Prompt the user for the first string
+++         printf("Type the 1st string (q - to quit):\n");
+++-        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user
++++        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
+++         // Remove the newline character at the end of the input string
+++         string1[strlen(string1) - 1] = '\0';
+++ 
+++@@ -43,7 +43,7 @@ void manipulating(void) {
+++ 
+++         // Prompt the user for the second string
+++         printf("Type the 2nd string:\n");
+++-        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user
++++        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
+++         // Remove the newline character at the end of the input string
+++         string2[strlen(string2) - 1] = '\0'; 
+++ 
+++@@ -58,31 +58,51 @@ void manipulating(void) {
+++ 
+++ 
+++ /* Version 2 */
++++    //------------- Demo of String Comparing ---------------
++++
++++    // Display the staring message for user to understand the purpose of this demo
+++     printf("**** Start of Comparing Strings Demo ****\n");
+++-    char compare1[BUFFER_SIZE];
+++-    char compare2[BUFFER_SIZE];
+++-    int result;
++++
++++    // Declare 2 Cstring to store the string for comparison
++++    char compare1[BUFFER_SIZE]; // first string
++++    char compare2[BUFFER_SIZE]; // second string
++++    int result; // Store the comparison result
++++
++++    // Start a loop at least once and will continue until the user enter q to quit
+++     do {
++++        // Prompt the user for the first string
+++         printf("Type the 1st string to compare (q - to quit):\n");
+++-        fgets(compare1, BUFFER_SIZE, stdin);
++++        fgets(compare1, BUFFER_SIZE, stdin); // Read the first input Cstring from user and stores in compare1
++++        // Remove the newline character at the end of the input string
+++         compare1[strlen(compare1) - 1] = '\0';
++++
++++        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
+++         if (strcmp(compare1, "q") == 0) {
+++             break;
+++         }
++++        // Prompt the user for the second string
+++         printf("Type the 2nd string to compare:\n");
+++-        fgets(compare2, BUFFER_SIZE, stdin);
++++        fgets(compare2, BUFFER_SIZE, stdin); // Read the second input Cstring from user and stores in compare2
++++        // Remove the newline character at the end of the input string
+++         compare2[strlen(compare2) - 1] = '\0';
++++
++++        // Compare compare1 with compare2 and store the result to variable reuslt
+++         result = strcmp(compare1, compare2);
++++
++++        // Check the value of reuslt and display corresponding message to user
++++        // compare1 < compare2
+++         if (result < 0) {
+++             printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
+++         }
++++        // compare1 = compare2
+++         else if (result == 0) {
+++             printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
+++         }
++++        // compare1 > compare2 
+++         else {
+++             printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
+++         }
+++-    } while (strcmp(compare1, "q") != 0);
++++    } while (strcmp(compare1, "q") != 0); // Continue looping until the user enter 'q' for the compare1
+++     printf("**** End of Comparing Strings Demo ****\n");
+++     
+++ 
+++
+++commit 63486a4aa9da65f01fe5b158a7a62d3683e27e23
+++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+++Date:   Tue Nov 28 20:48:36 2023 -0500
+++
+++    Correct a comment for Version 1, which was put for wrong code
+++
+++diff --git a/manipulating.c b/manipulating.c
+++index 58a46ce..caa2d08 100644
+++--- a/manipulating.c
++++++ b/manipulating.c
+++@@ -43,9 +43,9 @@ void manipulating(void) {
+++ 
+++         // Prompt the user for the second string
+++         printf("Type the 2nd string:\n");
+++-        fgets(string2, BUFFER_SIZE, stdin);
++++        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user
+++         // Remove the newline character at the end of the input string
+++-        string2[strlen(string2) - 1] = '\0'; // Read the second input string from user
++++        string2[strlen(string2) - 1] = '\0'; 
+++ 
+++         // Concatenate the string2 to the string1
+++         strcat(string1, string2);
+++
+++commit 13220bd1bfb31415bbed9664fd1e9fb3796c0525
+++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+++Date:   Tue Nov 28 20:27:55 2023 -0500
+++
+++    Adding completed work of version 1 for manipulating
+++
+++diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
+++new file mode 100644
+++index 0000000..2a6351e
+++Binary files /dev/null and b/manipulating-test-cases.xlsx differ
+++diff --git a/manipulating-testing.txt b/manipulating-testing.txt
+++new file mode 100644
+++index 0000000..3cf3d34
+++--- /dev/null
++++++ b/manipulating-testing.txt
+++@@ -0,0 +1,44 @@
++++Manipulating Testing 
++++
++++------Version 1-------
++++Test 1: (Normal case)
++++Type the 1st string (q - to quit):
++++John
++++Type the 2nd string:
++++ Simith
++++Concatenated string is 'John Simith'
++++
++++Test 2: (Empty string)
++++Type the 1st string (q - to quit):
++++
++++Type the 2nd string:
++++
++++Concatenated string is ''
++++
++++Test 3: (Edge case)
++++Type the 1st string (q - to quit):
++++Hi John Smith
++++Type the 2nd string:
++++ Nice to meet you!
++++Concatenated string is 'Hi John Smith Nice to meet you!'
++++
++++Test 4: (Over-the-edge: string1 over the limit)
++++Type the 1st string (q - to quit):
++++Hello this is John Smith, Nice to meet you!
++++Type the 2nd string:
++++Concatenated string is 'Hello this is John Smith, Niceto meet you!'
++++
++++Test 5: (Over-the-edge: string2 over the limit)
++++Type the 1st string (q - to quit):
++++12345
++++Type the 2nd string:
++++Hi John Smith Nice to meet you!
++++Concatenated string is '12345Hi John Smith Nice to meet you'
++++
++++Test 6: (Over-the-edge: after concatenation string1 over the limit)
++++Type the 1st string (q - to quit):
++++Hello this is John Smith,
++++Type the 2nd string:
++++ Nice to meet you!
++++Concatenated string is 'Hello this is John Smith, Nice to meet you!'
++++
+++diff --git a/manipulating.c b/manipulating.c
+++new file mode 100644
+++index 0000000..58a46ce
+++--- /dev/null
++++++ b/manipulating.c
+++@@ -0,0 +1,114 @@
++++#define _CRT_SECURE_NO_WARNINGS
++++/*
++++Author: Jarvinia Zhao
++++Email: jzhao169@myseneca.ca
++++ID: 143013233
++++Date Written: 11-27-2023
++++Course: CPR101.NNN
++++Final Project
++++*/
++++
++++/* The costomized library "manipulating.h" header file provides :
++++    2 standard libraies: stdio.h and string.h
++++    Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
++++    Prototype for function manipulating
++++*/
++++#include "manipulating.h"   
++++
++++/*
++++Function Purpose: This function provides the functionality to manipulate Cstings
++++*/
++++void manipulating(void) {
++++/* Version 1 */
++++    //------------- Demo of String Concatenate ---------------
++++    
++++    // Display the staring message for user to understand the purpose of this demo
++++    printf("**** Start of Concatenating Strings Demo ****\n");
++++    // Declare 2 Cstring to store the string for concatenation 
++++    char string1[BUFFER_SIZE]; // first string 
++++    char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
++++    
++++    // Start a loop at least once and will continue until the user enter q to quit
++++    do {
++++        // Prompt the user for the first string
++++        printf("Type the 1st string (q - to quit):\n");
++++        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user
++++        // Remove the newline character at the end of the input string
++++        string1[strlen(string1) - 1] = '\0';
++++
++++        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
++++        if (strcmp(string1, "q") == 0) {
++++            break;
++++        }
++++
++++        // Prompt the user for the second string
++++        printf("Type the 2nd string:\n");
++++        fgets(string2, BUFFER_SIZE, stdin);
++++        // Remove the newline character at the end of the input string
++++        string2[strlen(string2) - 1] = '\0'; // Read the second input string from user
++++
++++        // Concatenate the string2 to the string1
++++        strcat(string1, string2);
++++        // Display the result after concatenation
++++        printf("Concatenated string is '%s'\n", string1);
++++
++++    } while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
++++
++++    printf("**** End of Concatenating Strings Demo ****\n");
++++
++++
++++/* Version 2 */
++++    printf("**** Start of Comparing Strings Demo ****\n");
++++    char compare1[BUFFER_SIZE];
++++    char compare2[BUFFER_SIZE];
++++    int result;
++++    do {
++++        printf("Type the 1st string to compare (q - to quit):\n");
++++        fgets(compare1, BUFFER_SIZE, stdin);
++++        compare1[strlen(compare1) - 1] = '\0';
++++        if (strcmp(compare1, "q") == 0) {
++++            break;
++++        }
++++        printf("Type the 2nd string to compare:\n");
++++        fgets(compare2, BUFFER_SIZE, stdin);
++++        compare2[strlen(compare2) - 1] = '\0';
++++        result = strcmp(compare1, compare2);
++++        if (result < 0) {
++++            printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
++++        }
++++        else if (result == 0) {
++++            printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
++++        }
++++        else {
++++            printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
++++        }
++++    } while (strcmp(compare1, "q") != 0);
++++    printf("**** End of Comparing Strings Demo ****\n");
++++    
++++
++++/* Version 3 
++++    printf("**** Start of Searching Strings Demo ****\n");
++++    char haystack[BUFFER_SIZE];
++++    char needle[BUFFER_SIZE];
++++    char* occurrence = NULL;
++++    do {
++++        printf("Type the string (q - to quit):\n");
++++        fgets(haystack, BUFFER_SIZE, stdin);
++++        haystack[strlen(haystack) - 1] = '\0';
++++        if (strcmp(haystack, "q") == 0) {
++++            break;
++++        }
++++        printf("Type the substring:\n");
++++        fgets(needle, BUFFER_SIZE, stdin);
++++        needle[strlen(needle) - 1] = '\0';
++++        occurrence = strstr(haystack, needle);
++++        if (occurrence) {
++++            printf("\"%s\" found at %d position\n", needle, (int)(occurrence - haystack));
++++        }
++++        else {
++++            printf("Not found\n");
++++        }
++++    } while (strcmp(haystack, "q") != 0);
++++    printf("**** End of Searching Strings Demo ****\n");
++++    */
++++}
+++\ No newline at end of file
+++diff --git a/manipulating.h b/manipulating.h
+++new file mode 100644
+++index 0000000..fdbd4a4
+++--- /dev/null
++++++ b/manipulating.h
+++@@ -0,0 +1,15 @@
++++#pragma once
++++// MANIPULATING MODULE HEADER
++++#ifndef _MANIPULATING_H_
++++#define _MANIPULATING_H_
++++
++++#include <stdio.h>
++++#include <string.h>
++++
++++#define BUFFER_SIZE 32 // Define a constant for maximum string length
++++
++++// manipulating prototype: Allow users to manipulate string input
++++//Including: string concatenate
++++void manipulating(void);
++++
++++#endif
+++\ No newline at end of file
+++
+++commit 4382fcc46f84af21341f49a0a3d637836ef55795
+++Author: xiaohanfu123 <110127564+xiaohanfu123@users.noreply.github.com>
+++Date:   Wed Nov 15 22:09:25 2023 -0500
+++
+++    Initial commit
+++
+++diff --git a/LICENSE b/LICENSE
+++new file mode 100644
+++index 0000000..3db340b
+++--- /dev/null
++++++ b/LICENSE
+++@@ -0,0 +1,21 @@
++++MIT License
++++
++++Copyright (c) 2023 xiaohanfu123
++++
++++Permission is hereby granted, free of charge, to any person obtaining a copy
++++of this software and associated documentation files (the "Software"), to deal
++++in the Software without restriction, including without limitation the rights
++++to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
++++copies of the Software, and to permit persons to whom the Software is
++++furnished to do so, subject to the following conditions:
++++
++++The above copyright notice and this permission notice shall be included in all
++++copies or substantial portions of the Software.
++++
++++THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
++++IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
++++FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
++++AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
++++LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
++++OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
++++SOFTWARE.
+++diff --git a/README.md b/README.md
+++new file mode 100644
+++index 0000000..8a2ba66
+++--- /dev/null
++++++ b/README.md
+++@@ -0,0 +1 @@
++++# CPR101-Final-Project
+++\ No newline at end of file
++
+ commit 65fd6432ce4b971660a56f7f960f06a714405a9b
+ Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+ Date:   Sat Dec 2 19:02:49 2023 -0500
+
 commit cecfd8b0942d30a1248e56d1d1968e2866004398
 Author: Jarvinia Zhao <jzhao169@myseneca.ca>
 Date:   Wed Dec 6 13:45:46 2023 -0500

commit 2348cb1b4f447520732d51d1eb22136e8aa7ee6d
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Wed Dec 6 14:02:16 2023 -0500

    General: Delete the example sheet and renamed the test-case sheet

diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
index 2fa13a7..e55d243 100644
Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ

commit 9ca6cf295979254f46c8c7f09d2d6456a5eb87fd
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Wed Dec 6 13:47:52 2023 -0500

    Version3: Add git log of version3

diff --git a/manipulating-git-log.txt b/manipulating-git-log.txt
index 7af623f..d31f09c 100644
--- a/manipulating-git-log.txt
+++ b/manipulating-git-log.txt
@@ -1,3 +1,1044 @@
+commit cecfd8b0942d30a1248e56d1d1968e2866004398
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Wed Dec 6 13:45:46 2023 -0500
+
+    Version3: Minor format modifications
+
+diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
+index 5449f31..2fa13a7 100644
+Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
+diff --git a/manipulating-testing.txt b/manipulating-testing.txt
+index f73a2bc..80e1c9d 100644
+--- a/manipulating-testing.txt
++++ b/manipulating-testing.txt
+@@ -1,4 +1,4 @@
+-Manipulating Testing 
++Manipulating Testing Records
+ 
+ -------------- Version 1: String Concatenate -------------------------------
+ >> Test 1: (Normal case)
+
+commit 5ca8d5a33a8d2db071a1748e1c439a083789c4c7
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Sat Dec 2 21:30:36 2023 -0500
+
+    Version 2: Add one more testing case - one empty string
+
+diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
+index 4990758..5449f31 100644
+Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
+diff --git a/manipulating-testing.txt b/manipulating-testing.txt
+index 57c3364..f73a2bc 100644
+--- a/manipulating-testing.txt
++++ b/manipulating-testing.txt
+@@ -64,27 +64,34 @@ Type the 2nd string to compare:
+ Hello
+ "Hello World" string is greater than "Hello"
+ 
+->> Test 4: (Empty string)
++>> Test 4: (Compare one empty string)
++Type the 1st string to compare (q - to quit):
++
++Type the 2nd string to compare:
++test
++"" string is less than "test"
++
++>> Test 5: (Both string are empty )
+ Type the 1st string to compare (q - to quit):
+ 
+ Type the 2nd string to compare:
+ 
+ "" string is equal to ""
+ 
+->> Test 5: (Special characters)
++>> Test 6: (Special characters)
+ Type the 1st string to compare (q - to quit):
+ @123
+ Type the 2nd string to compare:
+ $456
+ "@123" string is greater than "$456"
+ 
+->> Test 6: (Over-the-edge: compare1 over the limit)
++>> Test 7: (Over-the-edge: compare1 over the limit)
+ Type the 1st string to compare (q - to quit):
+ Hello this is John Smith, Nice to meet you!
+ Type the 2nd string to compare:
+ "Hello this is John Smith, Nice" string is less than "to meet you!"
+ 
+->> Test 7: (Over-the-edge: compare2 over the limit)
++>> Test 8: (Over-the-edge: compare2 over the limit)
+ Type the 1st string to compare (q - to quit):
+ Hello this is John Smith, Nice
+ Type the 2nd string to compare:
+
+commit 4b8535e987cecb5e0dc6519e9aa7a5d8b2e87950
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Sat Dec 2 21:23:39 2023 -0500
+
+    Version 3: Upload testing case records, and modify the format of testing.txt
+
+diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
+index 8058037..4990758 100644
+Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
+diff --git a/manipulating-testing.txt b/manipulating-testing.txt
+index 1d00335..57c3364 100644
+--- a/manipulating-testing.txt
++++ b/manipulating-testing.txt
+@@ -1,94 +1,175 @@
+ Manipulating Testing 
+ 
+-------Version 1-------
+-Test 1: (Normal case)
++-------------- Version 1: String Concatenate -------------------------------
++>> Test 1: (Normal case)
+ Type the 1st string (q - to quit):
+ John
+ Type the 2nd string:
+  Simith
+ Concatenated string is 'John Simith'
+ 
+-Test 2: (Empty string)
++>> Test 2: (Empty string)
+ Type the 1st string (q - to quit):
+ 
+ Type the 2nd string:
+ 
+ Concatenated string is ''
+ 
+-Test 3: (Edge case)
++>> Test 3: (Edge case)
+ Type the 1st string (q - to quit):
+ Hi John Smith
+ Type the 2nd string:
+  Nice to meet you!
+ Concatenated string is 'Hi John Smith Nice to meet you!'
+ 
+-Test 4: (Over-the-edge: string1 over the limit)
++>> Test 4: (Over-the-edge: string1 over the limit)
+ Type the 1st string (q - to quit):
+ Hello this is John Smith, Nice to meet you!
+ Type the 2nd string:
+ Concatenated string is 'Hello this is John Smith, Niceto meet you!'
+ 
+-Test 5: (Over-the-edge: string2 over the limit)
++>> Test 5: (Over-the-edge: string2 over the limit)
+ Type the 1st string (q - to quit):
+ 12345
+ Type the 2nd string:
+ Hi John Smith Nice to meet you!
+ Concatenated string is '12345Hi John Smith Nice to meet you'
+ 
+-Test 6: (Over-the-edge: after concatenation string1 over the limit)
++>> Test 6: (Over-the-edge: after concatenation string1 over the limit)
+ Type the 1st string (q - to quit):
+ Hello this is John Smith,
+ Type the 2nd string:
+  Nice to meet you!
+ Concatenated string is 'Hello this is John Smith, Nice to meet you!'
+ 
+-------Version 2-------
+-Test 1: (Identical)
++--------------- Version 2: String Comparision -------------------------------
++>> Test 1: (Identical)
+ Type the 1st string to compare (q - to quit):
+ test
+ Type the 2nd string to compare:
+ test
+ "test" string is equal to "test"
+ 
+-Test 2: (Case sensitive)
++>> Test 2: (Case sensitive)
+ Type the 1st string to compare (q - to quit):
+ Test
+ Type the 2nd string to compare:
+ test
+ "Test" string is less than "test"
+ 
+-Test 3: (Different length)
++>> Test 3: (Different length)
+ Type the 1st string to compare (q - to quit):
+ Hello World
+ Type the 2nd string to compare:
+ Hello
+ "Hello World" string is greater than "Hello"
+ 
+-Test 4: (Empty string)
++>> Test 4: (Empty string)
+ Type the 1st string to compare (q - to quit):
+ 
+ Type the 2nd string to compare:
+ 
+ "" string is equal to ""
+ 
+-Test 5: (Special characters)
++>> Test 5: (Special characters)
+ Type the 1st string to compare (q - to quit):
+ @123
+ Type the 2nd string to compare:
+ $456
+ "@123" string is greater than "$456"
+ 
+-Test 6: (Over-the-edge: compare1 over the limit)
++>> Test 6: (Over-the-edge: compare1 over the limit)
+ Type the 1st string to compare (q - to quit):
+ Hello this is John Smith, Nice to meet you!
+ Type the 2nd string to compare:
+ "Hello this is John Smith, Nice" string is less than "to meet you!"
+ 
+-Test 7: (Over-the-edge: compare2 over the limit)
++>> Test 7: (Over-the-edge: compare2 over the limit)
+ Type the 1st string to compare (q - to quit):
+ Hello this is John Smith, Nice
+ Type the 2nd string to compare:
+ Hello this is John Smith, Nice to meet you!
+ "Hello this is John Smith, Nice" string is equal to "Hello this is John Smith, Nice"
+ Type the 1st string to compare (q - to quit):
+-Type the 2nd string to compare:
+\ No newline at end of file
++Type the 2nd string to compare:
++
++--------------- Version 3: String Search -------------------------------
++>> Test 1: (Normal case)
++Type the string (q - to quit):
++Hello World!
++Type the substring:
++World
++"World" found at 6 position
++
++>> Test 2: (needle at beginning)
++Type the string (q - to quit):
++Test starts now right?
++Type the substring:
++Test
++"Test" found at 0 position
++
++>> Test 3: (needle at end)
++Type the string (q - to quit):
++This is a test
++Type the substring:
++test
++"test" found at 10 position
++
++>> Test 4: (needle is single character)
++Type the string (q - to quit):
++Hello World!
++Type the substring:
++o
++"o" found at 4 position
++
++>> Test 5: (needle not found)
++Type the string (q - to quit):
++Hello World!
++Type the substring:
++Happy
++Not found
++
++>> Test 6: (haystack is empty)
++Type the string (q - to quit):
++
++Type the substring:
++test
++Not found
++
++>> Test 7: (needle is empty)
++Type the string (q - to quit):
++test
++Type the substring:
++
++"" found at 0 position
++
++>> Test 8: (Both string is empty)
++Type the string (q - to quit):
++
++Type the substring:
++
++"" found at 0 position
++
++>> Test 9: (Over-the-edge: haystack over the limit)
++Type the string (q - to quit):
++one two three four five six seven eight nine ten
++Type the substring:
++Not found
++
++>> Test 10: (Over-the-edge: haystack over the limit with repeated pattern)
++Type the string (q - to quit):
++two three four two three four two three four two three four
++Type the substring:
++"wo three four two three four" found at 1 position
++
++>>Test 11: (Over-the-edge: needle over the limit)
++Type the string (q - to quit):
++four
++Type the substring:
++one two three four five six seven eight nine ten
++Not found
++Type the string (q - to quit):
++Type the substring:
++
++
++
+
+commit b70dcc9b0533d13e72fe7be9759f3bdeebd7747d
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Sat Dec 2 21:21:59 2023 -0500
+
+    Version 3: Finish code comments
+
+diff --git a/manipulating.c b/manipulating.c
+index c1f52ee..095ec35 100644
+--- a/manipulating.c
++++ b/manipulating.c
+@@ -58,7 +58,7 @@ void manipulating(void) {
+     //printf("**** End of Concatenating Strings Demo ****\n");
+ 
+ 
+-/* Version 2 */
++/* Version 2 
+     //------------- Demo of String Comparing ---------------
+ 
+     // Display the staring message for user to understand the purpose of this demo
+@@ -105,31 +105,49 @@ void manipulating(void) {
+         }
+     } while (strcmp(compare1, "q") != 0); // Continue looping until the user enter 'q' for the compare1
+     printf("**** End of Comparing Strings Demo ****\n");
++    */
+     
+ 
+ /* Version 3 */
++    //------------- Demo of String Search ---------------
++
++    // Display the staring message for user to understand the purpose of this demo
+     printf("**** Start of Searching Strings Demo ****\n");
+-    char haystack[BUFFER_SIZE];
+-    char needle[BUFFER_SIZE];
+-    char* occurrence = NULL;
++    char haystack[BUFFER_SIZE]; // string to store user input as a searching library
++    char needle[BUFFER_SIZE];  // string to store user input as a searching keyword
++    char* occurrence = NULL; // variable to store search result, NULL = not found
++    
++    // Keep prompt for 2 string input until the user enter q to quit
+     do {
++        // Prompt the user for the library string
+         printf("Type the string (q - to quit):\n");
+-        fgets(haystack, BUFFER_SIZE, stdin);
++        fgets(haystack, BUFFER_SIZE, stdin); // Read the first input Cstring from user and stores in haystack
++        // Remove the newline character at the end of the input string
+         haystack[strlen(haystack) - 1] = '\0';
++        
++        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
+         if (strcmp(haystack, "q") == 0) {
+             break;
+         }
++        
++        // Prompt the user for the keyword string/substring
+         printf("Type the substring:\n");
+-        fgets(needle, BUFFER_SIZE, stdin);
++        fgets(needle, BUFFER_SIZE, stdin); // Read the second input Cstring from user and stores in needle
++        // Remove the newline character at the end of the input string
+         needle[strlen(needle) - 1] = '\0';
++
++        //Search the occurrence of needle in haystack and store the result in variable occurance
+         occurrence = strstr(haystack, needle);
++
++        // Check the value of occurence and display corresponding message to user
++        // Found the needle in haystack and give the exact position of needle in haystack
+         if (occurrence) {
+             printf("\"%s\" found at %d position\n", needle, (int)(occurrence - haystack));
+         }
+         else {
+             printf("Not found\n");
+         }
+-    } while (strcmp(haystack, "q") != 0);
++    } while (strcmp(haystack, "q") != 0);// Continue looping until the user enter 'q' for the haystack
+     printf("**** End of Searching Strings Demo ****\n");
+     
+ }
+\ No newline at end of file
+
+commit be760f11843fc5c19823ee5807bad95400b2702f
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Sat Dec 2 19:29:27 2023 -0500
+
+    Version 3: Code without any comments
+
+diff --git a/manipulating.c b/manipulating.c
+index 0e763bf..c1f52ee 100644
+--- a/manipulating.c
++++ b/manipulating.c
+@@ -107,7 +107,7 @@ void manipulating(void) {
+     printf("**** End of Comparing Strings Demo ****\n");
+     
+ 
+-/* Version 3 
++/* Version 3 */
+     printf("**** Start of Searching Strings Demo ****\n");
+     char haystack[BUFFER_SIZE];
+     char needle[BUFFER_SIZE];
+@@ -131,5 +131,5 @@ void manipulating(void) {
+         }
+     } while (strcmp(haystack, "q") != 0);
+     printf("**** End of Searching Strings Demo ****\n");
+-    */
++    
+ }
+\ No newline at end of file
+
+commit 60a339ffd2fcde2efa9b67ff5a315351107677a3
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Sat Dec 2 19:11:51 2023 -0500
+
+    Version 2: upload git log
+
+diff --git a/manipulating-git-log.txt b/manipulating-git-log.txt
+new file mode 100644
+index 0000000..7af623f
+--- /dev/null
++++ b/manipulating-git-log.txt
+@@ -0,0 +1,643 @@
++commit 65fd6432ce4b971660a56f7f960f06a714405a9b
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Sat Dec 2 19:02:49 2023 -0500
++
++    Version 1&2: Correct typos and revise the wording
++
++diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
++index 741f37a..8058037 100644
++Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
++
++commit 4b5197c169be2a959933edfdd976b123ed44f42e
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Sat Dec 2 19:01:42 2023 -0500
++
++    Header file: Add and revise some comment for easy understanding
++
++diff --git a/manipulating.h b/manipulating.h
++index fdbd4a4..e3dcc7a 100644
++--- a/manipulating.h
+++++ b/manipulating.h
++@@ -3,10 +3,12 @@
++ #ifndef _MANIPULATING_H_
++ #define _MANIPULATING_H_
++ 
+++//All system library needed
++ #include <stdio.h>
++ #include <string.h>
++ 
++-#define BUFFER_SIZE 32 // Define a constant for maximum string length
+++// Define a constant for maximum length of input string 
+++#define BUFFER_SIZE 32
++ 
++ // manipulating prototype: Allow users to manipulate string input
++ //Including: string concatenate
++
++commit bccbd7b3a5fbf9465d1852b3dd642777bf3f29ce
++Merge: 5724194 723cf02
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Sat Dec 2 18:58:38 2023 -0500
++
++    Merge branch 'manipulating' of https://github.com/xiaohanfu123/CPR101-Final-Project into manipulating
++
++commit 5724194a681ef0c8997824b91fc692f6dc29686f
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Sat Dec 2 18:57:50 2023 -0500
++
++    Version 1&2: Revise some comments to make them easy to understand the codes
++
++diff --git a/manipulating.c b/manipulating.c
++index 31ce090..0e763bf 100644
++--- a/manipulating.c
+++++ b/manipulating.c
++@@ -9,9 +9,9 @@ Final Project
++ */
++ 
++ /* The costomized library "manipulating.h" header file provides :
++-    2 standard libraies: stdio.h and string.h
++-    Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
++-    Prototype for function manipulating
+++    - 2 standard libraies: stdio.h and string.h
+++    - Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
+++    - Prototype for function manipulating
++ */
++ #include "manipulating.h"   
++ 
++@@ -26,10 +26,10 @@ void manipulating(void) {
++     // Display the staring message for user to understand the purpose of this demo
++     //printf("**** Start of Concatenating Strings Demo ****\n");
++     //// Declare 2 Cstring to store the string for concatenation 
++-    //char string1[BUFFER_SIZE]; // first string 
++-    //char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
+++    //char string1[BUFFER_SIZE]; // first string to store user first input
+++    //char string2[BUFFER_SIZE]; // second string to store user second input - concatenate to the end of first string
++     //
++-    //// Start a loop at least once and will continue until the user enter q to quit
+++    //// Keep prompt for 2 string input until the user enter q to quit
++     //do {
++     //    // Prompt the user for the first string
++     //    printf("Type the 1st string (q - to quit):\n");
++@@ -65,11 +65,11 @@ void manipulating(void) {
++     printf("**** Start of Comparing Strings Demo ****\n");
++ 
++     // Declare 2 Cstring to store the string for comparison
++-    char compare1[BUFFER_SIZE]; // first string
++-    char compare2[BUFFER_SIZE]; // second string
+++    char compare1[BUFFER_SIZE]; // first string to store user first input
+++    char compare2[BUFFER_SIZE]; // second string to store user second input
++     int result; // Store the comparison result
++ 
++-    // Start a loop at least once and will continue until the user enter q to quit
+++    // Keep prompt for 2 string input until the user enter q to quit
++     do {
++         // Prompt the user for the first string
++         printf("Type the 1st string to compare (q - to quit):\n");
++@@ -91,15 +91,15 @@ void manipulating(void) {
++         result = strcmp(compare1, compare2);
++ 
++         // Check the value of reuslt and display corresponding message to user
++-        // compare1 < compare2
+++        // compare1 < compare2 and output proper message to user
++         if (result < 0) {
++             printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
++         }
++-        // compare1 = compare2
+++        // compare1 = compare2 and output proper message to user
++         else if (result == 0) {
++             printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
++         }
++-        // compare1 > compare2 
+++        // compare1 > compare2 and output proper message to user
++         else {
++             printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
++         }
++
++commit 723cf0212615fd781700c1580261a1488b866e62
++Author: Jarviniazhao <151060098+Jarviniazhao@users.noreply.github.com>
++Date:   Fri Dec 1 09:30:48 2023 -0500
++
++    Add general descriptions of manipulating
++
++diff --git a/README.md b/README.md
++index 8a2ba66..e8b903a 100644
++--- a/README.md
+++++ b/README.md
++@@ -1 +1,4 @@
++-# CPR101-Final-Project
++\ No newline at end of file
+++# CPR101-Final-Project
+++
+++- Manipulating <br />
+++    This function provides the functionality to manipulate Cstings including 3 versions: string concatenation, comparison, and searching
++
++commit 259290768c7d6f4affc068cf206f83183da7ecb6
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Fri Dec 1 08:33:26 2023 -0500
++
++    Version 2: Comment out version1 code for testing version2 only
++
++diff --git a/manipulating.c b/manipulating.c
++index e57d2ae..31ce090 100644
++--- a/manipulating.c
+++++ b/manipulating.c
++@@ -19,42 +19,43 @@ Final Project
++ Function Purpose: This function provides the functionality to manipulate Cstings
++ */
++ void manipulating(void) {
+++
++ /* Version 1 */
++     //------------- Demo of String Concatenate ---------------
++     
++     // Display the staring message for user to understand the purpose of this demo
++-    printf("**** Start of Concatenating Strings Demo ****\n");
++-    // Declare 2 Cstring to store the string for concatenation 
++-    char string1[BUFFER_SIZE]; // first string 
++-    char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
++-    
++-    // Start a loop at least once and will continue until the user enter q to quit
++-    do {
++-        // Prompt the user for the first string
++-        printf("Type the 1st string (q - to quit):\n");
++-        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
++-        // Remove the newline character at the end of the input string
++-        string1[strlen(string1) - 1] = '\0';
++-
++-        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
++-        if (strcmp(string1, "q") == 0) {
++-            break;
++-        }
++-
++-        // Prompt the user for the second string
++-        printf("Type the 2nd string:\n");
++-        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
++-        // Remove the newline character at the end of the input string
++-        string2[strlen(string2) - 1] = '\0'; 
++-
++-        // Concatenate the string2 to the string1
++-        strcat(string1, string2);
++-        // Display the result after concatenation
++-        printf("Concatenated string is '%s'\n", string1);
++-
++-    } while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
++-
++-    printf("**** End of Concatenating Strings Demo ****\n");
+++    //printf("**** Start of Concatenating Strings Demo ****\n");
+++    //// Declare 2 Cstring to store the string for concatenation 
+++    //char string1[BUFFER_SIZE]; // first string 
+++    //char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
+++    //
+++    //// Start a loop at least once and will continue until the user enter q to quit
+++    //do {
+++    //    // Prompt the user for the first string
+++    //    printf("Type the 1st string (q - to quit):\n");
+++    //    fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
+++    //    // Remove the newline character at the end of the input string
+++    //    string1[strlen(string1) - 1] = '\0';
+++
+++    //    // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
+++    //    if (strcmp(string1, "q") == 0) {
+++    //        break;
+++    //    }
+++
+++    //    // Prompt the user for the second string
+++    //    printf("Type the 2nd string:\n");
+++    //    fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
+++    //    // Remove the newline character at the end of the input string
+++    //    string2[strlen(string2) - 1] = '\0'; 
+++
+++    //    // Concatenate the string2 to the string1
+++    //    strcat(string1, string2);
+++    //    // Display the result after concatenation
+++    //    printf("Concatenated string is '%s'\n", string1);
+++
+++    //} while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
+++
+++    //printf("**** End of Concatenating Strings Demo ****\n");
++ 
++ 
++ /* Version 2 */
++
++commit 99c9ceef9a88f431213291029a49e438562858bd
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Thu Nov 30 23:45:15 2023 -0500
++
++    Version 2: Finish testing with 7 cases with actual output and case report
++
++diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
++index 2a6351e..741f37a 100644
++Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
++diff --git a/manipulating-testing.txt b/manipulating-testing.txt
++index 3cf3d34..1d00335 100644
++--- a/manipulating-testing.txt
+++++ b/manipulating-testing.txt
++@@ -42,3 +42,53 @@ Type the 2nd string:
++  Nice to meet you!
++ Concatenated string is 'Hello this is John Smith, Nice to meet you!'
++ 
+++------Version 2-------
+++Test 1: (Identical)
+++Type the 1st string to compare (q - to quit):
+++test
+++Type the 2nd string to compare:
+++test
+++"test" string is equal to "test"
+++
+++Test 2: (Case sensitive)
+++Type the 1st string to compare (q - to quit):
+++Test
+++Type the 2nd string to compare:
+++test
+++"Test" string is less than "test"
+++
+++Test 3: (Different length)
+++Type the 1st string to compare (q - to quit):
+++Hello World
+++Type the 2nd string to compare:
+++Hello
+++"Hello World" string is greater than "Hello"
+++
+++Test 4: (Empty string)
+++Type the 1st string to compare (q - to quit):
+++
+++Type the 2nd string to compare:
+++
+++"" string is equal to ""
+++
+++Test 5: (Special characters)
+++Type the 1st string to compare (q - to quit):
+++@123
+++Type the 2nd string to compare:
+++$456
+++"@123" string is greater than "$456"
+++
+++Test 6: (Over-the-edge: compare1 over the limit)
+++Type the 1st string to compare (q - to quit):
+++Hello this is John Smith, Nice to meet you!
+++Type the 2nd string to compare:
+++"Hello this is John Smith, Nice" string is less than "to meet you!"
+++
+++Test 7: (Over-the-edge: compare2 over the limit)
+++Type the 1st string to compare (q - to quit):
+++Hello this is John Smith, Nice
+++Type the 2nd string to compare:
+++Hello this is John Smith, Nice to meet you!
+++"Hello this is John Smith, Nice" string is equal to "Hello this is John Smith, Nice"
+++Type the 1st string to compare (q - to quit):
+++Type the 2nd string to compare:
++\ No newline at end of file
++
++commit e1419a3e16637354960b9e5ad4878737841c65c4
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Tue Nov 28 21:02:47 2023 -0500
++
++    Version 2: Finish comments 1.0
++
++diff --git a/manipulating.c b/manipulating.c
++index caa2d08..e57d2ae 100644
++--- a/manipulating.c
+++++ b/manipulating.c
++@@ -32,7 +32,7 @@ void manipulating(void) {
++     do {
++         // Prompt the user for the first string
++         printf("Type the 1st string (q - to quit):\n");
++-        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user
+++        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
++         // Remove the newline character at the end of the input string
++         string1[strlen(string1) - 1] = '\0';
++ 
++@@ -43,7 +43,7 @@ void manipulating(void) {
++ 
++         // Prompt the user for the second string
++         printf("Type the 2nd string:\n");
++-        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user
+++        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
++         // Remove the newline character at the end of the input string
++         string2[strlen(string2) - 1] = '\0'; 
++ 
++@@ -58,31 +58,51 @@ void manipulating(void) {
++ 
++ 
++ /* Version 2 */
+++    //------------- Demo of String Comparing ---------------
+++
+++    // Display the staring message for user to understand the purpose of this demo
++     printf("**** Start of Comparing Strings Demo ****\n");
++-    char compare1[BUFFER_SIZE];
++-    char compare2[BUFFER_SIZE];
++-    int result;
+++
+++    // Declare 2 Cstring to store the string for comparison
+++    char compare1[BUFFER_SIZE]; // first string
+++    char compare2[BUFFER_SIZE]; // second string
+++    int result; // Store the comparison result
+++
+++    // Start a loop at least once and will continue until the user enter q to quit
++     do {
+++        // Prompt the user for the first string
++         printf("Type the 1st string to compare (q - to quit):\n");
++-        fgets(compare1, BUFFER_SIZE, stdin);
+++        fgets(compare1, BUFFER_SIZE, stdin); // Read the first input Cstring from user and stores in compare1
+++        // Remove the newline character at the end of the input string
++         compare1[strlen(compare1) - 1] = '\0';
+++
+++        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
++         if (strcmp(compare1, "q") == 0) {
++             break;
++         }
+++        // Prompt the user for the second string
++         printf("Type the 2nd string to compare:\n");
++-        fgets(compare2, BUFFER_SIZE, stdin);
+++        fgets(compare2, BUFFER_SIZE, stdin); // Read the second input Cstring from user and stores in compare2
+++        // Remove the newline character at the end of the input string
++         compare2[strlen(compare2) - 1] = '\0';
+++
+++        // Compare compare1 with compare2 and store the result to variable reuslt
++         result = strcmp(compare1, compare2);
+++
+++        // Check the value of reuslt and display corresponding message to user
+++        // compare1 < compare2
++         if (result < 0) {
++             printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
++         }
+++        // compare1 = compare2
++         else if (result == 0) {
++             printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
++         }
+++        // compare1 > compare2 
++         else {
++             printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
++         }
++-    } while (strcmp(compare1, "q") != 0);
+++    } while (strcmp(compare1, "q") != 0); // Continue looping until the user enter 'q' for the compare1
++     printf("**** End of Comparing Strings Demo ****\n");
++     
++ 
++
++commit 63486a4aa9da65f01fe5b158a7a62d3683e27e23
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Tue Nov 28 20:48:36 2023 -0500
++
++    Correct a comment for Version 1, which was put for wrong code
++
++diff --git a/manipulating.c b/manipulating.c
++index 58a46ce..caa2d08 100644
++--- a/manipulating.c
+++++ b/manipulating.c
++@@ -43,9 +43,9 @@ void manipulating(void) {
++ 
++         // Prompt the user for the second string
++         printf("Type the 2nd string:\n");
++-        fgets(string2, BUFFER_SIZE, stdin);
+++        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user
++         // Remove the newline character at the end of the input string
++-        string2[strlen(string2) - 1] = '\0'; // Read the second input string from user
+++        string2[strlen(string2) - 1] = '\0'; 
++ 
++         // Concatenate the string2 to the string1
++         strcat(string1, string2);
++
++commit 13220bd1bfb31415bbed9664fd1e9fb3796c0525
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Tue Nov 28 20:27:55 2023 -0500
++
++    Adding completed work of version 1 for manipulating
++
++diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
++new file mode 100644
++index 0000000..2a6351e
++Binary files /dev/null and b/manipulating-test-cases.xlsx differ
++diff --git a/manipulating-testing.txt b/manipulating-testing.txt
++new file mode 100644
++index 0000000..3cf3d34
++--- /dev/null
+++++ b/manipulating-testing.txt
++@@ -0,0 +1,44 @@
+++Manipulating Testing 
+++
+++------Version 1-------
+++Test 1: (Normal case)
+++Type the 1st string (q - to quit):
+++John
+++Type the 2nd string:
+++ Simith
+++Concatenated string is 'John Simith'
+++
+++Test 2: (Empty string)
+++Type the 1st string (q - to quit):
+++
+++Type the 2nd string:
+++
+++Concatenated string is ''
+++
+++Test 3: (Edge case)
+++Type the 1st string (q - to quit):
+++Hi John Smith
+++Type the 2nd string:
+++ Nice to meet you!
+++Concatenated string is 'Hi John Smith Nice to meet you!'
+++
+++Test 4: (Over-the-edge: string1 over the limit)
+++Type the 1st string (q - to quit):
+++Hello this is John Smith, Nice to meet you!
+++Type the 2nd string:
+++Concatenated string is 'Hello this is John Smith, Niceto meet you!'
+++
+++Test 5: (Over-the-edge: string2 over the limit)
+++Type the 1st string (q - to quit):
+++12345
+++Type the 2nd string:
+++Hi John Smith Nice to meet you!
+++Concatenated string is '12345Hi John Smith Nice to meet you'
+++
+++Test 6: (Over-the-edge: after concatenation string1 over the limit)
+++Type the 1st string (q - to quit):
+++Hello this is John Smith,
+++Type the 2nd string:
+++ Nice to meet you!
+++Concatenated string is 'Hello this is John Smith, Nice to meet you!'
+++
++diff --git a/manipulating.c b/manipulating.c
++new file mode 100644
++index 0000000..58a46ce
++--- /dev/null
+++++ b/manipulating.c
++@@ -0,0 +1,114 @@
+++#define _CRT_SECURE_NO_WARNINGS
+++/*
+++Author: Jarvinia Zhao
+++Email: jzhao169@myseneca.ca
+++ID: 143013233
+++Date Written: 11-27-2023
+++Course: CPR101.NNN
+++Final Project
+++*/
+++
+++/* The costomized library "manipulating.h" header file provides :
+++    2 standard libraies: stdio.h and string.h
+++    Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
+++    Prototype for function manipulating
+++*/
+++#include "manipulating.h"   
+++
+++/*
+++Function Purpose: This function provides the functionality to manipulate Cstings
+++*/
+++void manipulating(void) {
+++/* Version 1 */
+++    //------------- Demo of String Concatenate ---------------
+++    
+++    // Display the staring message for user to understand the purpose of this demo
+++    printf("**** Start of Concatenating Strings Demo ****\n");
+++    // Declare 2 Cstring to store the string for concatenation 
+++    char string1[BUFFER_SIZE]; // first string 
+++    char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
+++    
+++    // Start a loop at least once and will continue until the user enter q to quit
+++    do {
+++        // Prompt the user for the first string
+++        printf("Type the 1st string (q - to quit):\n");
+++        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user
+++        // Remove the newline character at the end of the input string
+++        string1[strlen(string1) - 1] = '\0';
+++
+++        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
+++        if (strcmp(string1, "q") == 0) {
+++            break;
+++        }
+++
+++        // Prompt the user for the second string
+++        printf("Type the 2nd string:\n");
+++        fgets(string2, BUFFER_SIZE, stdin);
+++        // Remove the newline character at the end of the input string
+++        string2[strlen(string2) - 1] = '\0'; // Read the second input string from user
+++
+++        // Concatenate the string2 to the string1
+++        strcat(string1, string2);
+++        // Display the result after concatenation
+++        printf("Concatenated string is '%s'\n", string1);
+++
+++    } while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
+++
+++    printf("**** End of Concatenating Strings Demo ****\n");
+++
+++
+++/* Version 2 */
+++    printf("**** Start of Comparing Strings Demo ****\n");
+++    char compare1[BUFFER_SIZE];
+++    char compare2[BUFFER_SIZE];
+++    int result;
+++    do {
+++        printf("Type the 1st string to compare (q - to quit):\n");
+++        fgets(compare1, BUFFER_SIZE, stdin);
+++        compare1[strlen(compare1) - 1] = '\0';
+++        if (strcmp(compare1, "q") == 0) {
+++            break;
+++        }
+++        printf("Type the 2nd string to compare:\n");
+++        fgets(compare2, BUFFER_SIZE, stdin);
+++        compare2[strlen(compare2) - 1] = '\0';
+++        result = strcmp(compare1, compare2);
+++        if (result < 0) {
+++            printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
+++        }
+++        else if (result == 0) {
+++            printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
+++        }
+++        else {
+++            printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
+++        }
+++    } while (strcmp(compare1, "q") != 0);
+++    printf("**** End of Comparing Strings Demo ****\n");
+++    
+++
+++/* Version 3 
+++    printf("**** Start of Searching Strings Demo ****\n");
+++    char haystack[BUFFER_SIZE];
+++    char needle[BUFFER_SIZE];
+++    char* occurrence = NULL;
+++    do {
+++        printf("Type the string (q - to quit):\n");
+++        fgets(haystack, BUFFER_SIZE, stdin);
+++        haystack[strlen(haystack) - 1] = '\0';
+++        if (strcmp(haystack, "q") == 0) {
+++            break;
+++        }
+++        printf("Type the substring:\n");
+++        fgets(needle, BUFFER_SIZE, stdin);
+++        needle[strlen(needle) - 1] = '\0';
+++        occurrence = strstr(haystack, needle);
+++        if (occurrence) {
+++            printf("\"%s\" found at %d position\n", needle, (int)(occurrence - haystack));
+++        }
+++        else {
+++            printf("Not found\n");
+++        }
+++    } while (strcmp(haystack, "q") != 0);
+++    printf("**** End of Searching Strings Demo ****\n");
+++    */
+++}
++\ No newline at end of file
++diff --git a/manipulating.h b/manipulating.h
++new file mode 100644
++index 0000000..fdbd4a4
++--- /dev/null
+++++ b/manipulating.h
++@@ -0,0 +1,15 @@
+++#pragma once
+++// MANIPULATING MODULE HEADER
+++#ifndef _MANIPULATING_H_
+++#define _MANIPULATING_H_
+++
+++#include <stdio.h>
+++#include <string.h>
+++
+++#define BUFFER_SIZE 32 // Define a constant for maximum string length
+++
+++// manipulating prototype: Allow users to manipulate string input
+++//Including: string concatenate
+++void manipulating(void);
+++
+++#endif
++\ No newline at end of file
++
++commit 4382fcc46f84af21341f49a0a3d637836ef55795
++Author: xiaohanfu123 <110127564+xiaohanfu123@users.noreply.github.com>
++Date:   Wed Nov 15 22:09:25 2023 -0500
++
++    Initial commit
++
++diff --git a/LICENSE b/LICENSE
++new file mode 100644
++index 0000000..3db340b
++--- /dev/null
+++++ b/LICENSE
++@@ -0,0 +1,21 @@
+++MIT License
+++
+++Copyright (c) 2023 xiaohanfu123
+++
+++Permission is hereby granted, free of charge, to any person obtaining a copy
+++of this software and associated documentation files (the "Software"), to deal
+++in the Software without restriction, including without limitation the rights
+++to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+++copies of the Software, and to permit persons to whom the Software is
+++furnished to do so, subject to the following conditions:
+++
+++The above copyright notice and this permission notice shall be included in all
+++copies or substantial portions of the Software.
+++
+++THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+++IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+++FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+++AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+++LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+++OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+++SOFTWARE.
++diff --git a/README.md b/README.md
++new file mode 100644
++index 0000000..8a2ba66
++--- /dev/null
+++++ b/README.md
++@@ -0,0 +1 @@
+++# CPR101-Final-Project
++\ No newline at end of file
+
 commit 65fd6432ce4b971660a56f7f960f06a714405a9b
 Author: Jarvinia Zhao <jzhao169@myseneca.ca>
 Date:   Sat Dec 2 19:02:49 2023 -0500

commit f500767fee1558f54a1f788095411e8bb2564795
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Wed Dec 6 13:45:46 2023 -0500

    Version3: Minor format modifications

diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
index 5449f31..2fa13a7 100644
Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
diff --git a/manipulating-testing.txt b/manipulating-testing.txt
index f73a2bc..80e1c9d 100644
--- a/manipulating-testing.txt
+++ b/manipulating-testing.txt
@@ -1,4 +1,4 @@
-Manipulating Testing 
+Manipulating Testing Records
 
 -------------- Version 1: String Concatenate -------------------------------
 >> Test 1: (Normal case)

commit 1548832612577ee13bc930b033bcb103d43e6141
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Sat Dec 2 21:30:36 2023 -0500

    Version 2: Add one more testing case - one empty string

diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
index 4990758..5449f31 100644
Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
diff --git a/manipulating-testing.txt b/manipulating-testing.txt
index 57c3364..f73a2bc 100644
--- a/manipulating-testing.txt
+++ b/manipulating-testing.txt
@@ -64,27 +64,34 @@ Type the 2nd string to compare:
 Hello
 "Hello World" string is greater than "Hello"
 
->> Test 4: (Empty string)
+>> Test 4: (Compare one empty string)
+Type the 1st string to compare (q - to quit):
+
+Type the 2nd string to compare:
+test
+"" string is less than "test"
+
+>> Test 5: (Both string are empty )
 Type the 1st string to compare (q - to quit):
 
 Type the 2nd string to compare:
 
 "" string is equal to ""
 
->> Test 5: (Special characters)
+>> Test 6: (Special characters)
 Type the 1st string to compare (q - to quit):
 @123
 Type the 2nd string to compare:
 $456
 "@123" string is greater than "$456"
 
->> Test 6: (Over-the-edge: compare1 over the limit)
+>> Test 7: (Over-the-edge: compare1 over the limit)
 Type the 1st string to compare (q - to quit):
 Hello this is John Smith, Nice to meet you!
 Type the 2nd string to compare:
 "Hello this is John Smith, Nice" string is less than "to meet you!"
 
->> Test 7: (Over-the-edge: compare2 over the limit)
+>> Test 8: (Over-the-edge: compare2 over the limit)
 Type the 1st string to compare (q - to quit):
 Hello this is John Smith, Nice
 Type the 2nd string to compare:

commit cc273f3f8a0321cbac858c3fde052c0a077e574c
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Sat Dec 2 21:23:39 2023 -0500

    Version 3: Upload testing case records, and modify the format of testing.txt

diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
index 8058037..4990758 100644
Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
diff --git a/manipulating-testing.txt b/manipulating-testing.txt
index 1d00335..57c3364 100644
--- a/manipulating-testing.txt
+++ b/manipulating-testing.txt
@@ -1,94 +1,175 @@
 Manipulating Testing 
 
-------Version 1-------
-Test 1: (Normal case)
+-------------- Version 1: String Concatenate -------------------------------
+>> Test 1: (Normal case)
 Type the 1st string (q - to quit):
 John
 Type the 2nd string:
  Simith
 Concatenated string is 'John Simith'
 
-Test 2: (Empty string)
+>> Test 2: (Empty string)
 Type the 1st string (q - to quit):
 
 Type the 2nd string:
 
 Concatenated string is ''
 
-Test 3: (Edge case)
+>> Test 3: (Edge case)
 Type the 1st string (q - to quit):
 Hi John Smith
 Type the 2nd string:
  Nice to meet you!
 Concatenated string is 'Hi John Smith Nice to meet you!'
 
-Test 4: (Over-the-edge: string1 over the limit)
+>> Test 4: (Over-the-edge: string1 over the limit)
 Type the 1st string (q - to quit):
 Hello this is John Smith, Nice to meet you!
 Type the 2nd string:
 Concatenated string is 'Hello this is John Smith, Niceto meet you!'
 
-Test 5: (Over-the-edge: string2 over the limit)
+>> Test 5: (Over-the-edge: string2 over the limit)
 Type the 1st string (q - to quit):
 12345
 Type the 2nd string:
 Hi John Smith Nice to meet you!
 Concatenated string is '12345Hi John Smith Nice to meet you'
 
-Test 6: (Over-the-edge: after concatenation string1 over the limit)
+>> Test 6: (Over-the-edge: after concatenation string1 over the limit)
 Type the 1st string (q - to quit):
 Hello this is John Smith,
 Type the 2nd string:
  Nice to meet you!
 Concatenated string is 'Hello this is John Smith, Nice to meet you!'
 
-------Version 2-------
-Test 1: (Identical)
+--------------- Version 2: String Comparision -------------------------------
+>> Test 1: (Identical)
 Type the 1st string to compare (q - to quit):
 test
 Type the 2nd string to compare:
 test
 "test" string is equal to "test"
 
-Test 2: (Case sensitive)
+>> Test 2: (Case sensitive)
 Type the 1st string to compare (q - to quit):
 Test
 Type the 2nd string to compare:
 test
 "Test" string is less than "test"
 
-Test 3: (Different length)
+>> Test 3: (Different length)
 Type the 1st string to compare (q - to quit):
 Hello World
 Type the 2nd string to compare:
 Hello
 "Hello World" string is greater than "Hello"
 
-Test 4: (Empty string)
+>> Test 4: (Empty string)
 Type the 1st string to compare (q - to quit):
 
 Type the 2nd string to compare:
 
 "" string is equal to ""
 
-Test 5: (Special characters)
+>> Test 5: (Special characters)
 Type the 1st string to compare (q - to quit):
 @123
 Type the 2nd string to compare:
 $456
 "@123" string is greater than "$456"
 
-Test 6: (Over-the-edge: compare1 over the limit)
+>> Test 6: (Over-the-edge: compare1 over the limit)
 Type the 1st string to compare (q - to quit):
 Hello this is John Smith, Nice to meet you!
 Type the 2nd string to compare:
 "Hello this is John Smith, Nice" string is less than "to meet you!"
 
-Test 7: (Over-the-edge: compare2 over the limit)
+>> Test 7: (Over-the-edge: compare2 over the limit)
 Type the 1st string to compare (q - to quit):
 Hello this is John Smith, Nice
 Type the 2nd string to compare:
 Hello this is John Smith, Nice to meet you!
 "Hello this is John Smith, Nice" string is equal to "Hello this is John Smith, Nice"
 Type the 1st string to compare (q - to quit):
-Type the 2nd string to compare:
\ No newline at end of file
+Type the 2nd string to compare:
+
+--------------- Version 3: String Search -------------------------------
+>> Test 1: (Normal case)
+Type the string (q - to quit):
+Hello World!
+Type the substring:
+World
+"World" found at 6 position
+
+>> Test 2: (needle at beginning)
+Type the string (q - to quit):
+Test starts now right?
+Type the substring:
+Test
+"Test" found at 0 position
+
+>> Test 3: (needle at end)
+Type the string (q - to quit):
+This is a test
+Type the substring:
+test
+"test" found at 10 position
+
+>> Test 4: (needle is single character)
+Type the string (q - to quit):
+Hello World!
+Type the substring:
+o
+"o" found at 4 position
+
+>> Test 5: (needle not found)
+Type the string (q - to quit):
+Hello World!
+Type the substring:
+Happy
+Not found
+
+>> Test 6: (haystack is empty)
+Type the string (q - to quit):
+
+Type the substring:
+test
+Not found
+
+>> Test 7: (needle is empty)
+Type the string (q - to quit):
+test
+Type the substring:
+
+"" found at 0 position
+
+>> Test 8: (Both string is empty)
+Type the string (q - to quit):
+
+Type the substring:
+
+"" found at 0 position
+
+>> Test 9: (Over-the-edge: haystack over the limit)
+Type the string (q - to quit):
+one two three four five six seven eight nine ten
+Type the substring:
+Not found
+
+>> Test 10: (Over-the-edge: haystack over the limit with repeated pattern)
+Type the string (q - to quit):
+two three four two three four two three four two three four
+Type the substring:
+"wo three four two three four" found at 1 position
+
+>>Test 11: (Over-the-edge: needle over the limit)
+Type the string (q - to quit):
+four
+Type the substring:
+one two three four five six seven eight nine ten
+Not found
+Type the string (q - to quit):
+Type the substring:
+
+
+

commit 92b341acca4abad1da45a7b397589e1445b00c69
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Sat Dec 2 21:21:59 2023 -0500

    Version 3: Finish code comments

diff --git a/manipulating.c b/manipulating.c
index c1f52ee..095ec35 100644
--- a/manipulating.c
+++ b/manipulating.c
@@ -58,7 +58,7 @@ void manipulating(void) {
     //printf("**** End of Concatenating Strings Demo ****\n");
 
 
-/* Version 2 */
+/* Version 2 
     //------------- Demo of String Comparing ---------------
 
     // Display the staring message for user to understand the purpose of this demo
@@ -105,31 +105,49 @@ void manipulating(void) {
         }
     } while (strcmp(compare1, "q") != 0); // Continue looping until the user enter 'q' for the compare1
     printf("**** End of Comparing Strings Demo ****\n");
+    */
     
 
 /* Version 3 */
+    //------------- Demo of String Search ---------------
+
+    // Display the staring message for user to understand the purpose of this demo
     printf("**** Start of Searching Strings Demo ****\n");
-    char haystack[BUFFER_SIZE];
-    char needle[BUFFER_SIZE];
-    char* occurrence = NULL;
+    char haystack[BUFFER_SIZE]; // string to store user input as a searching library
+    char needle[BUFFER_SIZE];  // string to store user input as a searching keyword
+    char* occurrence = NULL; // variable to store search result, NULL = not found
+    
+    // Keep prompt for 2 string input until the user enter q to quit
     do {
+        // Prompt the user for the library string
         printf("Type the string (q - to quit):\n");
-        fgets(haystack, BUFFER_SIZE, stdin);
+        fgets(haystack, BUFFER_SIZE, stdin); // Read the first input Cstring from user and stores in haystack
+        // Remove the newline character at the end of the input string
         haystack[strlen(haystack) - 1] = '\0';
+        
+        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
         if (strcmp(haystack, "q") == 0) {
             break;
         }
+        
+        // Prompt the user for the keyword string/substring
         printf("Type the substring:\n");
-        fgets(needle, BUFFER_SIZE, stdin);
+        fgets(needle, BUFFER_SIZE, stdin); // Read the second input Cstring from user and stores in needle
+        // Remove the newline character at the end of the input string
         needle[strlen(needle) - 1] = '\0';
+
+        //Search the occurrence of needle in haystack and store the result in variable occurance
         occurrence = strstr(haystack, needle);
+
+        // Check the value of occurence and display corresponding message to user
+        // Found the needle in haystack and give the exact position of needle in haystack
         if (occurrence) {
             printf("\"%s\" found at %d position\n", needle, (int)(occurrence - haystack));
         }
         else {
             printf("Not found\n");
         }
-    } while (strcmp(haystack, "q") != 0);
+    } while (strcmp(haystack, "q") != 0);// Continue looping until the user enter 'q' for the haystack
     printf("**** End of Searching Strings Demo ****\n");
     
 }
\ No newline at end of file

commit 6fbcb238d29e983c385476c886371328bbf46caf
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Sat Dec 2 19:29:27 2023 -0500

    Version 3: Code without any comments

diff --git a/manipulating.c b/manipulating.c
index 0e763bf..c1f52ee 100644
--- a/manipulating.c
+++ b/manipulating.c
@@ -107,7 +107,7 @@ void manipulating(void) {
     printf("**** End of Comparing Strings Demo ****\n");
     
 
-/* Version 3 
+/* Version 3 */
     printf("**** Start of Searching Strings Demo ****\n");
     char haystack[BUFFER_SIZE];
     char needle[BUFFER_SIZE];
@@ -131,5 +131,5 @@ void manipulating(void) {
         }
     } while (strcmp(haystack, "q") != 0);
     printf("**** End of Searching Strings Demo ****\n");
-    */
+    
 }
\ No newline at end of file

commit bfe8f022a756ec94edea24b110617cf45d357dff
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Sat Dec 2 19:11:51 2023 -0500

    Version 2: upload git log

diff --git a/manipulating-git-log.txt b/manipulating-git-log.txt
new file mode 100644
index 0000000..7af623f
--- /dev/null
+++ b/manipulating-git-log.txt
@@ -0,0 +1,643 @@
+commit 65fd6432ce4b971660a56f7f960f06a714405a9b
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Sat Dec 2 19:02:49 2023 -0500
+
+    Version 1&2: Correct typos and revise the wording
+
+diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
+index 741f37a..8058037 100644
+Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
+
+commit 4b5197c169be2a959933edfdd976b123ed44f42e
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Sat Dec 2 19:01:42 2023 -0500
+
+    Header file: Add and revise some comment for easy understanding
+
+diff --git a/manipulating.h b/manipulating.h
+index fdbd4a4..e3dcc7a 100644
+--- a/manipulating.h
++++ b/manipulating.h
+@@ -3,10 +3,12 @@
+ #ifndef _MANIPULATING_H_
+ #define _MANIPULATING_H_
+ 
++//All system library needed
+ #include <stdio.h>
+ #include <string.h>
+ 
+-#define BUFFER_SIZE 32 // Define a constant for maximum string length
++// Define a constant for maximum length of input string 
++#define BUFFER_SIZE 32
+ 
+ // manipulating prototype: Allow users to manipulate string input
+ //Including: string concatenate
+
+commit bccbd7b3a5fbf9465d1852b3dd642777bf3f29ce
+Merge: 5724194 723cf02
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Sat Dec 2 18:58:38 2023 -0500
+
+    Merge branch 'manipulating' of https://github.com/xiaohanfu123/CPR101-Final-Project into manipulating
+
+commit 5724194a681ef0c8997824b91fc692f6dc29686f
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Sat Dec 2 18:57:50 2023 -0500
+
+    Version 1&2: Revise some comments to make them easy to understand the codes
+
+diff --git a/manipulating.c b/manipulating.c
+index 31ce090..0e763bf 100644
+--- a/manipulating.c
++++ b/manipulating.c
+@@ -9,9 +9,9 @@ Final Project
+ */
+ 
+ /* The costomized library "manipulating.h" header file provides :
+-    2 standard libraies: stdio.h and string.h
+-    Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
+-    Prototype for function manipulating
++    - 2 standard libraies: stdio.h and string.h
++    - Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
++    - Prototype for function manipulating
+ */
+ #include "manipulating.h"   
+ 
+@@ -26,10 +26,10 @@ void manipulating(void) {
+     // Display the staring message for user to understand the purpose of this demo
+     //printf("**** Start of Concatenating Strings Demo ****\n");
+     //// Declare 2 Cstring to store the string for concatenation 
+-    //char string1[BUFFER_SIZE]; // first string 
+-    //char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
++    //char string1[BUFFER_SIZE]; // first string to store user first input
++    //char string2[BUFFER_SIZE]; // second string to store user second input - concatenate to the end of first string
+     //
+-    //// Start a loop at least once and will continue until the user enter q to quit
++    //// Keep prompt for 2 string input until the user enter q to quit
+     //do {
+     //    // Prompt the user for the first string
+     //    printf("Type the 1st string (q - to quit):\n");
+@@ -65,11 +65,11 @@ void manipulating(void) {
+     printf("**** Start of Comparing Strings Demo ****\n");
+ 
+     // Declare 2 Cstring to store the string for comparison
+-    char compare1[BUFFER_SIZE]; // first string
+-    char compare2[BUFFER_SIZE]; // second string
++    char compare1[BUFFER_SIZE]; // first string to store user first input
++    char compare2[BUFFER_SIZE]; // second string to store user second input
+     int result; // Store the comparison result
+ 
+-    // Start a loop at least once and will continue until the user enter q to quit
++    // Keep prompt for 2 string input until the user enter q to quit
+     do {
+         // Prompt the user for the first string
+         printf("Type the 1st string to compare (q - to quit):\n");
+@@ -91,15 +91,15 @@ void manipulating(void) {
+         result = strcmp(compare1, compare2);
+ 
+         // Check the value of reuslt and display corresponding message to user
+-        // compare1 < compare2
++        // compare1 < compare2 and output proper message to user
+         if (result < 0) {
+             printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
+         }
+-        // compare1 = compare2
++        // compare1 = compare2 and output proper message to user
+         else if (result == 0) {
+             printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
+         }
+-        // compare1 > compare2 
++        // compare1 > compare2 and output proper message to user
+         else {
+             printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
+         }
+
+commit 723cf0212615fd781700c1580261a1488b866e62
+Author: Jarviniazhao <151060098+Jarviniazhao@users.noreply.github.com>
+Date:   Fri Dec 1 09:30:48 2023 -0500
+
+    Add general descriptions of manipulating
+
+diff --git a/README.md b/README.md
+index 8a2ba66..e8b903a 100644
+--- a/README.md
++++ b/README.md
+@@ -1 +1,4 @@
+-# CPR101-Final-Project
+\ No newline at end of file
++# CPR101-Final-Project
++
++- Manipulating <br />
++    This function provides the functionality to manipulate Cstings including 3 versions: string concatenation, comparison, and searching
+
+commit 259290768c7d6f4affc068cf206f83183da7ecb6
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Fri Dec 1 08:33:26 2023 -0500
+
+    Version 2: Comment out version1 code for testing version2 only
+
+diff --git a/manipulating.c b/manipulating.c
+index e57d2ae..31ce090 100644
+--- a/manipulating.c
++++ b/manipulating.c
+@@ -19,42 +19,43 @@ Final Project
+ Function Purpose: This function provides the functionality to manipulate Cstings
+ */
+ void manipulating(void) {
++
+ /* Version 1 */
+     //------------- Demo of String Concatenate ---------------
+     
+     // Display the staring message for user to understand the purpose of this demo
+-    printf("**** Start of Concatenating Strings Demo ****\n");
+-    // Declare 2 Cstring to store the string for concatenation 
+-    char string1[BUFFER_SIZE]; // first string 
+-    char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
+-    
+-    // Start a loop at least once and will continue until the user enter q to quit
+-    do {
+-        // Prompt the user for the first string
+-        printf("Type the 1st string (q - to quit):\n");
+-        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
+-        // Remove the newline character at the end of the input string
+-        string1[strlen(string1) - 1] = '\0';
+-
+-        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
+-        if (strcmp(string1, "q") == 0) {
+-            break;
+-        }
+-
+-        // Prompt the user for the second string
+-        printf("Type the 2nd string:\n");
+-        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
+-        // Remove the newline character at the end of the input string
+-        string2[strlen(string2) - 1] = '\0'; 
+-
+-        // Concatenate the string2 to the string1
+-        strcat(string1, string2);
+-        // Display the result after concatenation
+-        printf("Concatenated string is '%s'\n", string1);
+-
+-    } while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
+-
+-    printf("**** End of Concatenating Strings Demo ****\n");
++    //printf("**** Start of Concatenating Strings Demo ****\n");
++    //// Declare 2 Cstring to store the string for concatenation 
++    //char string1[BUFFER_SIZE]; // first string 
++    //char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
++    //
++    //// Start a loop at least once and will continue until the user enter q to quit
++    //do {
++    //    // Prompt the user for the first string
++    //    printf("Type the 1st string (q - to quit):\n");
++    //    fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
++    //    // Remove the newline character at the end of the input string
++    //    string1[strlen(string1) - 1] = '\0';
++
++    //    // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
++    //    if (strcmp(string1, "q") == 0) {
++    //        break;
++    //    }
++
++    //    // Prompt the user for the second string
++    //    printf("Type the 2nd string:\n");
++    //    fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
++    //    // Remove the newline character at the end of the input string
++    //    string2[strlen(string2) - 1] = '\0'; 
++
++    //    // Concatenate the string2 to the string1
++    //    strcat(string1, string2);
++    //    // Display the result after concatenation
++    //    printf("Concatenated string is '%s'\n", string1);
++
++    //} while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
++
++    //printf("**** End of Concatenating Strings Demo ****\n");
+ 
+ 
+ /* Version 2 */
+
+commit 99c9ceef9a88f431213291029a49e438562858bd
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Thu Nov 30 23:45:15 2023 -0500
+
+    Version 2: Finish testing with 7 cases with actual output and case report
+
+diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
+index 2a6351e..741f37a 100644
+Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
+diff --git a/manipulating-testing.txt b/manipulating-testing.txt
+index 3cf3d34..1d00335 100644
+--- a/manipulating-testing.txt
++++ b/manipulating-testing.txt
+@@ -42,3 +42,53 @@ Type the 2nd string:
+  Nice to meet you!
+ Concatenated string is 'Hello this is John Smith, Nice to meet you!'
+ 
++------Version 2-------
++Test 1: (Identical)
++Type the 1st string to compare (q - to quit):
++test
++Type the 2nd string to compare:
++test
++"test" string is equal to "test"
++
++Test 2: (Case sensitive)
++Type the 1st string to compare (q - to quit):
++Test
++Type the 2nd string to compare:
++test
++"Test" string is less than "test"
++
++Test 3: (Different length)
++Type the 1st string to compare (q - to quit):
++Hello World
++Type the 2nd string to compare:
++Hello
++"Hello World" string is greater than "Hello"
++
++Test 4: (Empty string)
++Type the 1st string to compare (q - to quit):
++
++Type the 2nd string to compare:
++
++"" string is equal to ""
++
++Test 5: (Special characters)
++Type the 1st string to compare (q - to quit):
++@123
++Type the 2nd string to compare:
++$456
++"@123" string is greater than "$456"
++
++Test 6: (Over-the-edge: compare1 over the limit)
++Type the 1st string to compare (q - to quit):
++Hello this is John Smith, Nice to meet you!
++Type the 2nd string to compare:
++"Hello this is John Smith, Nice" string is less than "to meet you!"
++
++Test 7: (Over-the-edge: compare2 over the limit)
++Type the 1st string to compare (q - to quit):
++Hello this is John Smith, Nice
++Type the 2nd string to compare:
++Hello this is John Smith, Nice to meet you!
++"Hello this is John Smith, Nice" string is equal to "Hello this is John Smith, Nice"
++Type the 1st string to compare (q - to quit):
++Type the 2nd string to compare:
+\ No newline at end of file
+
+commit e1419a3e16637354960b9e5ad4878737841c65c4
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Tue Nov 28 21:02:47 2023 -0500
+
+    Version 2: Finish comments 1.0
+
+diff --git a/manipulating.c b/manipulating.c
+index caa2d08..e57d2ae 100644
+--- a/manipulating.c
++++ b/manipulating.c
+@@ -32,7 +32,7 @@ void manipulating(void) {
+     do {
+         // Prompt the user for the first string
+         printf("Type the 1st string (q - to quit):\n");
+-        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user
++        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
+         // Remove the newline character at the end of the input string
+         string1[strlen(string1) - 1] = '\0';
+ 
+@@ -43,7 +43,7 @@ void manipulating(void) {
+ 
+         // Prompt the user for the second string
+         printf("Type the 2nd string:\n");
+-        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user
++        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
+         // Remove the newline character at the end of the input string
+         string2[strlen(string2) - 1] = '\0'; 
+ 
+@@ -58,31 +58,51 @@ void manipulating(void) {
+ 
+ 
+ /* Version 2 */
++    //------------- Demo of String Comparing ---------------
++
++    // Display the staring message for user to understand the purpose of this demo
+     printf("**** Start of Comparing Strings Demo ****\n");
+-    char compare1[BUFFER_SIZE];
+-    char compare2[BUFFER_SIZE];
+-    int result;
++
++    // Declare 2 Cstring to store the string for comparison
++    char compare1[BUFFER_SIZE]; // first string
++    char compare2[BUFFER_SIZE]; // second string
++    int result; // Store the comparison result
++
++    // Start a loop at least once and will continue until the user enter q to quit
+     do {
++        // Prompt the user for the first string
+         printf("Type the 1st string to compare (q - to quit):\n");
+-        fgets(compare1, BUFFER_SIZE, stdin);
++        fgets(compare1, BUFFER_SIZE, stdin); // Read the first input Cstring from user and stores in compare1
++        // Remove the newline character at the end of the input string
+         compare1[strlen(compare1) - 1] = '\0';
++
++        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
+         if (strcmp(compare1, "q") == 0) {
+             break;
+         }
++        // Prompt the user for the second string
+         printf("Type the 2nd string to compare:\n");
+-        fgets(compare2, BUFFER_SIZE, stdin);
++        fgets(compare2, BUFFER_SIZE, stdin); // Read the second input Cstring from user and stores in compare2
++        // Remove the newline character at the end of the input string
+         compare2[strlen(compare2) - 1] = '\0';
++
++        // Compare compare1 with compare2 and store the result to variable reuslt
+         result = strcmp(compare1, compare2);
++
++        // Check the value of reuslt and display corresponding message to user
++        // compare1 < compare2
+         if (result < 0) {
+             printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
+         }
++        // compare1 = compare2
+         else if (result == 0) {
+             printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
+         }
++        // compare1 > compare2 
+         else {
+             printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
+         }
+-    } while (strcmp(compare1, "q") != 0);
++    } while (strcmp(compare1, "q") != 0); // Continue looping until the user enter 'q' for the compare1
+     printf("**** End of Comparing Strings Demo ****\n");
+     
+ 
+
+commit 63486a4aa9da65f01fe5b158a7a62d3683e27e23
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Tue Nov 28 20:48:36 2023 -0500
+
+    Correct a comment for Version 1, which was put for wrong code
+
+diff --git a/manipulating.c b/manipulating.c
+index 58a46ce..caa2d08 100644
+--- a/manipulating.c
++++ b/manipulating.c
+@@ -43,9 +43,9 @@ void manipulating(void) {
+ 
+         // Prompt the user for the second string
+         printf("Type the 2nd string:\n");
+-        fgets(string2, BUFFER_SIZE, stdin);
++        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user
+         // Remove the newline character at the end of the input string
+-        string2[strlen(string2) - 1] = '\0'; // Read the second input string from user
++        string2[strlen(string2) - 1] = '\0'; 
+ 
+         // Concatenate the string2 to the string1
+         strcat(string1, string2);
+
+commit 13220bd1bfb31415bbed9664fd1e9fb3796c0525
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Tue Nov 28 20:27:55 2023 -0500
+
+    Adding completed work of version 1 for manipulating
+
+diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
+new file mode 100644
+index 0000000..2a6351e
+Binary files /dev/null and b/manipulating-test-cases.xlsx differ
+diff --git a/manipulating-testing.txt b/manipulating-testing.txt
+new file mode 100644
+index 0000000..3cf3d34
+--- /dev/null
++++ b/manipulating-testing.txt
+@@ -0,0 +1,44 @@
++Manipulating Testing 
++
++------Version 1-------
++Test 1: (Normal case)
++Type the 1st string (q - to quit):
++John
++Type the 2nd string:
++ Simith
++Concatenated string is 'John Simith'
++
++Test 2: (Empty string)
++Type the 1st string (q - to quit):
++
++Type the 2nd string:
++
++Concatenated string is ''
++
++Test 3: (Edge case)
++Type the 1st string (q - to quit):
++Hi John Smith
++Type the 2nd string:
++ Nice to meet you!
++Concatenated string is 'Hi John Smith Nice to meet you!'
++
++Test 4: (Over-the-edge: string1 over the limit)
++Type the 1st string (q - to quit):
++Hello this is John Smith, Nice to meet you!
++Type the 2nd string:
++Concatenated string is 'Hello this is John Smith, Niceto meet you!'
++
++Test 5: (Over-the-edge: string2 over the limit)
++Type the 1st string (q - to quit):
++12345
++Type the 2nd string:
++Hi John Smith Nice to meet you!
++Concatenated string is '12345Hi John Smith Nice to meet you'
++
++Test 6: (Over-the-edge: after concatenation string1 over the limit)
++Type the 1st string (q - to quit):
++Hello this is John Smith,
++Type the 2nd string:
++ Nice to meet you!
++Concatenated string is 'Hello this is John Smith, Nice to meet you!'
++
+diff --git a/manipulating.c b/manipulating.c
+new file mode 100644
+index 0000000..58a46ce
+--- /dev/null
++++ b/manipulating.c
+@@ -0,0 +1,114 @@
++#define _CRT_SECURE_NO_WARNINGS
++/*
++Author: Jarvinia Zhao
++Email: jzhao169@myseneca.ca
++ID: 143013233
++Date Written: 11-27-2023
++Course: CPR101.NNN
++Final Project
++*/
++
++/* The costomized library "manipulating.h" header file provides :
++    2 standard libraies: stdio.h and string.h
++    Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
++    Prototype for function manipulating
++*/
++#include "manipulating.h"   
++
++/*
++Function Purpose: This function provides the functionality to manipulate Cstings
++*/
++void manipulating(void) {
++/* Version 1 */
++    //------------- Demo of String Concatenate ---------------
++    
++    // Display the staring message for user to understand the purpose of this demo
++    printf("**** Start of Concatenating Strings Demo ****\n");
++    // Declare 2 Cstring to store the string for concatenation 
++    char string1[BUFFER_SIZE]; // first string 
++    char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
++    
++    // Start a loop at least once and will continue until the user enter q to quit
++    do {
++        // Prompt the user for the first string
++        printf("Type the 1st string (q - to quit):\n");
++        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user
++        // Remove the newline character at the end of the input string
++        string1[strlen(string1) - 1] = '\0';
++
++        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
++        if (strcmp(string1, "q") == 0) {
++            break;
++        }
++
++        // Prompt the user for the second string
++        printf("Type the 2nd string:\n");
++        fgets(string2, BUFFER_SIZE, stdin);
++        // Remove the newline character at the end of the input string
++        string2[strlen(string2) - 1] = '\0'; // Read the second input string from user
++
++        // Concatenate the string2 to the string1
++        strcat(string1, string2);
++        // Display the result after concatenation
++        printf("Concatenated string is '%s'\n", string1);
++
++    } while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
++
++    printf("**** End of Concatenating Strings Demo ****\n");
++
++
++/* Version 2 */
++    printf("**** Start of Comparing Strings Demo ****\n");
++    char compare1[BUFFER_SIZE];
++    char compare2[BUFFER_SIZE];
++    int result;
++    do {
++        printf("Type the 1st string to compare (q - to quit):\n");
++        fgets(compare1, BUFFER_SIZE, stdin);
++        compare1[strlen(compare1) - 1] = '\0';
++        if (strcmp(compare1, "q") == 0) {
++            break;
++        }
++        printf("Type the 2nd string to compare:\n");
++        fgets(compare2, BUFFER_SIZE, stdin);
++        compare2[strlen(compare2) - 1] = '\0';
++        result = strcmp(compare1, compare2);
++        if (result < 0) {
++            printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
++        }
++        else if (result == 0) {
++            printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
++        }
++        else {
++            printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
++        }
++    } while (strcmp(compare1, "q") != 0);
++    printf("**** End of Comparing Strings Demo ****\n");
++    
++
++/* Version 3 
++    printf("**** Start of Searching Strings Demo ****\n");
++    char haystack[BUFFER_SIZE];
++    char needle[BUFFER_SIZE];
++    char* occurrence = NULL;
++    do {
++        printf("Type the string (q - to quit):\n");
++        fgets(haystack, BUFFER_SIZE, stdin);
++        haystack[strlen(haystack) - 1] = '\0';
++        if (strcmp(haystack, "q") == 0) {
++            break;
++        }
++        printf("Type the substring:\n");
++        fgets(needle, BUFFER_SIZE, stdin);
++        needle[strlen(needle) - 1] = '\0';
++        occurrence = strstr(haystack, needle);
++        if (occurrence) {
++            printf("\"%s\" found at %d position\n", needle, (int)(occurrence - haystack));
++        }
++        else {
++            printf("Not found\n");
++        }
++    } while (strcmp(haystack, "q") != 0);
++    printf("**** End of Searching Strings Demo ****\n");
++    */
++}
+\ No newline at end of file
+diff --git a/manipulating.h b/manipulating.h
+new file mode 100644
+index 0000000..fdbd4a4
+--- /dev/null
++++ b/manipulating.h
+@@ -0,0 +1,15 @@
++#pragma once
++// MANIPULATING MODULE HEADER
++#ifndef _MANIPULATING_H_
++#define _MANIPULATING_H_
++
++#include <stdio.h>
++#include <string.h>
++
++#define BUFFER_SIZE 32 // Define a constant for maximum string length
++
++// manipulating prototype: Allow users to manipulate string input
++//Including: string concatenate
++void manipulating(void);
++
++#endif
+\ No newline at end of file
+
+commit 4382fcc46f84af21341f49a0a3d637836ef55795
+Author: xiaohanfu123 <110127564+xiaohanfu123@users.noreply.github.com>
+Date:   Wed Nov 15 22:09:25 2023 -0500
+
+    Initial commit
+
+diff --git a/LICENSE b/LICENSE
+new file mode 100644
+index 0000000..3db340b
+--- /dev/null
++++ b/LICENSE
+@@ -0,0 +1,21 @@
++MIT License
++
++Copyright (c) 2023 xiaohanfu123
++
++Permission is hereby granted, free of charge, to any person obtaining a copy
++of this software and associated documentation files (the "Software"), to deal
++in the Software without restriction, including without limitation the rights
++to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
++copies of the Software, and to permit persons to whom the Software is
++furnished to do so, subject to the following conditions:
++
++The above copyright notice and this permission notice shall be included in all
++copies or substantial portions of the Software.
++
++THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
++IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
++FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
++AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
++LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
++OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
++SOFTWARE.
+diff --git a/README.md b/README.md
+new file mode 100644
+index 0000000..8a2ba66
+--- /dev/null
++++ b/README.md
+@@ -0,0 +1 @@
++# CPR101-Final-Project
+\ No newline at end of file

commit fb35c0cb69c4f6fb9c19143931e06cd68bed35b5
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Sat Dec 2 19:02:49 2023 -0500

    Version 1&2: Correct typos and revise the wording

diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
index 741f37a..8058037 100644
Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ

commit aee590574e34787390a362094b3435c46d9b39e5
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Sat Dec 2 19:01:42 2023 -0500

    Header file: Add and revise some comment for easy understanding

diff --git a/manipulating.h b/manipulating.h
index fdbd4a4..e3dcc7a 100644
--- a/manipulating.h
+++ b/manipulating.h
@@ -3,10 +3,12 @@
 #ifndef _MANIPULATING_H_
 #define _MANIPULATING_H_
 
+//All system library needed
 #include <stdio.h>
 #include <string.h>
 
-#define BUFFER_SIZE 32 // Define a constant for maximum string length
+// Define a constant for maximum length of input string 
+#define BUFFER_SIZE 32
 
 // manipulating prototype: Allow users to manipulate string input
 //Including: string concatenate

commit 412ec88a52dfcfcf65e0ceda523b8dc7b0366924
Author: Jarviniazhao <151060098+Jarviniazhao@users.noreply.github.com>
Date:   Fri Dec 1 09:30:48 2023 -0500

    Add general descriptions of manipulating

diff --git a/README.md b/README.md
index 8a2ba66..e8b903a 100644
--- a/README.md
+++ b/README.md
@@ -1 +1,4 @@
-# CPR101-Final-Project
\ No newline at end of file
+# CPR101-Final-Project
+
+- Manipulating <br />
+    This function provides the functionality to manipulate Cstings including 3 versions: string concatenation, comparison, and searching

commit 82e292e7d549d2f48775216465d2089a16e59606
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Sat Dec 2 18:57:50 2023 -0500

    Version 1&2: Revise some comments to make them easy to understand the codes

diff --git a/manipulating.c b/manipulating.c
index 31ce090..0e763bf 100644
--- a/manipulating.c
+++ b/manipulating.c
@@ -9,9 +9,9 @@ Final Project
 */
 
 /* The costomized library "manipulating.h" header file provides :
-    2 standard libraies: stdio.h and string.h
-    Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
-    Prototype for function manipulating
+    - 2 standard libraies: stdio.h and string.h
+    - Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
+    - Prototype for function manipulating
 */
 #include "manipulating.h"   
 
@@ -26,10 +26,10 @@ void manipulating(void) {
     // Display the staring message for user to understand the purpose of this demo
     //printf("**** Start of Concatenating Strings Demo ****\n");
     //// Declare 2 Cstring to store the string for concatenation 
-    //char string1[BUFFER_SIZE]; // first string 
-    //char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
+    //char string1[BUFFER_SIZE]; // first string to store user first input
+    //char string2[BUFFER_SIZE]; // second string to store user second input - concatenate to the end of first string
     //
-    //// Start a loop at least once and will continue until the user enter q to quit
+    //// Keep prompt for 2 string input until the user enter q to quit
     //do {
     //    // Prompt the user for the first string
     //    printf("Type the 1st string (q - to quit):\n");
@@ -65,11 +65,11 @@ void manipulating(void) {
     printf("**** Start of Comparing Strings Demo ****\n");
 
     // Declare 2 Cstring to store the string for comparison
-    char compare1[BUFFER_SIZE]; // first string
-    char compare2[BUFFER_SIZE]; // second string
+    char compare1[BUFFER_SIZE]; // first string to store user first input
+    char compare2[BUFFER_SIZE]; // second string to store user second input
     int result; // Store the comparison result
 
-    // Start a loop at least once and will continue until the user enter q to quit
+    // Keep prompt for 2 string input until the user enter q to quit
     do {
         // Prompt the user for the first string
         printf("Type the 1st string to compare (q - to quit):\n");
@@ -91,15 +91,15 @@ void manipulating(void) {
         result = strcmp(compare1, compare2);
 
         // Check the value of reuslt and display corresponding message to user
-        // compare1 < compare2
+        // compare1 < compare2 and output proper message to user
         if (result < 0) {
             printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
         }
-        // compare1 = compare2
+        // compare1 = compare2 and output proper message to user
         else if (result == 0) {
             printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
         }
-        // compare1 > compare2 
+        // compare1 > compare2 and output proper message to user
         else {
             printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
         }

commit 81ed31a9d9642d5a05a14ea4de92a6113df10dda
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Fri Dec 1 08:33:26 2023 -0500

    Version 2: Comment out version1 code for testing version2 only

diff --git a/manipulating.c b/manipulating.c
index e57d2ae..31ce090 100644
--- a/manipulating.c
+++ b/manipulating.c
@@ -19,42 +19,43 @@ Final Project
 Function Purpose: This function provides the functionality to manipulate Cstings
 */
 void manipulating(void) {
+
 /* Version 1 */
     //------------- Demo of String Concatenate ---------------
     
     // Display the staring message for user to understand the purpose of this demo
-    printf("**** Start of Concatenating Strings Demo ****\n");
-    // Declare 2 Cstring to store the string for concatenation 
-    char string1[BUFFER_SIZE]; // first string 
-    char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
-    
-    // Start a loop at least once and will continue until the user enter q to quit
-    do {
-        // Prompt the user for the first string
-        printf("Type the 1st string (q - to quit):\n");
-        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
-        // Remove the newline character at the end of the input string
-        string1[strlen(string1) - 1] = '\0';
-
-        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
-        if (strcmp(string1, "q") == 0) {
-            break;
-        }
-
-        // Prompt the user for the second string
-        printf("Type the 2nd string:\n");
-        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
-        // Remove the newline character at the end of the input string
-        string2[strlen(string2) - 1] = '\0'; 
-
-        // Concatenate the string2 to the string1
-        strcat(string1, string2);
-        // Display the result after concatenation
-        printf("Concatenated string is '%s'\n", string1);
-
-    } while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
-
-    printf("**** End of Concatenating Strings Demo ****\n");
+    //printf("**** Start of Concatenating Strings Demo ****\n");
+    //// Declare 2 Cstring to store the string for concatenation 
+    //char string1[BUFFER_SIZE]; // first string 
+    //char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
+    //
+    //// Start a loop at least once and will continue until the user enter q to quit
+    //do {
+    //    // Prompt the user for the first string
+    //    printf("Type the 1st string (q - to quit):\n");
+    //    fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
+    //    // Remove the newline character at the end of the input string
+    //    string1[strlen(string1) - 1] = '\0';
+
+    //    // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
+    //    if (strcmp(string1, "q") == 0) {
+    //        break;
+    //    }
+
+    //    // Prompt the user for the second string
+    //    printf("Type the 2nd string:\n");
+    //    fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
+    //    // Remove the newline character at the end of the input string
+    //    string2[strlen(string2) - 1] = '\0'; 
+
+    //    // Concatenate the string2 to the string1
+    //    strcat(string1, string2);
+    //    // Display the result after concatenation
+    //    printf("Concatenated string is '%s'\n", string1);
+
+    //} while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
+
+    //printf("**** End of Concatenating Strings Demo ****\n");
 
 
 /* Version 2 */

commit cf6e7d4417de2864bdba0e92788ef28412f3255f
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Thu Nov 30 23:45:15 2023 -0500

    Version 2: Finish testing with 7 cases with actual output and case report

diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
index 2a6351e..741f37a 100644
Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
diff --git a/manipulating-testing.txt b/manipulating-testing.txt
index 3cf3d34..1d00335 100644
--- a/manipulating-testing.txt
+++ b/manipulating-testing.txt
@@ -42,3 +42,53 @@ Type the 2nd string:
  Nice to meet you!
 Concatenated string is 'Hello this is John Smith, Nice to meet you!'
 
+------Version 2-------
+Test 1: (Identical)
+Type the 1st string to compare (q - to quit):
+test
+Type the 2nd string to compare:
+test
+"test" string is equal to "test"
+
+Test 2: (Case sensitive)
+Type the 1st string to compare (q - to quit):
+Test
+Type the 2nd string to compare:
+test
+"Test" string is less than "test"
+
+Test 3: (Different length)
+Type the 1st string to compare (q - to quit):
+Hello World
+Type the 2nd string to compare:
+Hello
+"Hello World" string is greater than "Hello"
+
+Test 4: (Empty string)
+Type the 1st string to compare (q - to quit):
+
+Type the 2nd string to compare:
+
+"" string is equal to ""
+
+Test 5: (Special characters)
+Type the 1st string to compare (q - to quit):
+@123
+Type the 2nd string to compare:
+$456
+"@123" string is greater than "$456"
+
+Test 6: (Over-the-edge: compare1 over the limit)
+Type the 1st string to compare (q - to quit):
+Hello this is John Smith, Nice to meet you!
+Type the 2nd string to compare:
+"Hello this is John Smith, Nice" string is less than "to meet you!"
+
+Test 7: (Over-the-edge: compare2 over the limit)
+Type the 1st string to compare (q - to quit):
+Hello this is John Smith, Nice
+Type the 2nd string to compare:
+Hello this is John Smith, Nice to meet you!
+"Hello this is John Smith, Nice" string is equal to "Hello this is John Smith, Nice"
+Type the 1st string to compare (q - to quit):
+Type the 2nd string to compare:
\ No newline at end of file

commit 616c573e77c8afac99a832e0c403136d98e2dd04
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Tue Nov 28 21:02:47 2023 -0500

    Version 2: Finish comments 1.0

diff --git a/manipulating.c b/manipulating.c
index caa2d08..e57d2ae 100644
--- a/manipulating.c
+++ b/manipulating.c
@@ -32,7 +32,7 @@ void manipulating(void) {
     do {
         // Prompt the user for the first string
         printf("Type the 1st string (q - to quit):\n");
-        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user
+        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
         // Remove the newline character at the end of the input string
         string1[strlen(string1) - 1] = '\0';
 
@@ -43,7 +43,7 @@ void manipulating(void) {
 
         // Prompt the user for the second string
         printf("Type the 2nd string:\n");
-        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user
+        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
         // Remove the newline character at the end of the input string
         string2[strlen(string2) - 1] = '\0'; 
 
@@ -58,31 +58,51 @@ void manipulating(void) {
 
 
 /* Version 2 */
+    //------------- Demo of String Comparing ---------------
+
+    // Display the staring message for user to understand the purpose of this demo
     printf("**** Start of Comparing Strings Demo ****\n");
-    char compare1[BUFFER_SIZE];
-    char compare2[BUFFER_SIZE];
-    int result;
+
+    // Declare 2 Cstring to store the string for comparison
+    char compare1[BUFFER_SIZE]; // first string
+    char compare2[BUFFER_SIZE]; // second string
+    int result; // Store the comparison result
+
+    // Start a loop at least once and will continue until the user enter q to quit
     do {
+        // Prompt the user for the first string
         printf("Type the 1st string to compare (q - to quit):\n");
-        fgets(compare1, BUFFER_SIZE, stdin);
+        fgets(compare1, BUFFER_SIZE, stdin); // Read the first input Cstring from user and stores in compare1
+        // Remove the newline character at the end of the input string
         compare1[strlen(compare1) - 1] = '\0';
+
+        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
         if (strcmp(compare1, "q") == 0) {
             break;
         }
+        // Prompt the user for the second string
         printf("Type the 2nd string to compare:\n");
-        fgets(compare2, BUFFER_SIZE, stdin);
+        fgets(compare2, BUFFER_SIZE, stdin); // Read the second input Cstring from user and stores in compare2
+        // Remove the newline character at the end of the input string
         compare2[strlen(compare2) - 1] = '\0';
+
+        // Compare compare1 with compare2 and store the result to variable reuslt
         result = strcmp(compare1, compare2);
+
+        // Check the value of reuslt and display corresponding message to user
+        // compare1 < compare2
         if (result < 0) {
             printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
         }
+        // compare1 = compare2
         else if (result == 0) {
             printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
         }
+        // compare1 > compare2 
         else {
             printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
         }
-    } while (strcmp(compare1, "q") != 0);
+    } while (strcmp(compare1, "q") != 0); // Continue looping until the user enter 'q' for the compare1
     printf("**** End of Comparing Strings Demo ****\n");
     
 

commit e3ef27fa8864143e0bb27371081522e2c2b888dc
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Tue Nov 28 20:48:36 2023 -0500

    Correct a comment for Version 1, which was put for wrong code

diff --git a/manipulating.c b/manipulating.c
index 58a46ce..caa2d08 100644
--- a/manipulating.c
+++ b/manipulating.c
@@ -43,9 +43,9 @@ void manipulating(void) {
 
         // Prompt the user for the second string
         printf("Type the 2nd string:\n");
-        fgets(string2, BUFFER_SIZE, stdin);
+        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user
         // Remove the newline character at the end of the input string
-        string2[strlen(string2) - 1] = '\0'; // Read the second input string from user
+        string2[strlen(string2) - 1] = '\0'; 
 
         // Concatenate the string2 to the string1
         strcat(string1, string2);

commit 9e27b4a057069b292f7bdafe6b8816e60542fe50
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Tue Nov 28 20:27:55 2023 -0500

    Adding completed work of version 1 for manipulating

diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
new file mode 100644
index 0000000..2a6351e
Binary files /dev/null and b/manipulating-test-cases.xlsx differ
diff --git a/manipulating-testing.txt b/manipulating-testing.txt
new file mode 100644
index 0000000..3cf3d34
--- /dev/null
+++ b/manipulating-testing.txt
@@ -0,0 +1,44 @@
+Manipulating Testing 
+
+------Version 1-------
+Test 1: (Normal case)
+Type the 1st string (q - to quit):
+John
+Type the 2nd string:
+ Simith
+Concatenated string is 'John Simith'
+
+Test 2: (Empty string)
+Type the 1st string (q - to quit):
+
+Type the 2nd string:
+
+Concatenated string is ''
+
+Test 3: (Edge case)
+Type the 1st string (q - to quit):
+Hi John Smith
+Type the 2nd string:
+ Nice to meet you!
+Concatenated string is 'Hi John Smith Nice to meet you!'
+
+Test 4: (Over-the-edge: string1 over the limit)
+Type the 1st string (q - to quit):
+Hello this is John Smith, Nice to meet you!
+Type the 2nd string:
+Concatenated string is 'Hello this is John Smith, Niceto meet you!'
+
+Test 5: (Over-the-edge: string2 over the limit)
+Type the 1st string (q - to quit):
+12345
+Type the 2nd string:
+Hi John Smith Nice to meet you!
+Concatenated string is '12345Hi John Smith Nice to meet you'
+
+Test 6: (Over-the-edge: after concatenation string1 over the limit)
+Type the 1st string (q - to quit):
+Hello this is John Smith,
+Type the 2nd string:
+ Nice to meet you!
+Concatenated string is 'Hello this is John Smith, Nice to meet you!'
+
diff --git a/manipulating.c b/manipulating.c
new file mode 100644
index 0000000..58a46ce
--- /dev/null
+++ b/manipulating.c
@@ -0,0 +1,114 @@
+#define _CRT_SECURE_NO_WARNINGS
+/*
+Author: Jarvinia Zhao
+Email: jzhao169@myseneca.ca
+ID: 143013233
+Date Written: 11-27-2023
+Course: CPR101.NNN
+Final Project
+*/
+
+/* The costomized library "manipulating.h" header file provides :
+    2 standard libraies: stdio.h and string.h
+    Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
+    Prototype for function manipulating
+*/
+#include "manipulating.h"   
+
+/*
+Function Purpose: This function provides the functionality to manipulate Cstings
+*/
+void manipulating(void) {
+/* Version 1 */
+    //------------- Demo of String Concatenate ---------------
+    
+    // Display the staring message for user to understand the purpose of this demo
+    printf("**** Start of Concatenating Strings Demo ****\n");
+    // Declare 2 Cstring to store the string for concatenation 
+    char string1[BUFFER_SIZE]; // first string 
+    char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
+    
+    // Start a loop at least once and will continue until the user enter q to quit
+    do {
+        // Prompt the user for the first string
+        printf("Type the 1st string (q - to quit):\n");
+        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user
+        // Remove the newline character at the end of the input string
+        string1[strlen(string1) - 1] = '\0';
+
+        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
+        if (strcmp(string1, "q") == 0) {
+            break;
+        }
+
+        // Prompt the user for the second string
+        printf("Type the 2nd string:\n");
+        fgets(string2, BUFFER_SIZE, stdin);
+        // Remove the newline character at the end of the input string
+        string2[strlen(string2) - 1] = '\0'; // Read the second input string from user
+
+        // Concatenate the string2 to the string1
+        strcat(string1, string2);
+        // Display the result after concatenation
+        printf("Concatenated string is '%s'\n", string1);
+
+    } while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
+
+    printf("**** End of Concatenating Strings Demo ****\n");
+
+
+/* Version 2 */
+    printf("**** Start of Comparing Strings Demo ****\n");
+    char compare1[BUFFER_SIZE];
+    char compare2[BUFFER_SIZE];
+    int result;
+    do {
+        printf("Type the 1st string to compare (q - to quit):\n");
+        fgets(compare1, BUFFER_SIZE, stdin);
+        compare1[strlen(compare1) - 1] = '\0';
+        if (strcmp(compare1, "q") == 0) {
+            break;
+        }
+        printf("Type the 2nd string to compare:\n");
+        fgets(compare2, BUFFER_SIZE, stdin);
+        compare2[strlen(compare2) - 1] = '\0';
+        result = strcmp(compare1, compare2);
+        if (result < 0) {
+            printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
+        }
+        else if (result == 0) {
+            printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
+        }
+        else {
+            printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
+        }
+    } while (strcmp(compare1, "q") != 0);
+    printf("**** End of Comparing Strings Demo ****\n");
+    
+
+/* Version 3 
+    printf("**** Start of Searching Strings Demo ****\n");
+    char haystack[BUFFER_SIZE];
+    char needle[BUFFER_SIZE];
+    char* occurrence = NULL;
+    do {
+        printf("Type the string (q - to quit):\n");
+        fgets(haystack, BUFFER_SIZE, stdin);
+        haystack[strlen(haystack) - 1] = '\0';
+        if (strcmp(haystack, "q") == 0) {
+            break;
+        }
+        printf("Type the substring:\n");
+        fgets(needle, BUFFER_SIZE, stdin);
+        needle[strlen(needle) - 1] = '\0';
+        occurrence = strstr(haystack, needle);
+        if (occurrence) {
+            printf("\"%s\" found at %d position\n", needle, (int)(occurrence - haystack));
+        }
+        else {
+            printf("Not found\n");
+        }
+    } while (strcmp(haystack, "q") != 0);
+    printf("**** End of Searching Strings Demo ****\n");
+    */
+}
\ No newline at end of file
diff --git a/manipulating.h b/manipulating.h
new file mode 100644
index 0000000..fdbd4a4
--- /dev/null
+++ b/manipulating.h
@@ -0,0 +1,15 @@
+#pragma once
+// MANIPULATING MODULE HEADER
+#ifndef _MANIPULATING_H_
+#define _MANIPULATING_H_
+
+#include <stdio.h>
+#include <string.h>
+
+#define BUFFER_SIZE 32 // Define a constant for maximum string length
+
+// manipulating prototype: Allow users to manipulate string input
+//Including: string concatenate
+void manipulating(void);
+
+#endif
\ No newline at end of file

commit f5ad09928971469e942fd01b76aea099fea3b317
Merge: 4382fcc 6400cfc
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Wed Dec 6 18:29:56 2023 -0500

    Merge branch 'main' of https://github.com/xiaohanfu123/CPR101-Final-Project
    
    Try to recover forced updates

commit 112684272367d45f65d0cefb41fd049346b39fff
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Wed Dec 6 14:04:06 2023 -0500

    General: new log after renaming sheet in test-case.xlsx

diff --git a/manipulating-git-log.txt b/manipulating-git-log.txt
index d31f09c..8b091e6 100644
--- a/manipulating-git-log.txt
+++ b/manipulating-git-log.txt
@@ -1,3 +1,1069 @@
+commit 44cf4ae524920927671da5f49b525f7fe894fe15
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Wed Dec 6 14:02:16 2023 -0500
+
+    General: Delete the example sheet and renamed the test-case sheet
+
+diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
+index 2fa13a7..e55d243 100644
+Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
+
+commit ade68ed792cdc989504fc2205528e57ebffb905b
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Wed Dec 6 13:47:52 2023 -0500
+
+    Version3: Add git log of version3
+
+diff --git a/manipulating-git-log.txt b/manipulating-git-log.txt
+index 7af623f..d31f09c 100644
+--- a/manipulating-git-log.txt
++++ b/manipulating-git-log.txt
+@@ -1,3 +1,1044 @@
++commit cecfd8b0942d30a1248e56d1d1968e2866004398
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Wed Dec 6 13:45:46 2023 -0500
++
++    Version3: Minor format modifications
++
++diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
++index 5449f31..2fa13a7 100644
++Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
++diff --git a/manipulating-testing.txt b/manipulating-testing.txt
++index f73a2bc..80e1c9d 100644
++--- a/manipulating-testing.txt
+++++ b/manipulating-testing.txt
++@@ -1,4 +1,4 @@
++-Manipulating Testing 
+++Manipulating Testing Records
++ 
++ -------------- Version 1: String Concatenate -------------------------------
++ >> Test 1: (Normal case)
++
++commit 5ca8d5a33a8d2db071a1748e1c439a083789c4c7
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Sat Dec 2 21:30:36 2023 -0500
++
++    Version 2: Add one more testing case - one empty string
++
++diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
++index 4990758..5449f31 100644
++Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
++diff --git a/manipulating-testing.txt b/manipulating-testing.txt
++index 57c3364..f73a2bc 100644
++--- a/manipulating-testing.txt
+++++ b/manipulating-testing.txt
++@@ -64,27 +64,34 @@ Type the 2nd string to compare:
++ Hello
++ "Hello World" string is greater than "Hello"
++ 
++->> Test 4: (Empty string)
+++>> Test 4: (Compare one empty string)
+++Type the 1st string to compare (q - to quit):
+++
+++Type the 2nd string to compare:
+++test
+++"" string is less than "test"
+++
+++>> Test 5: (Both string are empty )
++ Type the 1st string to compare (q - to quit):
++ 
++ Type the 2nd string to compare:
++ 
++ "" string is equal to ""
++ 
++->> Test 5: (Special characters)
+++>> Test 6: (Special characters)
++ Type the 1st string to compare (q - to quit):
++ @123
++ Type the 2nd string to compare:
++ $456
++ "@123" string is greater than "$456"
++ 
++->> Test 6: (Over-the-edge: compare1 over the limit)
+++>> Test 7: (Over-the-edge: compare1 over the limit)
++ Type the 1st string to compare (q - to quit):
++ Hello this is John Smith, Nice to meet you!
++ Type the 2nd string to compare:
++ "Hello this is John Smith, Nice" string is less than "to meet you!"
++ 
++->> Test 7: (Over-the-edge: compare2 over the limit)
+++>> Test 8: (Over-the-edge: compare2 over the limit)
++ Type the 1st string to compare (q - to quit):
++ Hello this is John Smith, Nice
++ Type the 2nd string to compare:
++
++commit 4b8535e987cecb5e0dc6519e9aa7a5d8b2e87950
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Sat Dec 2 21:23:39 2023 -0500
++
++    Version 3: Upload testing case records, and modify the format of testing.txt
++
++diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
++index 8058037..4990758 100644
++Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
++diff --git a/manipulating-testing.txt b/manipulating-testing.txt
++index 1d00335..57c3364 100644
++--- a/manipulating-testing.txt
+++++ b/manipulating-testing.txt
++@@ -1,94 +1,175 @@
++ Manipulating Testing 
++ 
++-------Version 1-------
++-Test 1: (Normal case)
+++-------------- Version 1: String Concatenate -------------------------------
+++>> Test 1: (Normal case)
++ Type the 1st string (q - to quit):
++ John
++ Type the 2nd string:
++  Simith
++ Concatenated string is 'John Simith'
++ 
++-Test 2: (Empty string)
+++>> Test 2: (Empty string)
++ Type the 1st string (q - to quit):
++ 
++ Type the 2nd string:
++ 
++ Concatenated string is ''
++ 
++-Test 3: (Edge case)
+++>> Test 3: (Edge case)
++ Type the 1st string (q - to quit):
++ Hi John Smith
++ Type the 2nd string:
++  Nice to meet you!
++ Concatenated string is 'Hi John Smith Nice to meet you!'
++ 
++-Test 4: (Over-the-edge: string1 over the limit)
+++>> Test 4: (Over-the-edge: string1 over the limit)
++ Type the 1st string (q - to quit):
++ Hello this is John Smith, Nice to meet you!
++ Type the 2nd string:
++ Concatenated string is 'Hello this is John Smith, Niceto meet you!'
++ 
++-Test 5: (Over-the-edge: string2 over the limit)
+++>> Test 5: (Over-the-edge: string2 over the limit)
++ Type the 1st string (q - to quit):
++ 12345
++ Type the 2nd string:
++ Hi John Smith Nice to meet you!
++ Concatenated string is '12345Hi John Smith Nice to meet you'
++ 
++-Test 6: (Over-the-edge: after concatenation string1 over the limit)
+++>> Test 6: (Over-the-edge: after concatenation string1 over the limit)
++ Type the 1st string (q - to quit):
++ Hello this is John Smith,
++ Type the 2nd string:
++  Nice to meet you!
++ Concatenated string is 'Hello this is John Smith, Nice to meet you!'
++ 
++-------Version 2-------
++-Test 1: (Identical)
+++--------------- Version 2: String Comparision -------------------------------
+++>> Test 1: (Identical)
++ Type the 1st string to compare (q - to quit):
++ test
++ Type the 2nd string to compare:
++ test
++ "test" string is equal to "test"
++ 
++-Test 2: (Case sensitive)
+++>> Test 2: (Case sensitive)
++ Type the 1st string to compare (q - to quit):
++ Test
++ Type the 2nd string to compare:
++ test
++ "Test" string is less than "test"
++ 
++-Test 3: (Different length)
+++>> Test 3: (Different length)
++ Type the 1st string to compare (q - to quit):
++ Hello World
++ Type the 2nd string to compare:
++ Hello
++ "Hello World" string is greater than "Hello"
++ 
++-Test 4: (Empty string)
+++>> Test 4: (Empty string)
++ Type the 1st string to compare (q - to quit):
++ 
++ Type the 2nd string to compare:
++ 
++ "" string is equal to ""
++ 
++-Test 5: (Special characters)
+++>> Test 5: (Special characters)
++ Type the 1st string to compare (q - to quit):
++ @123
++ Type the 2nd string to compare:
++ $456
++ "@123" string is greater than "$456"
++ 
++-Test 6: (Over-the-edge: compare1 over the limit)
+++>> Test 6: (Over-the-edge: compare1 over the limit)
++ Type the 1st string to compare (q - to quit):
++ Hello this is John Smith, Nice to meet you!
++ Type the 2nd string to compare:
++ "Hello this is John Smith, Nice" string is less than "to meet you!"
++ 
++-Test 7: (Over-the-edge: compare2 over the limit)
+++>> Test 7: (Over-the-edge: compare2 over the limit)
++ Type the 1st string to compare (q - to quit):
++ Hello this is John Smith, Nice
++ Type the 2nd string to compare:
++ Hello this is John Smith, Nice to meet you!
++ "Hello this is John Smith, Nice" string is equal to "Hello this is John Smith, Nice"
++ Type the 1st string to compare (q - to quit):
++-Type the 2nd string to compare:
++\ No newline at end of file
+++Type the 2nd string to compare:
+++
+++--------------- Version 3: String Search -------------------------------
+++>> Test 1: (Normal case)
+++Type the string (q - to quit):
+++Hello World!
+++Type the substring:
+++World
+++"World" found at 6 position
+++
+++>> Test 2: (needle at beginning)
+++Type the string (q - to quit):
+++Test starts now right?
+++Type the substring:
+++Test
+++"Test" found at 0 position
+++
+++>> Test 3: (needle at end)
+++Type the string (q - to quit):
+++This is a test
+++Type the substring:
+++test
+++"test" found at 10 position
+++
+++>> Test 4: (needle is single character)
+++Type the string (q - to quit):
+++Hello World!
+++Type the substring:
+++o
+++"o" found at 4 position
+++
+++>> Test 5: (needle not found)
+++Type the string (q - to quit):
+++Hello World!
+++Type the substring:
+++Happy
+++Not found
+++
+++>> Test 6: (haystack is empty)
+++Type the string (q - to quit):
+++
+++Type the substring:
+++test
+++Not found
+++
+++>> Test 7: (needle is empty)
+++Type the string (q - to quit):
+++test
+++Type the substring:
+++
+++"" found at 0 position
+++
+++>> Test 8: (Both string is empty)
+++Type the string (q - to quit):
+++
+++Type the substring:
+++
+++"" found at 0 position
+++
+++>> Test 9: (Over-the-edge: haystack over the limit)
+++Type the string (q - to quit):
+++one two three four five six seven eight nine ten
+++Type the substring:
+++Not found
+++
+++>> Test 10: (Over-the-edge: haystack over the limit with repeated pattern)
+++Type the string (q - to quit):
+++two three four two three four two three four two three four
+++Type the substring:
+++"wo three four two three four" found at 1 position
+++
+++>>Test 11: (Over-the-edge: needle over the limit)
+++Type the string (q - to quit):
+++four
+++Type the substring:
+++one two three four five six seven eight nine ten
+++Not found
+++Type the string (q - to quit):
+++Type the substring:
+++
+++
+++
++
++commit b70dcc9b0533d13e72fe7be9759f3bdeebd7747d
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Sat Dec 2 21:21:59 2023 -0500
++
++    Version 3: Finish code comments
++
++diff --git a/manipulating.c b/manipulating.c
++index c1f52ee..095ec35 100644
++--- a/manipulating.c
+++++ b/manipulating.c
++@@ -58,7 +58,7 @@ void manipulating(void) {
++     //printf("**** End of Concatenating Strings Demo ****\n");
++ 
++ 
++-/* Version 2 */
+++/* Version 2 
++     //------------- Demo of String Comparing ---------------
++ 
++     // Display the staring message for user to understand the purpose of this demo
++@@ -105,31 +105,49 @@ void manipulating(void) {
++         }
++     } while (strcmp(compare1, "q") != 0); // Continue looping until the user enter 'q' for the compare1
++     printf("**** End of Comparing Strings Demo ****\n");
+++    */
++     
++ 
++ /* Version 3 */
+++    //------------- Demo of String Search ---------------
+++
+++    // Display the staring message for user to understand the purpose of this demo
++     printf("**** Start of Searching Strings Demo ****\n");
++-    char haystack[BUFFER_SIZE];
++-    char needle[BUFFER_SIZE];
++-    char* occurrence = NULL;
+++    char haystack[BUFFER_SIZE]; // string to store user input as a searching library
+++    char needle[BUFFER_SIZE];  // string to store user input as a searching keyword
+++    char* occurrence = NULL; // variable to store search result, NULL = not found
+++    
+++    // Keep prompt for 2 string input until the user enter q to quit
++     do {
+++        // Prompt the user for the library string
++         printf("Type the string (q - to quit):\n");
++-        fgets(haystack, BUFFER_SIZE, stdin);
+++        fgets(haystack, BUFFER_SIZE, stdin); // Read the first input Cstring from user and stores in haystack
+++        // Remove the newline character at the end of the input string
++         haystack[strlen(haystack) - 1] = '\0';
+++        
+++        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
++         if (strcmp(haystack, "q") == 0) {
++             break;
++         }
+++        
+++        // Prompt the user for the keyword string/substring
++         printf("Type the substring:\n");
++-        fgets(needle, BUFFER_SIZE, stdin);
+++        fgets(needle, BUFFER_SIZE, stdin); // Read the second input Cstring from user and stores in needle
+++        // Remove the newline character at the end of the input string
++         needle[strlen(needle) - 1] = '\0';
+++
+++        //Search the occurrence of needle in haystack and store the result in variable occurance
++         occurrence = strstr(haystack, needle);
+++
+++        // Check the value of occurence and display corresponding message to user
+++        // Found the needle in haystack and give the exact position of needle in haystack
++         if (occurrence) {
++             printf("\"%s\" found at %d position\n", needle, (int)(occurrence - haystack));
++         }
++         else {
++             printf("Not found\n");
++         }
++-    } while (strcmp(haystack, "q") != 0);
+++    } while (strcmp(haystack, "q") != 0);// Continue looping until the user enter 'q' for the haystack
++     printf("**** End of Searching Strings Demo ****\n");
++     
++ }
++\ No newline at end of file
++
++commit be760f11843fc5c19823ee5807bad95400b2702f
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Sat Dec 2 19:29:27 2023 -0500
++
++    Version 3: Code without any comments
++
++diff --git a/manipulating.c b/manipulating.c
++index 0e763bf..c1f52ee 100644
++--- a/manipulating.c
+++++ b/manipulating.c
++@@ -107,7 +107,7 @@ void manipulating(void) {
++     printf("**** End of Comparing Strings Demo ****\n");
++     
++ 
++-/* Version 3 
+++/* Version 3 */
++     printf("**** Start of Searching Strings Demo ****\n");
++     char haystack[BUFFER_SIZE];
++     char needle[BUFFER_SIZE];
++@@ -131,5 +131,5 @@ void manipulating(void) {
++         }
++     } while (strcmp(haystack, "q") != 0);
++     printf("**** End of Searching Strings Demo ****\n");
++-    */
+++    
++ }
++\ No newline at end of file
++
++commit 60a339ffd2fcde2efa9b67ff5a315351107677a3
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Sat Dec 2 19:11:51 2023 -0500
++
++    Version 2: upload git log
++
++diff --git a/manipulating-git-log.txt b/manipulating-git-log.txt
++new file mode 100644
++index 0000000..7af623f
++--- /dev/null
+++++ b/manipulating-git-log.txt
++@@ -0,0 +1,643 @@
+++commit 65fd6432ce4b971660a56f7f960f06a714405a9b
+++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+++Date:   Sat Dec 2 19:02:49 2023 -0500
+++
+++    Version 1&2: Correct typos and revise the wording
+++
+++diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
+++index 741f37a..8058037 100644
+++Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
+++
+++commit 4b5197c169be2a959933edfdd976b123ed44f42e
+++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+++Date:   Sat Dec 2 19:01:42 2023 -0500
+++
+++    Header file: Add and revise some comment for easy understanding
+++
+++diff --git a/manipulating.h b/manipulating.h
+++index fdbd4a4..e3dcc7a 100644
+++--- a/manipulating.h
++++++ b/manipulating.h
+++@@ -3,10 +3,12 @@
+++ #ifndef _MANIPULATING_H_
+++ #define _MANIPULATING_H_
+++ 
++++//All system library needed
+++ #include <stdio.h>
+++ #include <string.h>
+++ 
+++-#define BUFFER_SIZE 32 // Define a constant for maximum string length
++++// Define a constant for maximum length of input string 
++++#define BUFFER_SIZE 32
+++ 
+++ // manipulating prototype: Allow users to manipulate string input
+++ //Including: string concatenate
+++
+++commit bccbd7b3a5fbf9465d1852b3dd642777bf3f29ce
+++Merge: 5724194 723cf02
+++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+++Date:   Sat Dec 2 18:58:38 2023 -0500
+++
+++    Merge branch 'manipulating' of https://github.com/xiaohanfu123/CPR101-Final-Project into manipulating
+++
+++commit 5724194a681ef0c8997824b91fc692f6dc29686f
+++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+++Date:   Sat Dec 2 18:57:50 2023 -0500
+++
+++    Version 1&2: Revise some comments to make them easy to understand the codes
+++
+++diff --git a/manipulating.c b/manipulating.c
+++index 31ce090..0e763bf 100644
+++--- a/manipulating.c
++++++ b/manipulating.c
+++@@ -9,9 +9,9 @@ Final Project
+++ */
+++ 
+++ /* The costomized library "manipulating.h" header file provides :
+++-    2 standard libraies: stdio.h and string.h
+++-    Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
+++-    Prototype for function manipulating
++++    - 2 standard libraies: stdio.h and string.h
++++    - Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
++++    - Prototype for function manipulating
+++ */
+++ #include "manipulating.h"   
+++ 
+++@@ -26,10 +26,10 @@ void manipulating(void) {
+++     // Display the staring message for user to understand the purpose of this demo
+++     //printf("**** Start of Concatenating Strings Demo ****\n");
+++     //// Declare 2 Cstring to store the string for concatenation 
+++-    //char string1[BUFFER_SIZE]; // first string 
+++-    //char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
++++    //char string1[BUFFER_SIZE]; // first string to store user first input
++++    //char string2[BUFFER_SIZE]; // second string to store user second input - concatenate to the end of first string
+++     //
+++-    //// Start a loop at least once and will continue until the user enter q to quit
++++    //// Keep prompt for 2 string input until the user enter q to quit
+++     //do {
+++     //    // Prompt the user for the first string
+++     //    printf("Type the 1st string (q - to quit):\n");
+++@@ -65,11 +65,11 @@ void manipulating(void) {
+++     printf("**** Start of Comparing Strings Demo ****\n");
+++ 
+++     // Declare 2 Cstring to store the string for comparison
+++-    char compare1[BUFFER_SIZE]; // first string
+++-    char compare2[BUFFER_SIZE]; // second string
++++    char compare1[BUFFER_SIZE]; // first string to store user first input
++++    char compare2[BUFFER_SIZE]; // second string to store user second input
+++     int result; // Store the comparison result
+++ 
+++-    // Start a loop at least once and will continue until the user enter q to quit
++++    // Keep prompt for 2 string input until the user enter q to quit
+++     do {
+++         // Prompt the user for the first string
+++         printf("Type the 1st string to compare (q - to quit):\n");
+++@@ -91,15 +91,15 @@ void manipulating(void) {
+++         result = strcmp(compare1, compare2);
+++ 
+++         // Check the value of reuslt and display corresponding message to user
+++-        // compare1 < compare2
++++        // compare1 < compare2 and output proper message to user
+++         if (result < 0) {
+++             printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
+++         }
+++-        // compare1 = compare2
++++        // compare1 = compare2 and output proper message to user
+++         else if (result == 0) {
+++             printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
+++         }
+++-        // compare1 > compare2 
++++        // compare1 > compare2 and output proper message to user
+++         else {
+++             printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
+++         }
+++
+++commit 723cf0212615fd781700c1580261a1488b866e62
+++Author: Jarviniazhao <151060098+Jarviniazhao@users.noreply.github.com>
+++Date:   Fri Dec 1 09:30:48 2023 -0500
+++
+++    Add general descriptions of manipulating
+++
+++diff --git a/README.md b/README.md
+++index 8a2ba66..e8b903a 100644
+++--- a/README.md
++++++ b/README.md
+++@@ -1 +1,4 @@
+++-# CPR101-Final-Project
+++\ No newline at end of file
++++# CPR101-Final-Project
++++
++++- Manipulating <br />
++++    This function provides the functionality to manipulate Cstings including 3 versions: string concatenation, comparison, and searching
+++
+++commit 259290768c7d6f4affc068cf206f83183da7ecb6
+++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+++Date:   Fri Dec 1 08:33:26 2023 -0500
+++
+++    Version 2: Comment out version1 code for testing version2 only
+++
+++diff --git a/manipulating.c b/manipulating.c
+++index e57d2ae..31ce090 100644
+++--- a/manipulating.c
++++++ b/manipulating.c
+++@@ -19,42 +19,43 @@ Final Project
+++ Function Purpose: This function provides the functionality to manipulate Cstings
+++ */
+++ void manipulating(void) {
++++
+++ /* Version 1 */
+++     //------------- Demo of String Concatenate ---------------
+++     
+++     // Display the staring message for user to understand the purpose of this demo
+++-    printf("**** Start of Concatenating Strings Demo ****\n");
+++-    // Declare 2 Cstring to store the string for concatenation 
+++-    char string1[BUFFER_SIZE]; // first string 
+++-    char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
+++-    
+++-    // Start a loop at least once and will continue until the user enter q to quit
+++-    do {
+++-        // Prompt the user for the first string
+++-        printf("Type the 1st string (q - to quit):\n");
+++-        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
+++-        // Remove the newline character at the end of the input string
+++-        string1[strlen(string1) - 1] = '\0';
+++-
+++-        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
+++-        if (strcmp(string1, "q") == 0) {
+++-            break;
+++-        }
+++-
+++-        // Prompt the user for the second string
+++-        printf("Type the 2nd string:\n");
+++-        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
+++-        // Remove the newline character at the end of the input string
+++-        string2[strlen(string2) - 1] = '\0'; 
+++-
+++-        // Concatenate the string2 to the string1
+++-        strcat(string1, string2);
+++-        // Display the result after concatenation
+++-        printf("Concatenated string is '%s'\n", string1);
+++-
+++-    } while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
+++-
+++-    printf("**** End of Concatenating Strings Demo ****\n");
++++    //printf("**** Start of Concatenating Strings Demo ****\n");
++++    //// Declare 2 Cstring to store the string for concatenation 
++++    //char string1[BUFFER_SIZE]; // first string 
++++    //char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
++++    //
++++    //// Start a loop at least once and will continue until the user enter q to quit
++++    //do {
++++    //    // Prompt the user for the first string
++++    //    printf("Type the 1st string (q - to quit):\n");
++++    //    fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
++++    //    // Remove the newline character at the end of the input string
++++    //    string1[strlen(string1) - 1] = '\0';
++++
++++    //    // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
++++    //    if (strcmp(string1, "q") == 0) {
++++    //        break;
++++    //    }
++++
++++    //    // Prompt the user for the second string
++++    //    printf("Type the 2nd string:\n");
++++    //    fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
++++    //    // Remove the newline character at the end of the input string
++++    //    string2[strlen(string2) - 1] = '\0'; 
++++
++++    //    // Concatenate the string2 to the string1
++++    //    strcat(string1, string2);
++++    //    // Display the result after concatenation
++++    //    printf("Concatenated string is '%s'\n", string1);
++++
++++    //} while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
++++
++++    //printf("**** End of Concatenating Strings Demo ****\n");
+++ 
+++ 
+++ /* Version 2 */
+++
+++commit 99c9ceef9a88f431213291029a49e438562858bd
+++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+++Date:   Thu Nov 30 23:45:15 2023 -0500
+++
+++    Version 2: Finish testing with 7 cases with actual output and case report
+++
+++diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
+++index 2a6351e..741f37a 100644
+++Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
+++diff --git a/manipulating-testing.txt b/manipulating-testing.txt
+++index 3cf3d34..1d00335 100644
+++--- a/manipulating-testing.txt
++++++ b/manipulating-testing.txt
+++@@ -42,3 +42,53 @@ Type the 2nd string:
+++  Nice to meet you!
+++ Concatenated string is 'Hello this is John Smith, Nice to meet you!'
+++ 
++++------Version 2-------
++++Test 1: (Identical)
++++Type the 1st string to compare (q - to quit):
++++test
++++Type the 2nd string to compare:
++++test
++++"test" string is equal to "test"
++++
++++Test 2: (Case sensitive)
++++Type the 1st string to compare (q - to quit):
++++Test
++++Type the 2nd string to compare:
++++test
++++"Test" string is less than "test"
++++
++++Test 3: (Different length)
++++Type the 1st string to compare (q - to quit):
++++Hello World
++++Type the 2nd string to compare:
++++Hello
++++"Hello World" string is greater than "Hello"
++++
++++Test 4: (Empty string)
++++Type the 1st string to compare (q - to quit):
++++
++++Type the 2nd string to compare:
++++
++++"" string is equal to ""
++++
++++Test 5: (Special characters)
++++Type the 1st string to compare (q - to quit):
++++@123
++++Type the 2nd string to compare:
++++$456
++++"@123" string is greater than "$456"
++++
++++Test 6: (Over-the-edge: compare1 over the limit)
++++Type the 1st string to compare (q - to quit):
++++Hello this is John Smith, Nice to meet you!
++++Type the 2nd string to compare:
++++"Hello this is John Smith, Nice" string is less than "to meet you!"
++++
++++Test 7: (Over-the-edge: compare2 over the limit)
++++Type the 1st string to compare (q - to quit):
++++Hello this is John Smith, Nice
++++Type the 2nd string to compare:
++++Hello this is John Smith, Nice to meet you!
++++"Hello this is John Smith, Nice" string is equal to "Hello this is John Smith, Nice"
++++Type the 1st string to compare (q - to quit):
++++Type the 2nd string to compare:
+++\ No newline at end of file
+++
+++commit e1419a3e16637354960b9e5ad4878737841c65c4
+++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+++Date:   Tue Nov 28 21:02:47 2023 -0500
+++
+++    Version 2: Finish comments 1.0
+++
+++diff --git a/manipulating.c b/manipulating.c
+++index caa2d08..e57d2ae 100644
+++--- a/manipulating.c
++++++ b/manipulating.c
+++@@ -32,7 +32,7 @@ void manipulating(void) {
+++     do {
+++         // Prompt the user for the first string
+++         printf("Type the 1st string (q - to quit):\n");
+++-        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user
++++        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
+++         // Remove the newline character at the end of the input string
+++         string1[strlen(string1) - 1] = '\0';
+++ 
+++@@ -43,7 +43,7 @@ void manipulating(void) {
+++ 
+++         // Prompt the user for the second string
+++         printf("Type the 2nd string:\n");
+++-        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user
++++        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
+++         // Remove the newline character at the end of the input string
+++         string2[strlen(string2) - 1] = '\0'; 
+++ 
+++@@ -58,31 +58,51 @@ void manipulating(void) {
+++ 
+++ 
+++ /* Version 2 */
++++    //------------- Demo of String Comparing ---------------
++++
++++    // Display the staring message for user to understand the purpose of this demo
+++     printf("**** Start of Comparing Strings Demo ****\n");
+++-    char compare1[BUFFER_SIZE];
+++-    char compare2[BUFFER_SIZE];
+++-    int result;
++++
++++    // Declare 2 Cstring to store the string for comparison
++++    char compare1[BUFFER_SIZE]; // first string
++++    char compare2[BUFFER_SIZE]; // second string
++++    int result; // Store the comparison result
++++
++++    // Start a loop at least once and will continue until the user enter q to quit
+++     do {
++++        // Prompt the user for the first string
+++         printf("Type the 1st string to compare (q - to quit):\n");
+++-        fgets(compare1, BUFFER_SIZE, stdin);
++++        fgets(compare1, BUFFER_SIZE, stdin); // Read the first input Cstring from user and stores in compare1
++++        // Remove the newline character at the end of the input string
+++         compare1[strlen(compare1) - 1] = '\0';
++++
++++        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
+++         if (strcmp(compare1, "q") == 0) {
+++             break;
+++         }
++++        // Prompt the user for the second string
+++         printf("Type the 2nd string to compare:\n");
+++-        fgets(compare2, BUFFER_SIZE, stdin);
++++        fgets(compare2, BUFFER_SIZE, stdin); // Read the second input Cstring from user and stores in compare2
++++        // Remove the newline character at the end of the input string
+++         compare2[strlen(compare2) - 1] = '\0';
++++
++++        // Compare compare1 with compare2 and store the result to variable reuslt
+++         result = strcmp(compare1, compare2);
++++
++++        // Check the value of reuslt and display corresponding message to user
++++        // compare1 < compare2
+++         if (result < 0) {
+++             printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
+++         }
++++        // compare1 = compare2
+++         else if (result == 0) {
+++             printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
+++         }
++++        // compare1 > compare2 
+++         else {
+++             printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
+++         }
+++-    } while (strcmp(compare1, "q") != 0);
++++    } while (strcmp(compare1, "q") != 0); // Continue looping until the user enter 'q' for the compare1
+++     printf("**** End of Comparing Strings Demo ****\n");
+++     
+++ 
+++
+++commit 63486a4aa9da65f01fe5b158a7a62d3683e27e23
+++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+++Date:   Tue Nov 28 20:48:36 2023 -0500
+++
+++    Correct a comment for Version 1, which was put for wrong code
+++
+++diff --git a/manipulating.c b/manipulating.c
+++index 58a46ce..caa2d08 100644
+++--- a/manipulating.c
++++++ b/manipulating.c
+++@@ -43,9 +43,9 @@ void manipulating(void) {
+++ 
+++         // Prompt the user for the second string
+++         printf("Type the 2nd string:\n");
+++-        fgets(string2, BUFFER_SIZE, stdin);
++++        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user
+++         // Remove the newline character at the end of the input string
+++-        string2[strlen(string2) - 1] = '\0'; // Read the second input string from user
++++        string2[strlen(string2) - 1] = '\0'; 
+++ 
+++         // Concatenate the string2 to the string1
+++         strcat(string1, string2);
+++
+++commit 13220bd1bfb31415bbed9664fd1e9fb3796c0525
+++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+++Date:   Tue Nov 28 20:27:55 2023 -0500
+++
+++    Adding completed work of version 1 for manipulating
+++
+++diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
+++new file mode 100644
+++index 0000000..2a6351e
+++Binary files /dev/null and b/manipulating-test-cases.xlsx differ
+++diff --git a/manipulating-testing.txt b/manipulating-testing.txt
+++new file mode 100644
+++index 0000000..3cf3d34
+++--- /dev/null
++++++ b/manipulating-testing.txt
+++@@ -0,0 +1,44 @@
++++Manipulating Testing 
++++
++++------Version 1-------
++++Test 1: (Normal case)
++++Type the 1st string (q - to quit):
++++John
++++Type the 2nd string:
++++ Simith
++++Concatenated string is 'John Simith'
++++
++++Test 2: (Empty string)
++++Type the 1st string (q - to quit):
++++
++++Type the 2nd string:
++++
++++Concatenated string is ''
++++
++++Test 3: (Edge case)
++++Type the 1st string (q - to quit):
++++Hi John Smith
++++Type the 2nd string:
++++ Nice to meet you!
++++Concatenated string is 'Hi John Smith Nice to meet you!'
++++
++++Test 4: (Over-the-edge: string1 over the limit)
++++Type the 1st string (q - to quit):
++++Hello this is John Smith, Nice to meet you!
++++Type the 2nd string:
++++Concatenated string is 'Hello this is John Smith, Niceto meet you!'
++++
++++Test 5: (Over-the-edge: string2 over the limit)
++++Type the 1st string (q - to quit):
++++12345
++++Type the 2nd string:
++++Hi John Smith Nice to meet you!
++++Concatenated string is '12345Hi John Smith Nice to meet you'
++++
++++Test 6: (Over-the-edge: after concatenation string1 over the limit)
++++Type the 1st string (q - to quit):
++++Hello this is John Smith,
++++Type the 2nd string:
++++ Nice to meet you!
++++Concatenated string is 'Hello this is John Smith, Nice to meet you!'
++++
+++diff --git a/manipulating.c b/manipulating.c
+++new file mode 100644
+++index 0000000..58a46ce
+++--- /dev/null
++++++ b/manipulating.c
+++@@ -0,0 +1,114 @@
++++#define _CRT_SECURE_NO_WARNINGS
++++/*
++++Author: Jarvinia Zhao
++++Email: jzhao169@myseneca.ca
++++ID: 143013233
++++Date Written: 11-27-2023
++++Course: CPR101.NNN
++++Final Project
++++*/
++++
++++/* The costomized library "manipulating.h" header file provides :
++++    2 standard libraies: stdio.h and string.h
++++    Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
++++    Prototype for function manipulating
++++*/
++++#include "manipulating.h"   
++++
++++/*
++++Function Purpose: This function provides the functionality to manipulate Cstings
++++*/
++++void manipulating(void) {
++++/* Version 1 */
++++    //------------- Demo of String Concatenate ---------------
++++    
++++    // Display the staring message for user to understand the purpose of this demo
++++    printf("**** Start of Concatenating Strings Demo ****\n");
++++    // Declare 2 Cstring to store the string for concatenation 
++++    char string1[BUFFER_SIZE]; // first string 
++++    char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
++++    
++++    // Start a loop at least once and will continue until the user enter q to quit
++++    do {
++++        // Prompt the user for the first string
++++        printf("Type the 1st string (q - to quit):\n");
++++        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user
++++        // Remove the newline character at the end of the input string
++++        string1[strlen(string1) - 1] = '\0';
++++
++++        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
++++        if (strcmp(string1, "q") == 0) {
++++            break;
++++        }
++++
++++        // Prompt the user for the second string
++++        printf("Type the 2nd string:\n");
++++        fgets(string2, BUFFER_SIZE, stdin);
++++        // Remove the newline character at the end of the input string
++++        string2[strlen(string2) - 1] = '\0'; // Read the second input string from user
++++
++++        // Concatenate the string2 to the string1
++++        strcat(string1, string2);
++++        // Display the result after concatenation
++++        printf("Concatenated string is '%s'\n", string1);
++++
++++    } while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
++++
++++    printf("**** End of Concatenating Strings Demo ****\n");
++++
++++
++++/* Version 2 */
++++    printf("**** Start of Comparing Strings Demo ****\n");
++++    char compare1[BUFFER_SIZE];
++++    char compare2[BUFFER_SIZE];
++++    int result;
++++    do {
++++        printf("Type the 1st string to compare (q - to quit):\n");
++++        fgets(compare1, BUFFER_SIZE, stdin);
++++        compare1[strlen(compare1) - 1] = '\0';
++++        if (strcmp(compare1, "q") == 0) {
++++            break;
++++        }
++++        printf("Type the 2nd string to compare:\n");
++++        fgets(compare2, BUFFER_SIZE, stdin);
++++        compare2[strlen(compare2) - 1] = '\0';
++++        result = strcmp(compare1, compare2);
++++        if (result < 0) {
++++            printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
++++        }
++++        else if (result == 0) {
++++            printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
++++        }
++++        else {
++++            printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
++++        }
++++    } while (strcmp(compare1, "q") != 0);
++++    printf("**** End of Comparing Strings Demo ****\n");
++++    
++++
++++/* Version 3 
++++    printf("**** Start of Searching Strings Demo ****\n");
++++    char haystack[BUFFER_SIZE];
++++    char needle[BUFFER_SIZE];
++++    char* occurrence = NULL;
++++    do {
++++        printf("Type the string (q - to quit):\n");
++++        fgets(haystack, BUFFER_SIZE, stdin);
++++        haystack[strlen(haystack) - 1] = '\0';
++++        if (strcmp(haystack, "q") == 0) {
++++            break;
++++        }
++++        printf("Type the substring:\n");
++++        fgets(needle, BUFFER_SIZE, stdin);
++++        needle[strlen(needle) - 1] = '\0';
++++        occurrence = strstr(haystack, needle);
++++        if (occurrence) {
++++            printf("\"%s\" found at %d position\n", needle, (int)(occurrence - haystack));
++++        }
++++        else {
++++            printf("Not found\n");
++++        }
++++    } while (strcmp(haystack, "q") != 0);
++++    printf("**** End of Searching Strings Demo ****\n");
++++    */
++++}
+++\ No newline at end of file
+++diff --git a/manipulating.h b/manipulating.h
+++new file mode 100644
+++index 0000000..fdbd4a4
+++--- /dev/null
++++++ b/manipulating.h
+++@@ -0,0 +1,15 @@
++++#pragma once
++++// MANIPULATING MODULE HEADER
++++#ifndef _MANIPULATING_H_
++++#define _MANIPULATING_H_
++++
++++#include <stdio.h>
++++#include <string.h>
++++
++++#define BUFFER_SIZE 32 // Define a constant for maximum string length
++++
++++// manipulating prototype: Allow users to manipulate string input
++++//Including: string concatenate
++++void manipulating(void);
++++
++++#endif
+++\ No newline at end of file
+++
+++commit 4382fcc46f84af21341f49a0a3d637836ef55795
+++Author: xiaohanfu123 <110127564+xiaohanfu123@users.noreply.github.com>
+++Date:   Wed Nov 15 22:09:25 2023 -0500
+++
+++    Initial commit
+++
+++diff --git a/LICENSE b/LICENSE
+++new file mode 100644
+++index 0000000..3db340b
+++--- /dev/null
++++++ b/LICENSE
+++@@ -0,0 +1,21 @@
++++MIT License
++++
++++Copyright (c) 2023 xiaohanfu123
++++
++++Permission is hereby granted, free of charge, to any person obtaining a copy
++++of this software and associated documentation files (the "Software"), to deal
++++in the Software without restriction, including without limitation the rights
++++to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
++++copies of the Software, and to permit persons to whom the Software is
++++furnished to do so, subject to the following conditions:
++++
++++The above copyright notice and this permission notice shall be included in all
++++copies or substantial portions of the Software.
++++
++++THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
++++IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
++++FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
++++AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
++++LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
++++OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
++++SOFTWARE.
+++diff --git a/README.md b/README.md
+++new file mode 100644
+++index 0000000..8a2ba66
+++--- /dev/null
++++++ b/README.md
+++@@ -0,0 +1 @@
++++# CPR101-Final-Project
+++\ No newline at end of file
++
+ commit 65fd6432ce4b971660a56f7f960f06a714405a9b
+ Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+ Date:   Sat Dec 2 19:02:49 2023 -0500
+
 commit cecfd8b0942d30a1248e56d1d1968e2866004398
 Author: Jarvinia Zhao <jzhao169@myseneca.ca>
 Date:   Wed Dec 6 13:45:46 2023 -0500

commit 44cf4ae524920927671da5f49b525f7fe894fe15
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Wed Dec 6 14:02:16 2023 -0500

    General: Delete the example sheet and renamed the test-case sheet

diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
index 2fa13a7..e55d243 100644
Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ

commit ade68ed792cdc989504fc2205528e57ebffb905b
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Wed Dec 6 13:47:52 2023 -0500

    Version3: Add git log of version3

diff --git a/manipulating-git-log.txt b/manipulating-git-log.txt
index 7af623f..d31f09c 100644
--- a/manipulating-git-log.txt
+++ b/manipulating-git-log.txt
@@ -1,3 +1,1044 @@
+commit cecfd8b0942d30a1248e56d1d1968e2866004398
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Wed Dec 6 13:45:46 2023 -0500
+
+    Version3: Minor format modifications
+
+diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
+index 5449f31..2fa13a7 100644
+Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
+diff --git a/manipulating-testing.txt b/manipulating-testing.txt
+index f73a2bc..80e1c9d 100644
+--- a/manipulating-testing.txt
++++ b/manipulating-testing.txt
+@@ -1,4 +1,4 @@
+-Manipulating Testing 
++Manipulating Testing Records
+ 
+ -------------- Version 1: String Concatenate -------------------------------
+ >> Test 1: (Normal case)
+
+commit 5ca8d5a33a8d2db071a1748e1c439a083789c4c7
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Sat Dec 2 21:30:36 2023 -0500
+
+    Version 2: Add one more testing case - one empty string
+
+diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
+index 4990758..5449f31 100644
+Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
+diff --git a/manipulating-testing.txt b/manipulating-testing.txt
+index 57c3364..f73a2bc 100644
+--- a/manipulating-testing.txt
++++ b/manipulating-testing.txt
+@@ -64,27 +64,34 @@ Type the 2nd string to compare:
+ Hello
+ "Hello World" string is greater than "Hello"
+ 
+->> Test 4: (Empty string)
++>> Test 4: (Compare one empty string)
++Type the 1st string to compare (q - to quit):
++
++Type the 2nd string to compare:
++test
++"" string is less than "test"
++
++>> Test 5: (Both string are empty )
+ Type the 1st string to compare (q - to quit):
+ 
+ Type the 2nd string to compare:
+ 
+ "" string is equal to ""
+ 
+->> Test 5: (Special characters)
++>> Test 6: (Special characters)
+ Type the 1st string to compare (q - to quit):
+ @123
+ Type the 2nd string to compare:
+ $456
+ "@123" string is greater than "$456"
+ 
+->> Test 6: (Over-the-edge: compare1 over the limit)
++>> Test 7: (Over-the-edge: compare1 over the limit)
+ Type the 1st string to compare (q - to quit):
+ Hello this is John Smith, Nice to meet you!
+ Type the 2nd string to compare:
+ "Hello this is John Smith, Nice" string is less than "to meet you!"
+ 
+->> Test 7: (Over-the-edge: compare2 over the limit)
++>> Test 8: (Over-the-edge: compare2 over the limit)
+ Type the 1st string to compare (q - to quit):
+ Hello this is John Smith, Nice
+ Type the 2nd string to compare:
+
+commit 4b8535e987cecb5e0dc6519e9aa7a5d8b2e87950
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Sat Dec 2 21:23:39 2023 -0500
+
+    Version 3: Upload testing case records, and modify the format of testing.txt
+
+diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
+index 8058037..4990758 100644
+Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
+diff --git a/manipulating-testing.txt b/manipulating-testing.txt
+index 1d00335..57c3364 100644
+--- a/manipulating-testing.txt
++++ b/manipulating-testing.txt
+@@ -1,94 +1,175 @@
+ Manipulating Testing 
+ 
+-------Version 1-------
+-Test 1: (Normal case)
++-------------- Version 1: String Concatenate -------------------------------
++>> Test 1: (Normal case)
+ Type the 1st string (q - to quit):
+ John
+ Type the 2nd string:
+  Simith
+ Concatenated string is 'John Simith'
+ 
+-Test 2: (Empty string)
++>> Test 2: (Empty string)
+ Type the 1st string (q - to quit):
+ 
+ Type the 2nd string:
+ 
+ Concatenated string is ''
+ 
+-Test 3: (Edge case)
++>> Test 3: (Edge case)
+ Type the 1st string (q - to quit):
+ Hi John Smith
+ Type the 2nd string:
+  Nice to meet you!
+ Concatenated string is 'Hi John Smith Nice to meet you!'
+ 
+-Test 4: (Over-the-edge: string1 over the limit)
++>> Test 4: (Over-the-edge: string1 over the limit)
+ Type the 1st string (q - to quit):
+ Hello this is John Smith, Nice to meet you!
+ Type the 2nd string:
+ Concatenated string is 'Hello this is John Smith, Niceto meet you!'
+ 
+-Test 5: (Over-the-edge: string2 over the limit)
++>> Test 5: (Over-the-edge: string2 over the limit)
+ Type the 1st string (q - to quit):
+ 12345
+ Type the 2nd string:
+ Hi John Smith Nice to meet you!
+ Concatenated string is '12345Hi John Smith Nice to meet you'
+ 
+-Test 6: (Over-the-edge: after concatenation string1 over the limit)
++>> Test 6: (Over-the-edge: after concatenation string1 over the limit)
+ Type the 1st string (q - to quit):
+ Hello this is John Smith,
+ Type the 2nd string:
+  Nice to meet you!
+ Concatenated string is 'Hello this is John Smith, Nice to meet you!'
+ 
+-------Version 2-------
+-Test 1: (Identical)
++--------------- Version 2: String Comparision -------------------------------
++>> Test 1: (Identical)
+ Type the 1st string to compare (q - to quit):
+ test
+ Type the 2nd string to compare:
+ test
+ "test" string is equal to "test"
+ 
+-Test 2: (Case sensitive)
++>> Test 2: (Case sensitive)
+ Type the 1st string to compare (q - to quit):
+ Test
+ Type the 2nd string to compare:
+ test
+ "Test" string is less than "test"
+ 
+-Test 3: (Different length)
++>> Test 3: (Different length)
+ Type the 1st string to compare (q - to quit):
+ Hello World
+ Type the 2nd string to compare:
+ Hello
+ "Hello World" string is greater than "Hello"
+ 
+-Test 4: (Empty string)
++>> Test 4: (Empty string)
+ Type the 1st string to compare (q - to quit):
+ 
+ Type the 2nd string to compare:
+ 
+ "" string is equal to ""
+ 
+-Test 5: (Special characters)
++>> Test 5: (Special characters)
+ Type the 1st string to compare (q - to quit):
+ @123
+ Type the 2nd string to compare:
+ $456
+ "@123" string is greater than "$456"
+ 
+-Test 6: (Over-the-edge: compare1 over the limit)
++>> Test 6: (Over-the-edge: compare1 over the limit)
+ Type the 1st string to compare (q - to quit):
+ Hello this is John Smith, Nice to meet you!
+ Type the 2nd string to compare:
+ "Hello this is John Smith, Nice" string is less than "to meet you!"
+ 
+-Test 7: (Over-the-edge: compare2 over the limit)
++>> Test 7: (Over-the-edge: compare2 over the limit)
+ Type the 1st string to compare (q - to quit):
+ Hello this is John Smith, Nice
+ Type the 2nd string to compare:
+ Hello this is John Smith, Nice to meet you!
+ "Hello this is John Smith, Nice" string is equal to "Hello this is John Smith, Nice"
+ Type the 1st string to compare (q - to quit):
+-Type the 2nd string to compare:
+\ No newline at end of file
++Type the 2nd string to compare:
++
++--------------- Version 3: String Search -------------------------------
++>> Test 1: (Normal case)
++Type the string (q - to quit):
++Hello World!
++Type the substring:
++World
++"World" found at 6 position
++
++>> Test 2: (needle at beginning)
++Type the string (q - to quit):
++Test starts now right?
++Type the substring:
++Test
++"Test" found at 0 position
++
++>> Test 3: (needle at end)
++Type the string (q - to quit):
++This is a test
++Type the substring:
++test
++"test" found at 10 position
++
++>> Test 4: (needle is single character)
++Type the string (q - to quit):
++Hello World!
++Type the substring:
++o
++"o" found at 4 position
++
++>> Test 5: (needle not found)
++Type the string (q - to quit):
++Hello World!
++Type the substring:
++Happy
++Not found
++
++>> Test 6: (haystack is empty)
++Type the string (q - to quit):
++
++Type the substring:
++test
++Not found
++
++>> Test 7: (needle is empty)
++Type the string (q - to quit):
++test
++Type the substring:
++
++"" found at 0 position
++
++>> Test 8: (Both string is empty)
++Type the string (q - to quit):
++
++Type the substring:
++
++"" found at 0 position
++
++>> Test 9: (Over-the-edge: haystack over the limit)
++Type the string (q - to quit):
++one two three four five six seven eight nine ten
++Type the substring:
++Not found
++
++>> Test 10: (Over-the-edge: haystack over the limit with repeated pattern)
++Type the string (q - to quit):
++two three four two three four two three four two three four
++Type the substring:
++"wo three four two three four" found at 1 position
++
++>>Test 11: (Over-the-edge: needle over the limit)
++Type the string (q - to quit):
++four
++Type the substring:
++one two three four five six seven eight nine ten
++Not found
++Type the string (q - to quit):
++Type the substring:
++
++
++
+
+commit b70dcc9b0533d13e72fe7be9759f3bdeebd7747d
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Sat Dec 2 21:21:59 2023 -0500
+
+    Version 3: Finish code comments
+
+diff --git a/manipulating.c b/manipulating.c
+index c1f52ee..095ec35 100644
+--- a/manipulating.c
++++ b/manipulating.c
+@@ -58,7 +58,7 @@ void manipulating(void) {
+     //printf("**** End of Concatenating Strings Demo ****\n");
+ 
+ 
+-/* Version 2 */
++/* Version 2 
+     //------------- Demo of String Comparing ---------------
+ 
+     // Display the staring message for user to understand the purpose of this demo
+@@ -105,31 +105,49 @@ void manipulating(void) {
+         }
+     } while (strcmp(compare1, "q") != 0); // Continue looping until the user enter 'q' for the compare1
+     printf("**** End of Comparing Strings Demo ****\n");
++    */
+     
+ 
+ /* Version 3 */
++    //------------- Demo of String Search ---------------
++
++    // Display the staring message for user to understand the purpose of this demo
+     printf("**** Start of Searching Strings Demo ****\n");
+-    char haystack[BUFFER_SIZE];
+-    char needle[BUFFER_SIZE];
+-    char* occurrence = NULL;
++    char haystack[BUFFER_SIZE]; // string to store user input as a searching library
++    char needle[BUFFER_SIZE];  // string to store user input as a searching keyword
++    char* occurrence = NULL; // variable to store search result, NULL = not found
++    
++    // Keep prompt for 2 string input until the user enter q to quit
+     do {
++        // Prompt the user for the library string
+         printf("Type the string (q - to quit):\n");
+-        fgets(haystack, BUFFER_SIZE, stdin);
++        fgets(haystack, BUFFER_SIZE, stdin); // Read the first input Cstring from user and stores in haystack
++        // Remove the newline character at the end of the input string
+         haystack[strlen(haystack) - 1] = '\0';
++        
++        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
+         if (strcmp(haystack, "q") == 0) {
+             break;
+         }
++        
++        // Prompt the user for the keyword string/substring
+         printf("Type the substring:\n");
+-        fgets(needle, BUFFER_SIZE, stdin);
++        fgets(needle, BUFFER_SIZE, stdin); // Read the second input Cstring from user and stores in needle
++        // Remove the newline character at the end of the input string
+         needle[strlen(needle) - 1] = '\0';
++
++        //Search the occurrence of needle in haystack and store the result in variable occurance
+         occurrence = strstr(haystack, needle);
++
++        // Check the value of occurence and display corresponding message to user
++        // Found the needle in haystack and give the exact position of needle in haystack
+         if (occurrence) {
+             printf("\"%s\" found at %d position\n", needle, (int)(occurrence - haystack));
+         }
+         else {
+             printf("Not found\n");
+         }
+-    } while (strcmp(haystack, "q") != 0);
++    } while (strcmp(haystack, "q") != 0);// Continue looping until the user enter 'q' for the haystack
+     printf("**** End of Searching Strings Demo ****\n");
+     
+ }
+\ No newline at end of file
+
+commit be760f11843fc5c19823ee5807bad95400b2702f
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Sat Dec 2 19:29:27 2023 -0500
+
+    Version 3: Code without any comments
+
+diff --git a/manipulating.c b/manipulating.c
+index 0e763bf..c1f52ee 100644
+--- a/manipulating.c
++++ b/manipulating.c
+@@ -107,7 +107,7 @@ void manipulating(void) {
+     printf("**** End of Comparing Strings Demo ****\n");
+     
+ 
+-/* Version 3 
++/* Version 3 */
+     printf("**** Start of Searching Strings Demo ****\n");
+     char haystack[BUFFER_SIZE];
+     char needle[BUFFER_SIZE];
+@@ -131,5 +131,5 @@ void manipulating(void) {
+         }
+     } while (strcmp(haystack, "q") != 0);
+     printf("**** End of Searching Strings Demo ****\n");
+-    */
++    
+ }
+\ No newline at end of file
+
+commit 60a339ffd2fcde2efa9b67ff5a315351107677a3
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Sat Dec 2 19:11:51 2023 -0500
+
+    Version 2: upload git log
+
+diff --git a/manipulating-git-log.txt b/manipulating-git-log.txt
+new file mode 100644
+index 0000000..7af623f
+--- /dev/null
++++ b/manipulating-git-log.txt
+@@ -0,0 +1,643 @@
++commit 65fd6432ce4b971660a56f7f960f06a714405a9b
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Sat Dec 2 19:02:49 2023 -0500
++
++    Version 1&2: Correct typos and revise the wording
++
++diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
++index 741f37a..8058037 100644
++Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
++
++commit 4b5197c169be2a959933edfdd976b123ed44f42e
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Sat Dec 2 19:01:42 2023 -0500
++
++    Header file: Add and revise some comment for easy understanding
++
++diff --git a/manipulating.h b/manipulating.h
++index fdbd4a4..e3dcc7a 100644
++--- a/manipulating.h
+++++ b/manipulating.h
++@@ -3,10 +3,12 @@
++ #ifndef _MANIPULATING_H_
++ #define _MANIPULATING_H_
++ 
+++//All system library needed
++ #include <stdio.h>
++ #include <string.h>
++ 
++-#define BUFFER_SIZE 32 // Define a constant for maximum string length
+++// Define a constant for maximum length of input string 
+++#define BUFFER_SIZE 32
++ 
++ // manipulating prototype: Allow users to manipulate string input
++ //Including: string concatenate
++
++commit bccbd7b3a5fbf9465d1852b3dd642777bf3f29ce
++Merge: 5724194 723cf02
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Sat Dec 2 18:58:38 2023 -0500
++
++    Merge branch 'manipulating' of https://github.com/xiaohanfu123/CPR101-Final-Project into manipulating
++
++commit 5724194a681ef0c8997824b91fc692f6dc29686f
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Sat Dec 2 18:57:50 2023 -0500
++
++    Version 1&2: Revise some comments to make them easy to understand the codes
++
++diff --git a/manipulating.c b/manipulating.c
++index 31ce090..0e763bf 100644
++--- a/manipulating.c
+++++ b/manipulating.c
++@@ -9,9 +9,9 @@ Final Project
++ */
++ 
++ /* The costomized library "manipulating.h" header file provides :
++-    2 standard libraies: stdio.h and string.h
++-    Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
++-    Prototype for function manipulating
+++    - 2 standard libraies: stdio.h and string.h
+++    - Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
+++    - Prototype for function manipulating
++ */
++ #include "manipulating.h"   
++ 
++@@ -26,10 +26,10 @@ void manipulating(void) {
++     // Display the staring message for user to understand the purpose of this demo
++     //printf("**** Start of Concatenating Strings Demo ****\n");
++     //// Declare 2 Cstring to store the string for concatenation 
++-    //char string1[BUFFER_SIZE]; // first string 
++-    //char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
+++    //char string1[BUFFER_SIZE]; // first string to store user first input
+++    //char string2[BUFFER_SIZE]; // second string to store user second input - concatenate to the end of first string
++     //
++-    //// Start a loop at least once and will continue until the user enter q to quit
+++    //// Keep prompt for 2 string input until the user enter q to quit
++     //do {
++     //    // Prompt the user for the first string
++     //    printf("Type the 1st string (q - to quit):\n");
++@@ -65,11 +65,11 @@ void manipulating(void) {
++     printf("**** Start of Comparing Strings Demo ****\n");
++ 
++     // Declare 2 Cstring to store the string for comparison
++-    char compare1[BUFFER_SIZE]; // first string
++-    char compare2[BUFFER_SIZE]; // second string
+++    char compare1[BUFFER_SIZE]; // first string to store user first input
+++    char compare2[BUFFER_SIZE]; // second string to store user second input
++     int result; // Store the comparison result
++ 
++-    // Start a loop at least once and will continue until the user enter q to quit
+++    // Keep prompt for 2 string input until the user enter q to quit
++     do {
++         // Prompt the user for the first string
++         printf("Type the 1st string to compare (q - to quit):\n");
++@@ -91,15 +91,15 @@ void manipulating(void) {
++         result = strcmp(compare1, compare2);
++ 
++         // Check the value of reuslt and display corresponding message to user
++-        // compare1 < compare2
+++        // compare1 < compare2 and output proper message to user
++         if (result < 0) {
++             printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
++         }
++-        // compare1 = compare2
+++        // compare1 = compare2 and output proper message to user
++         else if (result == 0) {
++             printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
++         }
++-        // compare1 > compare2 
+++        // compare1 > compare2 and output proper message to user
++         else {
++             printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
++         }
++
++commit 723cf0212615fd781700c1580261a1488b866e62
++Author: Jarviniazhao <151060098+Jarviniazhao@users.noreply.github.com>
++Date:   Fri Dec 1 09:30:48 2023 -0500
++
++    Add general descriptions of manipulating
++
++diff --git a/README.md b/README.md
++index 8a2ba66..e8b903a 100644
++--- a/README.md
+++++ b/README.md
++@@ -1 +1,4 @@
++-# CPR101-Final-Project
++\ No newline at end of file
+++# CPR101-Final-Project
+++
+++- Manipulating <br />
+++    This function provides the functionality to manipulate Cstings including 3 versions: string concatenation, comparison, and searching
++
++commit 259290768c7d6f4affc068cf206f83183da7ecb6
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Fri Dec 1 08:33:26 2023 -0500
++
++    Version 2: Comment out version1 code for testing version2 only
++
++diff --git a/manipulating.c b/manipulating.c
++index e57d2ae..31ce090 100644
++--- a/manipulating.c
+++++ b/manipulating.c
++@@ -19,42 +19,43 @@ Final Project
++ Function Purpose: This function provides the functionality to manipulate Cstings
++ */
++ void manipulating(void) {
+++
++ /* Version 1 */
++     //------------- Demo of String Concatenate ---------------
++     
++     // Display the staring message for user to understand the purpose of this demo
++-    printf("**** Start of Concatenating Strings Demo ****\n");
++-    // Declare 2 Cstring to store the string for concatenation 
++-    char string1[BUFFER_SIZE]; // first string 
++-    char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
++-    
++-    // Start a loop at least once and will continue until the user enter q to quit
++-    do {
++-        // Prompt the user for the first string
++-        printf("Type the 1st string (q - to quit):\n");
++-        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
++-        // Remove the newline character at the end of the input string
++-        string1[strlen(string1) - 1] = '\0';
++-
++-        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
++-        if (strcmp(string1, "q") == 0) {
++-            break;
++-        }
++-
++-        // Prompt the user for the second string
++-        printf("Type the 2nd string:\n");
++-        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
++-        // Remove the newline character at the end of the input string
++-        string2[strlen(string2) - 1] = '\0'; 
++-
++-        // Concatenate the string2 to the string1
++-        strcat(string1, string2);
++-        // Display the result after concatenation
++-        printf("Concatenated string is '%s'\n", string1);
++-
++-    } while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
++-
++-    printf("**** End of Concatenating Strings Demo ****\n");
+++    //printf("**** Start of Concatenating Strings Demo ****\n");
+++    //// Declare 2 Cstring to store the string for concatenation 
+++    //char string1[BUFFER_SIZE]; // first string 
+++    //char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
+++    //
+++    //// Start a loop at least once and will continue until the user enter q to quit
+++    //do {
+++    //    // Prompt the user for the first string
+++    //    printf("Type the 1st string (q - to quit):\n");
+++    //    fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
+++    //    // Remove the newline character at the end of the input string
+++    //    string1[strlen(string1) - 1] = '\0';
+++
+++    //    // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
+++    //    if (strcmp(string1, "q") == 0) {
+++    //        break;
+++    //    }
+++
+++    //    // Prompt the user for the second string
+++    //    printf("Type the 2nd string:\n");
+++    //    fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
+++    //    // Remove the newline character at the end of the input string
+++    //    string2[strlen(string2) - 1] = '\0'; 
+++
+++    //    // Concatenate the string2 to the string1
+++    //    strcat(string1, string2);
+++    //    // Display the result after concatenation
+++    //    printf("Concatenated string is '%s'\n", string1);
+++
+++    //} while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
+++
+++    //printf("**** End of Concatenating Strings Demo ****\n");
++ 
++ 
++ /* Version 2 */
++
++commit 99c9ceef9a88f431213291029a49e438562858bd
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Thu Nov 30 23:45:15 2023 -0500
++
++    Version 2: Finish testing with 7 cases with actual output and case report
++
++diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
++index 2a6351e..741f37a 100644
++Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
++diff --git a/manipulating-testing.txt b/manipulating-testing.txt
++index 3cf3d34..1d00335 100644
++--- a/manipulating-testing.txt
+++++ b/manipulating-testing.txt
++@@ -42,3 +42,53 @@ Type the 2nd string:
++  Nice to meet you!
++ Concatenated string is 'Hello this is John Smith, Nice to meet you!'
++ 
+++------Version 2-------
+++Test 1: (Identical)
+++Type the 1st string to compare (q - to quit):
+++test
+++Type the 2nd string to compare:
+++test
+++"test" string is equal to "test"
+++
+++Test 2: (Case sensitive)
+++Type the 1st string to compare (q - to quit):
+++Test
+++Type the 2nd string to compare:
+++test
+++"Test" string is less than "test"
+++
+++Test 3: (Different length)
+++Type the 1st string to compare (q - to quit):
+++Hello World
+++Type the 2nd string to compare:
+++Hello
+++"Hello World" string is greater than "Hello"
+++
+++Test 4: (Empty string)
+++Type the 1st string to compare (q - to quit):
+++
+++Type the 2nd string to compare:
+++
+++"" string is equal to ""
+++
+++Test 5: (Special characters)
+++Type the 1st string to compare (q - to quit):
+++@123
+++Type the 2nd string to compare:
+++$456
+++"@123" string is greater than "$456"
+++
+++Test 6: (Over-the-edge: compare1 over the limit)
+++Type the 1st string to compare (q - to quit):
+++Hello this is John Smith, Nice to meet you!
+++Type the 2nd string to compare:
+++"Hello this is John Smith, Nice" string is less than "to meet you!"
+++
+++Test 7: (Over-the-edge: compare2 over the limit)
+++Type the 1st string to compare (q - to quit):
+++Hello this is John Smith, Nice
+++Type the 2nd string to compare:
+++Hello this is John Smith, Nice to meet you!
+++"Hello this is John Smith, Nice" string is equal to "Hello this is John Smith, Nice"
+++Type the 1st string to compare (q - to quit):
+++Type the 2nd string to compare:
++\ No newline at end of file
++
++commit e1419a3e16637354960b9e5ad4878737841c65c4
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Tue Nov 28 21:02:47 2023 -0500
++
++    Version 2: Finish comments 1.0
++
++diff --git a/manipulating.c b/manipulating.c
++index caa2d08..e57d2ae 100644
++--- a/manipulating.c
+++++ b/manipulating.c
++@@ -32,7 +32,7 @@ void manipulating(void) {
++     do {
++         // Prompt the user for the first string
++         printf("Type the 1st string (q - to quit):\n");
++-        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user
+++        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
++         // Remove the newline character at the end of the input string
++         string1[strlen(string1) - 1] = '\0';
++ 
++@@ -43,7 +43,7 @@ void manipulating(void) {
++ 
++         // Prompt the user for the second string
++         printf("Type the 2nd string:\n");
++-        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user
+++        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
++         // Remove the newline character at the end of the input string
++         string2[strlen(string2) - 1] = '\0'; 
++ 
++@@ -58,31 +58,51 @@ void manipulating(void) {
++ 
++ 
++ /* Version 2 */
+++    //------------- Demo of String Comparing ---------------
+++
+++    // Display the staring message for user to understand the purpose of this demo
++     printf("**** Start of Comparing Strings Demo ****\n");
++-    char compare1[BUFFER_SIZE];
++-    char compare2[BUFFER_SIZE];
++-    int result;
+++
+++    // Declare 2 Cstring to store the string for comparison
+++    char compare1[BUFFER_SIZE]; // first string
+++    char compare2[BUFFER_SIZE]; // second string
+++    int result; // Store the comparison result
+++
+++    // Start a loop at least once and will continue until the user enter q to quit
++     do {
+++        // Prompt the user for the first string
++         printf("Type the 1st string to compare (q - to quit):\n");
++-        fgets(compare1, BUFFER_SIZE, stdin);
+++        fgets(compare1, BUFFER_SIZE, stdin); // Read the first input Cstring from user and stores in compare1
+++        // Remove the newline character at the end of the input string
++         compare1[strlen(compare1) - 1] = '\0';
+++
+++        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
++         if (strcmp(compare1, "q") == 0) {
++             break;
++         }
+++        // Prompt the user for the second string
++         printf("Type the 2nd string to compare:\n");
++-        fgets(compare2, BUFFER_SIZE, stdin);
+++        fgets(compare2, BUFFER_SIZE, stdin); // Read the second input Cstring from user and stores in compare2
+++        // Remove the newline character at the end of the input string
++         compare2[strlen(compare2) - 1] = '\0';
+++
+++        // Compare compare1 with compare2 and store the result to variable reuslt
++         result = strcmp(compare1, compare2);
+++
+++        // Check the value of reuslt and display corresponding message to user
+++        // compare1 < compare2
++         if (result < 0) {
++             printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
++         }
+++        // compare1 = compare2
++         else if (result == 0) {
++             printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
++         }
+++        // compare1 > compare2 
++         else {
++             printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
++         }
++-    } while (strcmp(compare1, "q") != 0);
+++    } while (strcmp(compare1, "q") != 0); // Continue looping until the user enter 'q' for the compare1
++     printf("**** End of Comparing Strings Demo ****\n");
++     
++ 
++
++commit 63486a4aa9da65f01fe5b158a7a62d3683e27e23
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Tue Nov 28 20:48:36 2023 -0500
++
++    Correct a comment for Version 1, which was put for wrong code
++
++diff --git a/manipulating.c b/manipulating.c
++index 58a46ce..caa2d08 100644
++--- a/manipulating.c
+++++ b/manipulating.c
++@@ -43,9 +43,9 @@ void manipulating(void) {
++ 
++         // Prompt the user for the second string
++         printf("Type the 2nd string:\n");
++-        fgets(string2, BUFFER_SIZE, stdin);
+++        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user
++         // Remove the newline character at the end of the input string
++-        string2[strlen(string2) - 1] = '\0'; // Read the second input string from user
+++        string2[strlen(string2) - 1] = '\0'; 
++ 
++         // Concatenate the string2 to the string1
++         strcat(string1, string2);
++
++commit 13220bd1bfb31415bbed9664fd1e9fb3796c0525
++Author: Jarvinia Zhao <jzhao169@myseneca.ca>
++Date:   Tue Nov 28 20:27:55 2023 -0500
++
++    Adding completed work of version 1 for manipulating
++
++diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
++new file mode 100644
++index 0000000..2a6351e
++Binary files /dev/null and b/manipulating-test-cases.xlsx differ
++diff --git a/manipulating-testing.txt b/manipulating-testing.txt
++new file mode 100644
++index 0000000..3cf3d34
++--- /dev/null
+++++ b/manipulating-testing.txt
++@@ -0,0 +1,44 @@
+++Manipulating Testing 
+++
+++------Version 1-------
+++Test 1: (Normal case)
+++Type the 1st string (q - to quit):
+++John
+++Type the 2nd string:
+++ Simith
+++Concatenated string is 'John Simith'
+++
+++Test 2: (Empty string)
+++Type the 1st string (q - to quit):
+++
+++Type the 2nd string:
+++
+++Concatenated string is ''
+++
+++Test 3: (Edge case)
+++Type the 1st string (q - to quit):
+++Hi John Smith
+++Type the 2nd string:
+++ Nice to meet you!
+++Concatenated string is 'Hi John Smith Nice to meet you!'
+++
+++Test 4: (Over-the-edge: string1 over the limit)
+++Type the 1st string (q - to quit):
+++Hello this is John Smith, Nice to meet you!
+++Type the 2nd string:
+++Concatenated string is 'Hello this is John Smith, Niceto meet you!'
+++
+++Test 5: (Over-the-edge: string2 over the limit)
+++Type the 1st string (q - to quit):
+++12345
+++Type the 2nd string:
+++Hi John Smith Nice to meet you!
+++Concatenated string is '12345Hi John Smith Nice to meet you'
+++
+++Test 6: (Over-the-edge: after concatenation string1 over the limit)
+++Type the 1st string (q - to quit):
+++Hello this is John Smith,
+++Type the 2nd string:
+++ Nice to meet you!
+++Concatenated string is 'Hello this is John Smith, Nice to meet you!'
+++
++diff --git a/manipulating.c b/manipulating.c
++new file mode 100644
++index 0000000..58a46ce
++--- /dev/null
+++++ b/manipulating.c
++@@ -0,0 +1,114 @@
+++#define _CRT_SECURE_NO_WARNINGS
+++/*
+++Author: Jarvinia Zhao
+++Email: jzhao169@myseneca.ca
+++ID: 143013233
+++Date Written: 11-27-2023
+++Course: CPR101.NNN
+++Final Project
+++*/
+++
+++/* The costomized library "manipulating.h" header file provides :
+++    2 standard libraies: stdio.h and string.h
+++    Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
+++    Prototype for function manipulating
+++*/
+++#include "manipulating.h"   
+++
+++/*
+++Function Purpose: This function provides the functionality to manipulate Cstings
+++*/
+++void manipulating(void) {
+++/* Version 1 */
+++    //------------- Demo of String Concatenate ---------------
+++    
+++    // Display the staring message for user to understand the purpose of this demo
+++    printf("**** Start of Concatenating Strings Demo ****\n");
+++    // Declare 2 Cstring to store the string for concatenation 
+++    char string1[BUFFER_SIZE]; // first string 
+++    char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
+++    
+++    // Start a loop at least once and will continue until the user enter q to quit
+++    do {
+++        // Prompt the user for the first string
+++        printf("Type the 1st string (q - to quit):\n");
+++        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user
+++        // Remove the newline character at the end of the input string
+++        string1[strlen(string1) - 1] = '\0';
+++
+++        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
+++        if (strcmp(string1, "q") == 0) {
+++            break;
+++        }
+++
+++        // Prompt the user for the second string
+++        printf("Type the 2nd string:\n");
+++        fgets(string2, BUFFER_SIZE, stdin);
+++        // Remove the newline character at the end of the input string
+++        string2[strlen(string2) - 1] = '\0'; // Read the second input string from user
+++
+++        // Concatenate the string2 to the string1
+++        strcat(string1, string2);
+++        // Display the result after concatenation
+++        printf("Concatenated string is '%s'\n", string1);
+++
+++    } while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
+++
+++    printf("**** End of Concatenating Strings Demo ****\n");
+++
+++
+++/* Version 2 */
+++    printf("**** Start of Comparing Strings Demo ****\n");
+++    char compare1[BUFFER_SIZE];
+++    char compare2[BUFFER_SIZE];
+++    int result;
+++    do {
+++        printf("Type the 1st string to compare (q - to quit):\n");
+++        fgets(compare1, BUFFER_SIZE, stdin);
+++        compare1[strlen(compare1) - 1] = '\0';
+++        if (strcmp(compare1, "q") == 0) {
+++            break;
+++        }
+++        printf("Type the 2nd string to compare:\n");
+++        fgets(compare2, BUFFER_SIZE, stdin);
+++        compare2[strlen(compare2) - 1] = '\0';
+++        result = strcmp(compare1, compare2);
+++        if (result < 0) {
+++            printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
+++        }
+++        else if (result == 0) {
+++            printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
+++        }
+++        else {
+++            printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
+++        }
+++    } while (strcmp(compare1, "q") != 0);
+++    printf("**** End of Comparing Strings Demo ****\n");
+++    
+++
+++/* Version 3 
+++    printf("**** Start of Searching Strings Demo ****\n");
+++    char haystack[BUFFER_SIZE];
+++    char needle[BUFFER_SIZE];
+++    char* occurrence = NULL;
+++    do {
+++        printf("Type the string (q - to quit):\n");
+++        fgets(haystack, BUFFER_SIZE, stdin);
+++        haystack[strlen(haystack) - 1] = '\0';
+++        if (strcmp(haystack, "q") == 0) {
+++            break;
+++        }
+++        printf("Type the substring:\n");
+++        fgets(needle, BUFFER_SIZE, stdin);
+++        needle[strlen(needle) - 1] = '\0';
+++        occurrence = strstr(haystack, needle);
+++        if (occurrence) {
+++            printf("\"%s\" found at %d position\n", needle, (int)(occurrence - haystack));
+++        }
+++        else {
+++            printf("Not found\n");
+++        }
+++    } while (strcmp(haystack, "q") != 0);
+++    printf("**** End of Searching Strings Demo ****\n");
+++    */
+++}
++\ No newline at end of file
++diff --git a/manipulating.h b/manipulating.h
++new file mode 100644
++index 0000000..fdbd4a4
++--- /dev/null
+++++ b/manipulating.h
++@@ -0,0 +1,15 @@
+++#pragma once
+++// MANIPULATING MODULE HEADER
+++#ifndef _MANIPULATING_H_
+++#define _MANIPULATING_H_
+++
+++#include <stdio.h>
+++#include <string.h>
+++
+++#define BUFFER_SIZE 32 // Define a constant for maximum string length
+++
+++// manipulating prototype: Allow users to manipulate string input
+++//Including: string concatenate
+++void manipulating(void);
+++
+++#endif
++\ No newline at end of file
++
++commit 4382fcc46f84af21341f49a0a3d637836ef55795
++Author: xiaohanfu123 <110127564+xiaohanfu123@users.noreply.github.com>
++Date:   Wed Nov 15 22:09:25 2023 -0500
++
++    Initial commit
++
++diff --git a/LICENSE b/LICENSE
++new file mode 100644
++index 0000000..3db340b
++--- /dev/null
+++++ b/LICENSE
++@@ -0,0 +1,21 @@
+++MIT License
+++
+++Copyright (c) 2023 xiaohanfu123
+++
+++Permission is hereby granted, free of charge, to any person obtaining a copy
+++of this software and associated documentation files (the "Software"), to deal
+++in the Software without restriction, including without limitation the rights
+++to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+++copies of the Software, and to permit persons to whom the Software is
+++furnished to do so, subject to the following conditions:
+++
+++The above copyright notice and this permission notice shall be included in all
+++copies or substantial portions of the Software.
+++
+++THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+++IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+++FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+++AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+++LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+++OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+++SOFTWARE.
++diff --git a/README.md b/README.md
++new file mode 100644
++index 0000000..8a2ba66
++--- /dev/null
+++++ b/README.md
++@@ -0,0 +1 @@
+++# CPR101-Final-Project
++\ No newline at end of file
+
 commit 65fd6432ce4b971660a56f7f960f06a714405a9b
 Author: Jarvinia Zhao <jzhao169@myseneca.ca>
 Date:   Sat Dec 2 19:02:49 2023 -0500

commit cecfd8b0942d30a1248e56d1d1968e2866004398
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Wed Dec 6 13:45:46 2023 -0500

    Version3: Minor format modifications

diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
index 5449f31..2fa13a7 100644
Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
diff --git a/manipulating-testing.txt b/manipulating-testing.txt
index f73a2bc..80e1c9d 100644
--- a/manipulating-testing.txt
+++ b/manipulating-testing.txt
@@ -1,4 +1,4 @@
-Manipulating Testing 
+Manipulating Testing Records
 
 -------------- Version 1: String Concatenate -------------------------------
 >> Test 1: (Normal case)

commit 6400cfc1dca1c37ed5f8adbc1137647cb75b6fc5
Author: whchau1 <whchau1@myseneca.ca>
Date:   Wed Dec 6 04:13:06 2023 -0500

    V2

diff --git a/tokenizing-test-cases.xlsx b/tokenizing-test-cases.xlsx
index 8f78ee1..a5db0a7 100644
Binary files a/tokenizing-test-cases.xlsx and b/tokenizing-test-cases.xlsx differ
diff --git a/tokenizing.c b/tokenizing.c
index f0b6640..6caea55 100644
--- a/tokenizing.c
+++ b/tokenizing.c
@@ -14,31 +14,49 @@ Final Project
 
 void tokenizing() {
 	/* Version 1 */
+	//printf("*** Start of Tokenizing Words Demo ***\n");
+	//char words[BUFFER_SIZE];  //words will be used for user input
+	//char* nextWord = NULL;  //nextWord is an array to store the return of tokenized strings.
+	//int wordsCounter;  //wordsCounter will be used to count how many tokenized words are in the delimited input
+
+	//do {
+	//	printf("Type a few words separated by space (q - to quit):\n");
+	//	fgets(words, BUFFER_SIZE, stdin);  //receives input from user and store in words[]
+	//	words[strlen(words) - 1] = '\0';  //Put a null terminator to the end of array
+	//	if (strcmp(words, "q") != 0) {  //Do the tokenizing if user doesn't input 'q'
+	//		nextWord = strtok(words, " ");  //use of tokenizing function to tokenize the word by delimiter 'whitespace'
+	//		wordsCounter = 1;  //Count the words, start with 1
+	//		while (nextWord) {  //A loop for printing tokenized words unless no more are found
+	//			printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord); //Print the tokenized words
+	//			nextWord = strtok(NULL, " ");  //Get the next tokenized words
+	//		}
+	//	}
+	//} while (strcmp(words, "q") != 0);  //infinite loop unless 'q' is input by user
+	//printf("*** End of Tokenizing Words Demo ***\n\n");
+
+
+/* Version 2 */
+//>> insert here
 	printf("*** Start of Tokenizing Words Demo ***\n");
-	char words[BUFFER_SIZE];  //words will be used for user input
-	char* nextWord = NULL;  //nextWord is an array to store the return of tokenized strings.
-	int wordsCounter;  //wordsCounter will be used to count how many tokenized words are in the delimited input
+	char phrases[BUFFER_SIZE];  //phrases will be used for user input and is the argument for 
+	char* nextPhrase = NULL;  //nextPhrase is an array to store the return of tokenized strings.
+	int phrasesCounter;  //phrasesCounter will be used to count how many tokenized phrases are in the delimited input
 
 	do {
 		printf("Type a few words separated by space (q - to quit):\n");
-		fgets(words, BUFFER_SIZE, stdin);  //receives input from user and store in words[]
-		words[strlen(words) - 1] = '\0';  //Put a null terminator to the end of array
-		if (strcmp(words, "q") != 0) {  //Do the tokenizing if user doesn't input 'q'
-			nextWord = strtok(words, " ");  //use of tokenizing function to tokenize the word by delimiter 'whitespace'
-			wordsCounter = 1;  //Count the words, start with 1
-			while (nextWord) {  //A loop for printing tokenized words unless no more are found
-				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord); //Print the tokenized words
-				nextWord = strtok(NULL, " ");  //Get the next tokenized words
+		fgets(phrases, BUFFER_SIZE, stdin);  //receives input from user and store in phrases[]
+		phrases[strlen(phrases) - 1] = '\0';  //Put a null terminator to the end of array
+		if (strcmp(phrases, "q") != 0) {  //Do the tokenizing if user doesn't input 'q'
+			nextPhrase = strtok(phrases, ",");  //use of tokenizing function to tokenize the input by delimiter ','(comma)
+			phrasesCounter = 1;  //Count the words, start with 1
+			while (nextPhrase) {  //A loop for printing tokenized phrases unless no more are found
+				printf("Phrase #%d is \'%s\'\n", phrasesCounter++, nextPhrase); //Print the tokenized phrases
+				nextPhrase = strtok(NULL, ",");  //Get the next tokenized phrases
 			}
 		}
-	} while (strcmp(words, "q") != 0);  //infinite loop unless 'q' is input by user
+	} while (strcmp(phrases, "q") != 0);  //infinite loop unless 'q' is input by user
 	printf("*** End of Tokenizing Words Demo ***\n\n");
 
-
-/* Version 2 */
-//>> insert here
-
-
 /* Version 3 */
 //>> insert here
 
diff --git a/tokenizing_testing.txt b/tokenizing_testing.txt
index a16c7b4..661a37a 100644
--- a/tokenizing_testing.txt
+++ b/tokenizing_testing.txt
@@ -48,4 +48,60 @@ q Hello World!
 Word #1 is 'q'
 Word #2 is 'Hello'
 Word #3 is 'World!'
+*** End of Tokenizing Words Demo ***
+
+
+
+------Version 2-------
+Test case 1:
+*** Start of Tokenizing Words Demo ***
+Type a few words separated by space (q - to quit):
+Hello, World!!, 123, 1,2,3
+Phrase #1 is 'Hello'
+Phrase #2 is ' World!!'
+Phrase #3 is ' 123'
+Phrase #4 is ' 1'
+Phrase #5 is '2'
+Phrase #6 is '3'
+Type a few words separated by space (q - to quit):
+
+
+Test case 2:
+Type a few words separated by space (q - to quit):
+Hi123,,,,,,,,,,,,,,,,,Hi123
+Phrase #1 is 'Hi123'
+Phrase #2 is 'Hi123'
+Type a few words separated by space (q - to quit):
+
+
+Test case 3:
+Type a few words separated by space (q - to quit):
+,,,,,,,,,
+Type a few words separated by space (q - to quit):
+
+
+Test case 4:
+Type a few words separated by space (q - to quit):
+1111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110
+Phrase #1 is '1111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111'
+Type a few words separated by space (q - to quit):
+Phrase #1 is '01111111110'
+Type a few words separated by space (q - to quit):
+
+
+Test case 5:
+Type a few words separated by space (q - to quit):
+1111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110,11111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110,1111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110
+Phrase #1 is '1111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110'
+Phrase #2 is '11111111101111111110111111111011111111101111111110111111111011111111101111111110111111111011111111101111111110'
+Phrase #3 is '11111111101111111110111111111011111111101111111110111111111011111111101111111110111111'
+Type a few words separated by space (q - to quit):
+Phrase #1 is '1101111111110'
+Type a few words separated by space (q - to quit):
+
+
+Test case 6:Type a few words separated by space (q - to quit):
+q,123
+Phrase #1 is 'q'
+Phrase #2 is '123'
 *** End of Tokenizing Words Demo ***
\ No newline at end of file

commit 2d3288b0d1c038bdfb353346166417bd43e23416
Author: HANFU XIAO <hxiao15@mySeneca.ca>
Date:   Wed Dec 6 02:43:50 2023 -0500

     Version 3

diff --git a/Converting_testing.txt b/Converting_testing.txt
index b2c70a3..6a9c041 100644
--- a/Converting_testing.txt
+++ b/Converting_testing.txt
@@ -36,3 +36,13 @@ Type the double numeric string (q - to quit):
 Converted number is 0.123457
 Type the double numeric string (q - to quit):
 1
+
+*** Start of Converting Strings to long Demo ***
+Type the long numeric string (q - to quit):
+12345678987654321
+Converted number is 2147483647
+Type the long numeric string (q - to quit):
+123456789
+Converted number is 123456789
+Type the long numeric string (q - to quit):
+
diff --git a/converting-test-cases.xlsx b/converting-test-cases.xlsx
index 54dd640..7d5e750 100644
Binary files a/converting-test-cases.xlsx and b/converting-test-cases.xlsx differ
diff --git a/converting.c b/converting.c
index b1262fe..4c71ae6 100644
--- a/converting.c
+++ b/converting.c
@@ -56,50 +56,59 @@ Final Project
 
 /* Version 2 */
 //The function void converting(void) converts a string representation of an integer into its corresponding double value.
-void convertingToDouble(void) {
-    //	// Print a message to the screen to indicate the what this demo is doing.
-    printf("*** Start of Converting Strings to double Demo ***\n");
+//void converting(void) {
+//    //	// Print a message to the screen to indicate the what this demo is doing.
+//    printf("*** Start of Converting Strings to double Demo ***\n");
+//
+//    // Declare a buffer to hold the user input
+//    char doubleString[BUFFER_SIZE];
+//    double doubleNumber;
+//
+//    do {
+//        // Prompt the user to enter a double value in string format or 'q' to quit
+//        printf("Type the double numeric string (q - to quit):\n");
+//
+//        // Read the input from the user into the buffer
+//        fgets(doubleString, BUFFER_SIZE, stdin);
+//
+//        // Replace the newline character added by fgets with a null terminator to properly format the string
+//        doubleString[strlen(doubleString) - 1] = '\0';
+//
+//        // Check if the user wants to quit the loop; if not, proceed with conversion
+//        if ((strcmp(doubleString, "q") != 0)) {
+//            // Convert the string to a double using atof, which interprets the string as a floating-point number
+//            doubleNumber = atof(doubleString);
+//
+//            // Output the converted number
+//            printf("Converted number is %f\n", doubleNumber);
+//        }
+//    } while (strcmp(doubleString, "q") != 0); // Continue the loop until the user decides to quit by entering 'q'
+//
+//    // Print a message indicating the end of the program
+//    printf("*** End of Converting Strings to double Demo ***\n\n");
+//}
+/* Version 3 */
+void converting(void) {
+    // The function void converting(void) converts a string representation of an integer into its corresponding long value.
+    printf("*** Start of Converting Strings to long Demo ***\n");
 
-    // Declare a buffer to hold the user input
-    char doubleString[BUFFER_SIZE];
-    double doubleNumber;
+    char longString[BUFFER_SIZE]; // Buffer to store the input string representing a long integer
+    long longNumber; // Variable to hold the converted long integer value
 
     do {
-        // Prompt the user to enter a double value in string format or 'q' to quit
-        printf("Type the double numeric string (q - to quit):\n");
-
-        // Read the input from the user into the buffer
-        fgets(doubleString, BUFFER_SIZE, stdin);
+        // Prompt the user to enter a string representation of a long integer or 'q' to quit
+        printf("Type the long numeric string (q - to quit):\n");
+        fgets(longString, BUFFER_SIZE, stdin); // Read the input string from standard input
 
-        // Replace the newline character added by fgets with a null terminator to properly format the string
-        doubleString[strlen(doubleString) - 1] = '\0';
+        longString[strlen(longString) - 1] = '\0'; // Remove the newline character at the end of input
 
-        // Check if the user wants to quit the loop; if not, proceed with conversion
-        if ((strcmp(doubleString, "q") != 0)) {
-            // Convert the string to a double using atof, which interprets the string as a floating-point number
-            doubleNumber = atof(doubleString);
-
-            // Output the converted number
-            printf("Converted number is %f\n", doubleNumber);
+        // Check if the input is not the quit command 'q'
+        if ((strcmp(longString, "q") != 0)) {
+            longNumber = atol(longString); // Convert the input string to a long integer
+            printf("Converted number is %ld\n", longNumber); // Display the converted long integer
         }
-    } while (strcmp(doubleString, "q") != 0); // Continue the loop until the user decides to quit by entering 'q'
+    } while (strcmp(longString, "q") != 0); // Continue the loop until 'q' is entered
 
-    //	printf("*** End of Converting Strings to int Demo ***\n\n");
-    printf("*** End of Converting Strings to double Demo ***\n\n");
-}
-/* Version 3 */
-//void convertingToLong(void) {
-//    printf("*** Start of Converting Strings to long Demo ***\n");
-//    char longString[BUFFER_SIZE];
-//    long longNumber;
-//    do {
-//        printf("Type the long numeric string (q - to quit):\n");
-//        fgets(longString, BUFFER_SIZE, stdin);
-//        longString[strlen(longString) - 1] = '\0';
-//        if ((strcmp(longString, "q") != 0)) {
-//            longNumber = atol(longString);
-//            printf("Converted number is %ld\n", longNumber);
-//        }
-//    } while (strcmp(longString, "q") != 0);
-//    printf("*** End of Converting Strings to long Demo ***\n\n");
-//}
\ No newline at end of file
+    // Ending message for the demo
+    printf("*** End of Converting Strings to long Demo ***\n\n");
+}
\ No newline at end of file

commit a7217e5b29a1713d77304914dc26e8f148d2d219
Author: Daven <whchau1@myseneca.ca>
Date:   Wed Dec 6 02:33:09 2023 -0500

    V1 - modified comment

diff --git a/tokenizing-test-cases.xlsx b/tokenizing-test-cases.xlsx
index ea26f7c..8f78ee1 100644
Binary files a/tokenizing-test-cases.xlsx and b/tokenizing-test-cases.xlsx differ
diff --git a/tokenizing.c b/tokenizing.c
index 3cb2bef..f0b6640 100644
--- a/tokenizing.c
+++ b/tokenizing.c
@@ -2,7 +2,7 @@
 Author: Wing Ho Chau
 Email: myseneca@myseneca.ca
 ID: 150924231
-Date Written: 11-27-2023
+Date Written: 12-1-2023
 Course: CPR101.NNN
 Final Project
 */
@@ -13,16 +13,16 @@ Final Project
 #include "tokenizing.h"  //includes header file to point libaraies
 
 void tokenizing() {
-/* Version 1 */
+	/* Version 1 */
 	printf("*** Start of Tokenizing Words Demo ***\n");
-	char words[BUFFER_SIZE];  //words will be used for user input and is the argument for 
-	char* nextWord = NULL;  //
-	int wordsCounter;  //wordsCounter will be used to count how many words are in the delimited input
-	
+	char words[BUFFER_SIZE];  //words will be used for user input
+	char* nextWord = NULL;  //nextWord is an array to store the return of tokenized strings.
+	int wordsCounter;  //wordsCounter will be used to count how many tokenized words are in the delimited input
+
 	do {
 		printf("Type a few words separated by space (q - to quit):\n");
 		fgets(words, BUFFER_SIZE, stdin);  //receives input from user and store in words[]
-		words[strlen(words) - 1] = '\0';  //Put a null terminator to the end the array
+		words[strlen(words) - 1] = '\0';  //Put a null terminator to the end of array
 		if (strcmp(words, "q") != 0) {  //Do the tokenizing if user doesn't input 'q'
 			nextWord = strtok(words, " ");  //use of tokenizing function to tokenize the word by delimiter 'whitespace'
 			wordsCounter = 1;  //Count the words, start with 1

commit ab1b2672769cd36c4f6afa4400e2a80f816b5449
Author: HANFU XIAO <hxiao15@mySeneca.ca>
Date:   Wed Dec 6 02:30:35 2023 -0500

    Version 2

diff --git a/Converting_testing.txt b/Converting_testing.txt
index 3d9b05e..b2c70a3 100644
--- a/Converting_testing.txt
+++ b/Converting_testing.txt
@@ -19,4 +19,20 @@ Type an int numeric string (q - to quit):
 Converted number is 2147483647
 Type an int numeric string (q - to quit):
 1234 4321
-Converted number is 1234
\ No newline at end of file
+Converted number is 1234
+
+*** Start of Converting Strings to double Demo ***
+Type the double numeric string (q - to quit):
+12.34
+Converted number is 12.340000
+Type the double numeric string (q - to quit):
+.123456
+Converted number is 0.123456
+Type the double numeric string (q - to quit):
+.123 456
+Converted number is 0.123000
+Type the double numeric string (q - to quit):
+0.12345674987987498165
+Converted number is 0.123457
+Type the double numeric string (q - to quit):
+1
diff --git a/converting-test-cases.xlsx b/converting-test-cases.xlsx
index beae68a..54dd640 100644
Binary files a/converting-test-cases.xlsx and b/converting-test-cases.xlsx differ

commit 7424dd8cabd3f41c2013ea77870d38d51e6070ba
Author: HANFU XIAO <hxiao15@mySeneca.ca>
Date:   Wed Dec 6 02:28:59 2023 -0500

    Version 1

diff --git a/Converting_testing.txt b/Converting_testing.txt
new file mode 100644
index 0000000..3d9b05e
--- /dev/null
+++ b/Converting_testing.txt
@@ -0,0 +1,22 @@
+*** Start of Converting Strings to int Demo ***
+Type an int numeric string (q - to quit):
+1234
+Converted number is 1234
+Type an int numeric string (q - to quit):
+-123321
+Converted number is -123321
+Type an int numeric string (q - to quit):
+     456
+Converted number is 456
+Type an int numeric string (q - to quit):
+     789
+Converted number is 789
+Type an int numeric string (q - to quit):
+-555555555555
+Converted number is -2147483648
+Type an int numeric string (q - to quit):
+555555555555555
+Converted number is 2147483647
+Type an int numeric string (q - to quit):
+1234 4321
+Converted number is 1234
\ No newline at end of file

commit 5e9bca1bda6d4bc1c664011710281f54c0feb597
Author: HANFU XIAO <hxiao15@mySeneca.ca>
Date:   Wed Dec 6 02:10:50 2023 -0500

    Version 1

diff --git a/converting-test-cases.xlsx b/converting-test-cases.xlsx
new file mode 100644
index 0000000..beae68a
Binary files /dev/null and b/converting-test-cases.xlsx differ

commit daa261c6998370219bfd30f65f72ab534336b248
Author: HANFU XIAO <hxiao15@mySeneca.ca>
Date:   Wed Dec 6 02:07:17 2023 -0500

    Version2

diff --git a/converting.c b/converting.c
index 76da2e6..b1262fe 100644
--- a/converting.c
+++ b/converting.c
@@ -55,6 +55,7 @@ Final Project
 //}
 
 /* Version 2 */
+//The function void converting(void) converts a string representation of an integer into its corresponding double value.
 void convertingToDouble(void) {
     //	// Print a message to the screen to indicate the what this demo is doing.
     printf("*** Start of Converting Strings to double Demo ***\n");

commit e3de54364152de16384aa516d22d65168a6685d1
Author: Daven <whchau1@myseneca.ca>
Date:   Wed Dec 6 01:56:41 2023 -0500

    V1

diff --git a/tokenizing-test-cases.xlsx b/tokenizing-test-cases.xlsx
new file mode 100644
index 0000000..ea26f7c
Binary files /dev/null and b/tokenizing-test-cases.xlsx differ
diff --git a/tokenizing.c b/tokenizing.c
new file mode 100644
index 0000000..3cb2bef
--- /dev/null
+++ b/tokenizing.c
@@ -0,0 +1,46 @@
+/*
+Author: Wing Ho Chau
+Email: myseneca@myseneca.ca
+ID: 150924231
+Date Written: 11-27-2023
+Course: CPR101.NNN
+Final Project
+*/
+
+// TOKENIZING MODULE SOURCE
+#define _CRT_SECURE_NO_WARNINGS  
+#define BUFFER_SIZE 300  //Sets how many letters the user can input.
+#include "tokenizing.h"  //includes header file to point libaraies
+
+void tokenizing() {
+/* Version 1 */
+	printf("*** Start of Tokenizing Words Demo ***\n");
+	char words[BUFFER_SIZE];  //words will be used for user input and is the argument for 
+	char* nextWord = NULL;  //
+	int wordsCounter;  //wordsCounter will be used to count how many words are in the delimited input
+	
+	do {
+		printf("Type a few words separated by space (q - to quit):\n");
+		fgets(words, BUFFER_SIZE, stdin);  //receives input from user and store in words[]
+		words[strlen(words) - 1] = '\0';  //Put a null terminator to the end the array
+		if (strcmp(words, "q") != 0) {  //Do the tokenizing if user doesn't input 'q'
+			nextWord = strtok(words, " ");  //use of tokenizing function to tokenize the word by delimiter 'whitespace'
+			wordsCounter = 1;  //Count the words, start with 1
+			while (nextWord) {  //A loop for printing tokenized words unless no more are found
+				printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord); //Print the tokenized words
+				nextWord = strtok(NULL, " ");  //Get the next tokenized words
+			}
+		}
+	} while (strcmp(words, "q") != 0);  //infinite loop unless 'q' is input by user
+	printf("*** End of Tokenizing Words Demo ***\n\n");
+
+
+/* Version 2 */
+//>> insert here
+
+
+/* Version 3 */
+//>> insert here
+
+
+}
\ No newline at end of file
diff --git a/tokenizing.h b/tokenizing.h
new file mode 100644
index 0000000..62e8745
--- /dev/null
+++ b/tokenizing.h
@@ -0,0 +1,7 @@
+//TOKENIZING MODULE HEADER
+#ifndef _TOKENIZING_H_
+#define _TOKENIZING_H_
+#include <stdio.h>
+#include <string.h>
+void tokenizing(void);
+#endif
diff --git a/tokenizing_testing.txt b/tokenizing_testing.txt
new file mode 100644
index 0000000..a16c7b4
--- /dev/null
+++ b/tokenizing_testing.txt
@@ -0,0 +1,51 @@
+Tokenizing testing
+
+------Version 1-------
+Test case 1:
+*** Start of Tokenizing Words Demo ***
+Type a few words separated by space (q - to quit):
+Hello World! Today is 11 / 28 / 2023
+Word #1 is 'Hello'
+Word #2 is 'World!'
+Word #3 is 'Today'
+Word #4 is 'is'
+Word #5 is '11'
+Word #6 is '/'
+Word #7 is '28'
+Word #8 is '/'
+Word #9 is '2023'
+Type a few words separated by space (q - to quit):
+
+
+Test case 2:
+Type a few words separated by space (q - to quit):
+
+Type a few words separated by space (q - to quit):
+
+
+Test case 3:
+Type a few words separated by space (q - to quit):
+ 
+Type a few words separated by space (q - to quit):
+
+
+Test case 4:
+Type a few words separated by space (q - to quit):
+Hello     World!
+Word #1 is 'Hello'
+Word #2 is 'World!'
+Type a few words separated by space (q - to quit):
+
+
+Test case 5:
+Type a few words separated by space (q - to quit):
+q
+*** End of Tokenizing Words Demo ***
+
+Test case 6:
+Type a few words separated by space (q - to quit):
+q Hello World!
+Word #1 is 'q'
+Word #2 is 'Hello'
+Word #3 is 'World!'
+*** End of Tokenizing Words Demo ***
\ No newline at end of file

commit 9f2058d22ba8058ff5bd2f1299404da214cd7beb
Author: HANFU XIAO <hxiao15@mySeneca.ca>
Date:   Wed Dec 6 01:55:47 2023 -0500

    Version 1

diff --git a/converting.c b/converting.c
index 9db1e47..76da2e6 100644
--- a/converting.c
+++ b/converting.c
@@ -18,59 +18,74 @@ Final Project
 
 // v1
 //The function void converting(void) converts a string representation of an integer into its corresponding integer value.
-void converting(void) {
-	// Print a message to the screen to indicate the what this demo is doing.
-	printf("*** Start of Converting Strings to int Demo ***\n");
+//void converting(void) {
+//	// Print a message to the screen to indicate the what this demo is doing.
+//	printf("*** Start of Converting Strings to int Demo ***\n");
+//
+//	// Declare a character array that can hold up to BUFFER_SIZE characters
+//	char intString[BUFFER_SIZE];
+//
+//	
+//	int intNumber; // Declare an integer variable to hold the converted number
+//
+//	// Start a loop that will keep running until the user decides to quit
+//	do {
+//		// Prompt the user to type a number as a string of characters
+//		printf("Type an int numeric string (q - to quit):\n");
+//
+//		// Read the input from the user into the intString variable
+//		fgets(intString, BUFFER_SIZE, stdin);
+//
+//		// Replace the newline character (entered when the user presses enter) with a null terminator to mark the end of the string
+//		intString[strlen(intString) - 1] = '\0';
+//
+//		// Check if the user entered 'q' to quit. If not, proceed to convert the string to an integer
+//		if (strcmp(intString, "q") != 0) {
+//			// Use atoi (ASCII to Integer) function to convert the string to an integer
+//			intNumber = atoi(intString);
+//
+//			// Print the converted integer to the screen
+//			printf("Converted number is %d\n", intNumber);
+//		}
+//		
+//	} while (strcmp(intString, "q") != 0); // If 'q' was entered, exit the loop
+//
+//	// Print a message indicating the end of the program
+//	printf("*** End of Converting Strings to int Demo ***\n\n");
+//}
 
-	// Declare a character array that can hold up to BUFFER_SIZE characters
-	char intString[BUFFER_SIZE];
+/* Version 2 */
+void convertingToDouble(void) {
+    //	// Print a message to the screen to indicate the what this demo is doing.
+    printf("*** Start of Converting Strings to double Demo ***\n");
 
-	
-	int intNumber; // Declare an integer variable to hold the converted number
+    // Declare a buffer to hold the user input
+    char doubleString[BUFFER_SIZE];
+    double doubleNumber;
 
-	// Start a loop that will keep running until the user decides to quit
-	do {
-		// Prompt the user to type a number as a string of characters
-		printf("Type an int numeric string (q - to quit):\n");
+    do {
+        // Prompt the user to enter a double value in string format or 'q' to quit
+        printf("Type the double numeric string (q - to quit):\n");
 
-		// Read the input from the user into the intString variable
-		fgets(intString, BUFFER_SIZE, stdin);
+        // Read the input from the user into the buffer
+        fgets(doubleString, BUFFER_SIZE, stdin);
 
-		// Replace the newline character (entered when the user presses enter) with a null terminator to mark the end of the string
-		intString[strlen(intString) - 1] = '\0';
+        // Replace the newline character added by fgets with a null terminator to properly format the string
+        doubleString[strlen(doubleString) - 1] = '\0';
 
-		// Check if the user entered 'q' to quit. If not, proceed to convert the string to an integer
-		if (strcmp(intString, "q") != 0) {
-			// Use atoi (ASCII to Integer) function to convert the string to an integer
-			intNumber = atoi(intString);
+        // Check if the user wants to quit the loop; if not, proceed with conversion
+        if ((strcmp(doubleString, "q") != 0)) {
+            // Convert the string to a double using atof, which interprets the string as a floating-point number
+            doubleNumber = atof(doubleString);
 
-			// Print the converted integer to the screen
-			printf("Converted number is %d\n", intNumber);
-		}
-		
-	} while (strcmp(intString, "q") != 0); // If 'q' was entered, exit the loop
+            // Output the converted number
+            printf("Converted number is %f\n", doubleNumber);
+        }
+    } while (strcmp(doubleString, "q") != 0); // Continue the loop until the user decides to quit by entering 'q'
 
-	// Print a message indicating the end of the program
-	printf("*** End of Converting Strings to int Demo ***\n\n");
+    //	printf("*** End of Converting Strings to int Demo ***\n\n");
+    printf("*** End of Converting Strings to double Demo ***\n\n");
 }
-
-/* Version 2 */
-//void convertingToDouble(void) {
-//    printf("*** Start of Converting Strings to double Demo ***\n");
-//    char doubleString[BUFFER_SIZE];
-//    double doubleNumber;
-//    do {
-//        printf("Type the double numeric string (q - to quit):\n");
-//        fgets(doubleString, BUFFER_SIZE, stdin);
-//        doubleString[strlen(doubleString) - 1] = '\0';
-//        if ((strcmp(doubleString, "q") != 0)) {
-//            doubleNumber = atof(doubleString);
-//            printf("Converted number is %f\n", doubleNumber);
-//        }
-//    } while (strcmp(doubleString, "q") != 0);
-//    printf("*** End of Converting Strings to double Demo ***\n\n");
-//}
-
 /* Version 3 */
 //void convertingToLong(void) {
 //    printf("*** Start of Converting Strings to long Demo ***\n");

commit e60f9ea95976a506a252f6d303c1784144b747f4
Author: HANFU XIAO <hxiao15@mySeneca.ca>
Date:   Mon Dec 4 23:33:36 2023 -0500

    V2

diff --git a/converting.c b/converting.c
new file mode 100644
index 0000000..9db1e47
--- /dev/null
+++ b/converting.c
@@ -0,0 +1,89 @@
+// CONVERTING MODULE SOURCE
+#define _CRT_SECURE_NO_WARNINGS
+#define BUFFER_SIZE 80 //Defined macro 'BUFFER_SIZE' setting the max string length to convert.
+#include <stdio.h>
+#include <string.h> 
+#include <stdlib.h>
+#include "converting.h"
+
+/*
+Author: Hanfu Xiao
+Email: hxiao15@myseneca.ca
+ID: 033503145
+Date Written: 11-28-2023
+Course: CPR101.NNN
+Final Project
+*/
+
+
+// v1
+//The function void converting(void) converts a string representation of an integer into its corresponding integer value.
+void converting(void) {
+	// Print a message to the screen to indicate the what this demo is doing.
+	printf("*** Start of Converting Strings to int Demo ***\n");
+
+	// Declare a character array that can hold up to BUFFER_SIZE characters
+	char intString[BUFFER_SIZE];
+
+	
+	int intNumber; // Declare an integer variable to hold the converted number
+
+	// Start a loop that will keep running until the user decides to quit
+	do {
+		// Prompt the user to type a number as a string of characters
+		printf("Type an int numeric string (q - to quit):\n");
+
+		// Read the input from the user into the intString variable
+		fgets(intString, BUFFER_SIZE, stdin);
+
+		// Replace the newline character (entered when the user presses enter) with a null terminator to mark the end of the string
+		intString[strlen(intString) - 1] = '\0';
+
+		// Check if the user entered 'q' to quit. If not, proceed to convert the string to an integer
+		if (strcmp(intString, "q") != 0) {
+			// Use atoi (ASCII to Integer) function to convert the string to an integer
+			intNumber = atoi(intString);
+
+			// Print the converted integer to the screen
+			printf("Converted number is %d\n", intNumber);
+		}
+		
+	} while (strcmp(intString, "q") != 0); // If 'q' was entered, exit the loop
+
+	// Print a message indicating the end of the program
+	printf("*** End of Converting Strings to int Demo ***\n\n");
+}
+
+/* Version 2 */
+//void convertingToDouble(void) {
+//    printf("*** Start of Converting Strings to double Demo ***\n");
+//    char doubleString[BUFFER_SIZE];
+//    double doubleNumber;
+//    do {
+//        printf("Type the double numeric string (q - to quit):\n");
+//        fgets(doubleString, BUFFER_SIZE, stdin);
+//        doubleString[strlen(doubleString) - 1] = '\0';
+//        if ((strcmp(doubleString, "q") != 0)) {
+//            doubleNumber = atof(doubleString);
+//            printf("Converted number is %f\n", doubleNumber);
+//        }
+//    } while (strcmp(doubleString, "q") != 0);
+//    printf("*** End of Converting Strings to double Demo ***\n\n");
+//}
+
+/* Version 3 */
+//void convertingToLong(void) {
+//    printf("*** Start of Converting Strings to long Demo ***\n");
+//    char longString[BUFFER_SIZE];
+//    long longNumber;
+//    do {
+//        printf("Type the long numeric string (q - to quit):\n");
+//        fgets(longString, BUFFER_SIZE, stdin);
+//        longString[strlen(longString) - 1] = '\0';
+//        if ((strcmp(longString, "q") != 0)) {
+//            longNumber = atol(longString);
+//            printf("Converted number is %ld\n", longNumber);
+//        }
+//    } while (strcmp(longString, "q") != 0);
+//    printf("*** End of Converting Strings to long Demo ***\n\n");
+//}
\ No newline at end of file
diff --git a/converting.h b/converting.h
new file mode 100644
index 0000000..ebc3131
--- /dev/null
+++ b/converting.h
@@ -0,0 +1,8 @@
+// CONVERTING MODULE HEADER
+#ifndef _CONVERTING_H_
+#define _CONVERTING_H_
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+void converting(void);
+#endif
\ No newline at end of file
diff --git a/main.c b/main.c
new file mode 100644
index 0000000..dc922ad
--- /dev/null
+++ b/main.c
@@ -0,0 +1,40 @@
+#define _CRT_SECURE_NO_WARNINGS
+#include <stdio.h>
+#include <string.h> 
+#include <stdlib.h>
+#include "fundamentals.h"
+#include "manipulating.h"
+#include "converting.h"
+#include "tokenizing.h"
+
+
+
+int main(void) {
+    char buff[10];
+    do {
+        printf("1 - Fundamentals\n");
+        printf("2 - Manipulation\n");
+        printf("3 - Converting\n");
+        printf("4 - Tokenizing\n");
+        printf("0 - Exit\n");
+        printf("Which module to run? \n");
+        fgets(buff, 10, stdin);
+
+        switch (buff[0]) {
+        case '1':
+            fundamentals();
+            break;
+        case '2':
+            manipulating();
+            break;
+        case '3':
+            converting();
+            break;
+        case '4':
+            tokenizing();
+            break;
+        }
+    } while (buff[0] != '0');
+
+    return 0;
+}
\ No newline at end of file
diff --git a/manipulating.c b/manipulating.c
new file mode 100644
index 0000000..afd33ff
--- /dev/null
+++ b/manipulating.c
@@ -0,0 +1,114 @@
+#define _CRT_SECURE_NO_WARNINGS
+/*
+Author: Jarvinia Zhao
+Email: jzhao169@myseneca.ca
+ID: 143013233
+Date Written: 11-27-2023
+Course: CPR101.NNN
+Final Project
+*/
+
+/* The costomized library "manipulating.h" header file provides :
+    2 standard libraies: stdio.h and string.h
+    Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
+    Prototype for function manipulating
+*/
+#include "manipulating.h"  
+
+/*
+Function Purpose: This function provides the functionality to manipulate Cstings
+*/
+void manipulating(void) {
+/* Version 1 */
+    //------------- Demo of String Concatenate ---------------
+    
+    // Display the starting message for user to understand the purpose of this demo
+    printf("**** Start of Concatenating Strings Demo ****\n");
+    // Declare 2 Cstring to store the string for concatenation 
+    char string1[BUFFER_SIZE]; // first string 
+    char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
+    
+    // Start a loop at least once and will continue until the user enter q to quit
+    do {
+        // Prompt the user for the first string
+        printf("Type the 1st string (q - to quit):\n");
+        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user
+        // Remove the newline character at the end of the input string
+        string1[strlen(string1) - 1] = '\0';
+
+        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
+        if (strcmp(string1, "q") == 0) {
+            break;
+        }
+
+        // Prompt the user for the second string
+        printf("Type the 2nd string:\n");
+        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user
+        // Remove the newline character at the end of the input string
+        string2[strlen(string2) - 1] = '\0'; 
+
+        // Concatenate the string2 to the string1
+        strcat(string1, string2);
+        // Display the result after concatenation
+        printf("Concatenated string is '%s'\n", string1);
+
+    } while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
+
+    printf("**** End of Concatenating Strings Demo ****\n");
+
+
+/* Version 2 
+    printf("**** Start of Comparing Strings Demo ****\n");
+    char compare1[BUFFER_SIZE];
+    char compare2[BUFFER_SIZE];
+    int result;
+    do {
+        printf("Type the 1st string to compare (q - to quit):\n");
+        fgets(compare1, BUFFER_SIZE, stdin);
+        compare1[strlen(compare1) - 1] = '\0';
+        if (strcmp(compare1, "q") == 0) {
+            break;
+        }
+        printf("Type the 2nd string to compare:\n");
+        fgets(compare2, BUFFER_SIZE, stdin);
+        compare2[strlen(compare2) - 1] = '\0';
+        result = strcmp(compare1, compare2);
+        if (result < 0) {
+            printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
+        }
+        else if (result == 0) {
+            printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
+        }
+        else {
+            printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
+        }
+    } while (strcmp(compare1, "q") != 0);
+    printf("**** End of Comparing Strings Demo ****\n");
+    */
+
+/* Version 3 
+    printf("**** Start of Searching Strings Demo ****\n");
+    char haystack[BUFFER_SIZE];
+    char needle[BUFFER_SIZE];
+    char* occurrence = NULL;
+    do {
+        printf("Type the string (q - to quit):\n");
+        fgets(haystack, BUFFER_SIZE, stdin);
+        haystack[strlen(haystack) - 1] = '\0';
+        if (strcmp(haystack, "q") == 0) {
+            break;
+        }
+        printf("Type the substring:\n");
+        fgets(needle, BUFFER_SIZE, stdin);
+        needle[strlen(needle) - 1] = '\0';
+        occurrence = strstr(haystack, needle);
+        if (occurrence) {
+            printf("\"%s\" found at %d position\n", needle, (int)(occurrence - haystack));
+        }
+        else {
+            printf("Not found\n");
+        }
+    } while (strcmp(haystack, "q") != 0);
+    printf("**** End of Searching Strings Demo ****\n");
+    */
+}
\ No newline at end of file
diff --git a/manipulating.h b/manipulating.h
new file mode 100644
index 0000000..fdbd4a4
--- /dev/null
+++ b/manipulating.h
@@ -0,0 +1,15 @@
+#pragma once
+// MANIPULATING MODULE HEADER
+#ifndef _MANIPULATING_H_
+#define _MANIPULATING_H_
+
+#include <stdio.h>
+#include <string.h>
+
+#define BUFFER_SIZE 32 // Define a constant for maximum string length
+
+// manipulating prototype: Allow users to manipulate string input
+//Including: string concatenate
+void manipulating(void);
+
+#endif
\ No newline at end of file

commit 5ca8d5a33a8d2db071a1748e1c439a083789c4c7
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Sat Dec 2 21:30:36 2023 -0500

    Version 2: Add one more testing case - one empty string

diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
index 4990758..5449f31 100644
Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
diff --git a/manipulating-testing.txt b/manipulating-testing.txt
index 57c3364..f73a2bc 100644
--- a/manipulating-testing.txt
+++ b/manipulating-testing.txt
@@ -64,27 +64,34 @@ Type the 2nd string to compare:
 Hello
 "Hello World" string is greater than "Hello"
 
->> Test 4: (Empty string)
+>> Test 4: (Compare one empty string)
+Type the 1st string to compare (q - to quit):
+
+Type the 2nd string to compare:
+test
+"" string is less than "test"
+
+>> Test 5: (Both string are empty )
 Type the 1st string to compare (q - to quit):
 
 Type the 2nd string to compare:
 
 "" string is equal to ""
 
->> Test 5: (Special characters)
+>> Test 6: (Special characters)
 Type the 1st string to compare (q - to quit):
 @123
 Type the 2nd string to compare:
 $456
 "@123" string is greater than "$456"
 
->> Test 6: (Over-the-edge: compare1 over the limit)
+>> Test 7: (Over-the-edge: compare1 over the limit)
 Type the 1st string to compare (q - to quit):
 Hello this is John Smith, Nice to meet you!
 Type the 2nd string to compare:
 "Hello this is John Smith, Nice" string is less than "to meet you!"
 
->> Test 7: (Over-the-edge: compare2 over the limit)
+>> Test 8: (Over-the-edge: compare2 over the limit)
 Type the 1st string to compare (q - to quit):
 Hello this is John Smith, Nice
 Type the 2nd string to compare:

commit 4b8535e987cecb5e0dc6519e9aa7a5d8b2e87950
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Sat Dec 2 21:23:39 2023 -0500

    Version 3: Upload testing case records, and modify the format of testing.txt

diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
index 8058037..4990758 100644
Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
diff --git a/manipulating-testing.txt b/manipulating-testing.txt
index 1d00335..57c3364 100644
--- a/manipulating-testing.txt
+++ b/manipulating-testing.txt
@@ -1,94 +1,175 @@
 Manipulating Testing 
 
-------Version 1-------
-Test 1: (Normal case)
+-------------- Version 1: String Concatenate -------------------------------
+>> Test 1: (Normal case)
 Type the 1st string (q - to quit):
 John
 Type the 2nd string:
  Simith
 Concatenated string is 'John Simith'
 
-Test 2: (Empty string)
+>> Test 2: (Empty string)
 Type the 1st string (q - to quit):
 
 Type the 2nd string:
 
 Concatenated string is ''
 
-Test 3: (Edge case)
+>> Test 3: (Edge case)
 Type the 1st string (q - to quit):
 Hi John Smith
 Type the 2nd string:
  Nice to meet you!
 Concatenated string is 'Hi John Smith Nice to meet you!'
 
-Test 4: (Over-the-edge: string1 over the limit)
+>> Test 4: (Over-the-edge: string1 over the limit)
 Type the 1st string (q - to quit):
 Hello this is John Smith, Nice to meet you!
 Type the 2nd string:
 Concatenated string is 'Hello this is John Smith, Niceto meet you!'
 
-Test 5: (Over-the-edge: string2 over the limit)
+>> Test 5: (Over-the-edge: string2 over the limit)
 Type the 1st string (q - to quit):
 12345
 Type the 2nd string:
 Hi John Smith Nice to meet you!
 Concatenated string is '12345Hi John Smith Nice to meet you'
 
-Test 6: (Over-the-edge: after concatenation string1 over the limit)
+>> Test 6: (Over-the-edge: after concatenation string1 over the limit)
 Type the 1st string (q - to quit):
 Hello this is John Smith,
 Type the 2nd string:
  Nice to meet you!
 Concatenated string is 'Hello this is John Smith, Nice to meet you!'
 
-------Version 2-------
-Test 1: (Identical)
+--------------- Version 2: String Comparision -------------------------------
+>> Test 1: (Identical)
 Type the 1st string to compare (q - to quit):
 test
 Type the 2nd string to compare:
 test
 "test" string is equal to "test"
 
-Test 2: (Case sensitive)
+>> Test 2: (Case sensitive)
 Type the 1st string to compare (q - to quit):
 Test
 Type the 2nd string to compare:
 test
 "Test" string is less than "test"
 
-Test 3: (Different length)
+>> Test 3: (Different length)
 Type the 1st string to compare (q - to quit):
 Hello World
 Type the 2nd string to compare:
 Hello
 "Hello World" string is greater than "Hello"
 
-Test 4: (Empty string)
+>> Test 4: (Empty string)
 Type the 1st string to compare (q - to quit):
 
 Type the 2nd string to compare:
 
 "" string is equal to ""
 
-Test 5: (Special characters)
+>> Test 5: (Special characters)
 Type the 1st string to compare (q - to quit):
 @123
 Type the 2nd string to compare:
 $456
 "@123" string is greater than "$456"
 
-Test 6: (Over-the-edge: compare1 over the limit)
+>> Test 6: (Over-the-edge: compare1 over the limit)
 Type the 1st string to compare (q - to quit):
 Hello this is John Smith, Nice to meet you!
 Type the 2nd string to compare:
 "Hello this is John Smith, Nice" string is less than "to meet you!"
 
-Test 7: (Over-the-edge: compare2 over the limit)
+>> Test 7: (Over-the-edge: compare2 over the limit)
 Type the 1st string to compare (q - to quit):
 Hello this is John Smith, Nice
 Type the 2nd string to compare:
 Hello this is John Smith, Nice to meet you!
 "Hello this is John Smith, Nice" string is equal to "Hello this is John Smith, Nice"
 Type the 1st string to compare (q - to quit):
-Type the 2nd string to compare:
\ No newline at end of file
+Type the 2nd string to compare:
+
+--------------- Version 3: String Search -------------------------------
+>> Test 1: (Normal case)
+Type the string (q - to quit):
+Hello World!
+Type the substring:
+World
+"World" found at 6 position
+
+>> Test 2: (needle at beginning)
+Type the string (q - to quit):
+Test starts now right?
+Type the substring:
+Test
+"Test" found at 0 position
+
+>> Test 3: (needle at end)
+Type the string (q - to quit):
+This is a test
+Type the substring:
+test
+"test" found at 10 position
+
+>> Test 4: (needle is single character)
+Type the string (q - to quit):
+Hello World!
+Type the substring:
+o
+"o" found at 4 position
+
+>> Test 5: (needle not found)
+Type the string (q - to quit):
+Hello World!
+Type the substring:
+Happy
+Not found
+
+>> Test 6: (haystack is empty)
+Type the string (q - to quit):
+
+Type the substring:
+test
+Not found
+
+>> Test 7: (needle is empty)
+Type the string (q - to quit):
+test
+Type the substring:
+
+"" found at 0 position
+
+>> Test 8: (Both string is empty)
+Type the string (q - to quit):
+
+Type the substring:
+
+"" found at 0 position
+
+>> Test 9: (Over-the-edge: haystack over the limit)
+Type the string (q - to quit):
+one two three four five six seven eight nine ten
+Type the substring:
+Not found
+
+>> Test 10: (Over-the-edge: haystack over the limit with repeated pattern)
+Type the string (q - to quit):
+two three four two three four two three four two three four
+Type the substring:
+"wo three four two three four" found at 1 position
+
+>>Test 11: (Over-the-edge: needle over the limit)
+Type the string (q - to quit):
+four
+Type the substring:
+one two three four five six seven eight nine ten
+Not found
+Type the string (q - to quit):
+Type the substring:
+
+
+

commit b70dcc9b0533d13e72fe7be9759f3bdeebd7747d
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Sat Dec 2 21:21:59 2023 -0500

    Version 3: Finish code comments

diff --git a/manipulating.c b/manipulating.c
index c1f52ee..095ec35 100644
--- a/manipulating.c
+++ b/manipulating.c
@@ -58,7 +58,7 @@ void manipulating(void) {
     //printf("**** End of Concatenating Strings Demo ****\n");
 
 
-/* Version 2 */
+/* Version 2 
     //------------- Demo of String Comparing ---------------
 
     // Display the staring message for user to understand the purpose of this demo
@@ -105,31 +105,49 @@ void manipulating(void) {
         }
     } while (strcmp(compare1, "q") != 0); // Continue looping until the user enter 'q' for the compare1
     printf("**** End of Comparing Strings Demo ****\n");
+    */
     
 
 /* Version 3 */
+    //------------- Demo of String Search ---------------
+
+    // Display the staring message for user to understand the purpose of this demo
     printf("**** Start of Searching Strings Demo ****\n");
-    char haystack[BUFFER_SIZE];
-    char needle[BUFFER_SIZE];
-    char* occurrence = NULL;
+    char haystack[BUFFER_SIZE]; // string to store user input as a searching library
+    char needle[BUFFER_SIZE];  // string to store user input as a searching keyword
+    char* occurrence = NULL; // variable to store search result, NULL = not found
+    
+    // Keep prompt for 2 string input until the user enter q to quit
     do {
+        // Prompt the user for the library string
         printf("Type the string (q - to quit):\n");
-        fgets(haystack, BUFFER_SIZE, stdin);
+        fgets(haystack, BUFFER_SIZE, stdin); // Read the first input Cstring from user and stores in haystack
+        // Remove the newline character at the end of the input string
         haystack[strlen(haystack) - 1] = '\0';
+        
+        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
         if (strcmp(haystack, "q") == 0) {
             break;
         }
+        
+        // Prompt the user for the keyword string/substring
         printf("Type the substring:\n");
-        fgets(needle, BUFFER_SIZE, stdin);
+        fgets(needle, BUFFER_SIZE, stdin); // Read the second input Cstring from user and stores in needle
+        // Remove the newline character at the end of the input string
         needle[strlen(needle) - 1] = '\0';
+
+        //Search the occurrence of needle in haystack and store the result in variable occurance
         occurrence = strstr(haystack, needle);
+
+        // Check the value of occurence and display corresponding message to user
+        // Found the needle in haystack and give the exact position of needle in haystack
         if (occurrence) {
             printf("\"%s\" found at %d position\n", needle, (int)(occurrence - haystack));
         }
         else {
             printf("Not found\n");
         }
-    } while (strcmp(haystack, "q") != 0);
+    } while (strcmp(haystack, "q") != 0);// Continue looping until the user enter 'q' for the haystack
     printf("**** End of Searching Strings Demo ****\n");
     
 }
\ No newline at end of file

commit be760f11843fc5c19823ee5807bad95400b2702f
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Sat Dec 2 19:29:27 2023 -0500

    Version 3: Code without any comments

diff --git a/manipulating.c b/manipulating.c
index 0e763bf..c1f52ee 100644
--- a/manipulating.c
+++ b/manipulating.c
@@ -107,7 +107,7 @@ void manipulating(void) {
     printf("**** End of Comparing Strings Demo ****\n");
     
 
-/* Version 3 
+/* Version 3 */
     printf("**** Start of Searching Strings Demo ****\n");
     char haystack[BUFFER_SIZE];
     char needle[BUFFER_SIZE];
@@ -131,5 +131,5 @@ void manipulating(void) {
         }
     } while (strcmp(haystack, "q") != 0);
     printf("**** End of Searching Strings Demo ****\n");
-    */
+    
 }
\ No newline at end of file

commit 60a339ffd2fcde2efa9b67ff5a315351107677a3
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Sat Dec 2 19:11:51 2023 -0500

    Version 2: upload git log

diff --git a/manipulating-git-log.txt b/manipulating-git-log.txt
new file mode 100644
index 0000000..7af623f
--- /dev/null
+++ b/manipulating-git-log.txt
@@ -0,0 +1,643 @@
+commit 65fd6432ce4b971660a56f7f960f06a714405a9b
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Sat Dec 2 19:02:49 2023 -0500
+
+    Version 1&2: Correct typos and revise the wording
+
+diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
+index 741f37a..8058037 100644
+Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
+
+commit 4b5197c169be2a959933edfdd976b123ed44f42e
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Sat Dec 2 19:01:42 2023 -0500
+
+    Header file: Add and revise some comment for easy understanding
+
+diff --git a/manipulating.h b/manipulating.h
+index fdbd4a4..e3dcc7a 100644
+--- a/manipulating.h
++++ b/manipulating.h
+@@ -3,10 +3,12 @@
+ #ifndef _MANIPULATING_H_
+ #define _MANIPULATING_H_
+ 
++//All system library needed
+ #include <stdio.h>
+ #include <string.h>
+ 
+-#define BUFFER_SIZE 32 // Define a constant for maximum string length
++// Define a constant for maximum length of input string 
++#define BUFFER_SIZE 32
+ 
+ // manipulating prototype: Allow users to manipulate string input
+ //Including: string concatenate
+
+commit bccbd7b3a5fbf9465d1852b3dd642777bf3f29ce
+Merge: 5724194 723cf02
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Sat Dec 2 18:58:38 2023 -0500
+
+    Merge branch 'manipulating' of https://github.com/xiaohanfu123/CPR101-Final-Project into manipulating
+
+commit 5724194a681ef0c8997824b91fc692f6dc29686f
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Sat Dec 2 18:57:50 2023 -0500
+
+    Version 1&2: Revise some comments to make them easy to understand the codes
+
+diff --git a/manipulating.c b/manipulating.c
+index 31ce090..0e763bf 100644
+--- a/manipulating.c
++++ b/manipulating.c
+@@ -9,9 +9,9 @@ Final Project
+ */
+ 
+ /* The costomized library "manipulating.h" header file provides :
+-    2 standard libraies: stdio.h and string.h
+-    Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
+-    Prototype for function manipulating
++    - 2 standard libraies: stdio.h and string.h
++    - Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
++    - Prototype for function manipulating
+ */
+ #include "manipulating.h"   
+ 
+@@ -26,10 +26,10 @@ void manipulating(void) {
+     // Display the staring message for user to understand the purpose of this demo
+     //printf("**** Start of Concatenating Strings Demo ****\n");
+     //// Declare 2 Cstring to store the string for concatenation 
+-    //char string1[BUFFER_SIZE]; // first string 
+-    //char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
++    //char string1[BUFFER_SIZE]; // first string to store user first input
++    //char string2[BUFFER_SIZE]; // second string to store user second input - concatenate to the end of first string
+     //
+-    //// Start a loop at least once and will continue until the user enter q to quit
++    //// Keep prompt for 2 string input until the user enter q to quit
+     //do {
+     //    // Prompt the user for the first string
+     //    printf("Type the 1st string (q - to quit):\n");
+@@ -65,11 +65,11 @@ void manipulating(void) {
+     printf("**** Start of Comparing Strings Demo ****\n");
+ 
+     // Declare 2 Cstring to store the string for comparison
+-    char compare1[BUFFER_SIZE]; // first string
+-    char compare2[BUFFER_SIZE]; // second string
++    char compare1[BUFFER_SIZE]; // first string to store user first input
++    char compare2[BUFFER_SIZE]; // second string to store user second input
+     int result; // Store the comparison result
+ 
+-    // Start a loop at least once and will continue until the user enter q to quit
++    // Keep prompt for 2 string input until the user enter q to quit
+     do {
+         // Prompt the user for the first string
+         printf("Type the 1st string to compare (q - to quit):\n");
+@@ -91,15 +91,15 @@ void manipulating(void) {
+         result = strcmp(compare1, compare2);
+ 
+         // Check the value of reuslt and display corresponding message to user
+-        // compare1 < compare2
++        // compare1 < compare2 and output proper message to user
+         if (result < 0) {
+             printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
+         }
+-        // compare1 = compare2
++        // compare1 = compare2 and output proper message to user
+         else if (result == 0) {
+             printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
+         }
+-        // compare1 > compare2 
++        // compare1 > compare2 and output proper message to user
+         else {
+             printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
+         }
+
+commit 723cf0212615fd781700c1580261a1488b866e62
+Author: Jarviniazhao <151060098+Jarviniazhao@users.noreply.github.com>
+Date:   Fri Dec 1 09:30:48 2023 -0500
+
+    Add general descriptions of manipulating
+
+diff --git a/README.md b/README.md
+index 8a2ba66..e8b903a 100644
+--- a/README.md
++++ b/README.md
+@@ -1 +1,4 @@
+-# CPR101-Final-Project
+\ No newline at end of file
++# CPR101-Final-Project
++
++- Manipulating <br />
++    This function provides the functionality to manipulate Cstings including 3 versions: string concatenation, comparison, and searching
+
+commit 259290768c7d6f4affc068cf206f83183da7ecb6
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Fri Dec 1 08:33:26 2023 -0500
+
+    Version 2: Comment out version1 code for testing version2 only
+
+diff --git a/manipulating.c b/manipulating.c
+index e57d2ae..31ce090 100644
+--- a/manipulating.c
++++ b/manipulating.c
+@@ -19,42 +19,43 @@ Final Project
+ Function Purpose: This function provides the functionality to manipulate Cstings
+ */
+ void manipulating(void) {
++
+ /* Version 1 */
+     //------------- Demo of String Concatenate ---------------
+     
+     // Display the staring message for user to understand the purpose of this demo
+-    printf("**** Start of Concatenating Strings Demo ****\n");
+-    // Declare 2 Cstring to store the string for concatenation 
+-    char string1[BUFFER_SIZE]; // first string 
+-    char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
+-    
+-    // Start a loop at least once and will continue until the user enter q to quit
+-    do {
+-        // Prompt the user for the first string
+-        printf("Type the 1st string (q - to quit):\n");
+-        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
+-        // Remove the newline character at the end of the input string
+-        string1[strlen(string1) - 1] = '\0';
+-
+-        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
+-        if (strcmp(string1, "q") == 0) {
+-            break;
+-        }
+-
+-        // Prompt the user for the second string
+-        printf("Type the 2nd string:\n");
+-        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
+-        // Remove the newline character at the end of the input string
+-        string2[strlen(string2) - 1] = '\0'; 
+-
+-        // Concatenate the string2 to the string1
+-        strcat(string1, string2);
+-        // Display the result after concatenation
+-        printf("Concatenated string is '%s'\n", string1);
+-
+-    } while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
+-
+-    printf("**** End of Concatenating Strings Demo ****\n");
++    //printf("**** Start of Concatenating Strings Demo ****\n");
++    //// Declare 2 Cstring to store the string for concatenation 
++    //char string1[BUFFER_SIZE]; // first string 
++    //char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
++    //
++    //// Start a loop at least once and will continue until the user enter q to quit
++    //do {
++    //    // Prompt the user for the first string
++    //    printf("Type the 1st string (q - to quit):\n");
++    //    fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
++    //    // Remove the newline character at the end of the input string
++    //    string1[strlen(string1) - 1] = '\0';
++
++    //    // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
++    //    if (strcmp(string1, "q") == 0) {
++    //        break;
++    //    }
++
++    //    // Prompt the user for the second string
++    //    printf("Type the 2nd string:\n");
++    //    fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
++    //    // Remove the newline character at the end of the input string
++    //    string2[strlen(string2) - 1] = '\0'; 
++
++    //    // Concatenate the string2 to the string1
++    //    strcat(string1, string2);
++    //    // Display the result after concatenation
++    //    printf("Concatenated string is '%s'\n", string1);
++
++    //} while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
++
++    //printf("**** End of Concatenating Strings Demo ****\n");
+ 
+ 
+ /* Version 2 */
+
+commit 99c9ceef9a88f431213291029a49e438562858bd
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Thu Nov 30 23:45:15 2023 -0500
+
+    Version 2: Finish testing with 7 cases with actual output and case report
+
+diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
+index 2a6351e..741f37a 100644
+Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
+diff --git a/manipulating-testing.txt b/manipulating-testing.txt
+index 3cf3d34..1d00335 100644
+--- a/manipulating-testing.txt
++++ b/manipulating-testing.txt
+@@ -42,3 +42,53 @@ Type the 2nd string:
+  Nice to meet you!
+ Concatenated string is 'Hello this is John Smith, Nice to meet you!'
+ 
++------Version 2-------
++Test 1: (Identical)
++Type the 1st string to compare (q - to quit):
++test
++Type the 2nd string to compare:
++test
++"test" string is equal to "test"
++
++Test 2: (Case sensitive)
++Type the 1st string to compare (q - to quit):
++Test
++Type the 2nd string to compare:
++test
++"Test" string is less than "test"
++
++Test 3: (Different length)
++Type the 1st string to compare (q - to quit):
++Hello World
++Type the 2nd string to compare:
++Hello
++"Hello World" string is greater than "Hello"
++
++Test 4: (Empty string)
++Type the 1st string to compare (q - to quit):
++
++Type the 2nd string to compare:
++
++"" string is equal to ""
++
++Test 5: (Special characters)
++Type the 1st string to compare (q - to quit):
++@123
++Type the 2nd string to compare:
++$456
++"@123" string is greater than "$456"
++
++Test 6: (Over-the-edge: compare1 over the limit)
++Type the 1st string to compare (q - to quit):
++Hello this is John Smith, Nice to meet you!
++Type the 2nd string to compare:
++"Hello this is John Smith, Nice" string is less than "to meet you!"
++
++Test 7: (Over-the-edge: compare2 over the limit)
++Type the 1st string to compare (q - to quit):
++Hello this is John Smith, Nice
++Type the 2nd string to compare:
++Hello this is John Smith, Nice to meet you!
++"Hello this is John Smith, Nice" string is equal to "Hello this is John Smith, Nice"
++Type the 1st string to compare (q - to quit):
++Type the 2nd string to compare:
+\ No newline at end of file
+
+commit e1419a3e16637354960b9e5ad4878737841c65c4
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Tue Nov 28 21:02:47 2023 -0500
+
+    Version 2: Finish comments 1.0
+
+diff --git a/manipulating.c b/manipulating.c
+index caa2d08..e57d2ae 100644
+--- a/manipulating.c
++++ b/manipulating.c
+@@ -32,7 +32,7 @@ void manipulating(void) {
+     do {
+         // Prompt the user for the first string
+         printf("Type the 1st string (q - to quit):\n");
+-        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user
++        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
+         // Remove the newline character at the end of the input string
+         string1[strlen(string1) - 1] = '\0';
+ 
+@@ -43,7 +43,7 @@ void manipulating(void) {
+ 
+         // Prompt the user for the second string
+         printf("Type the 2nd string:\n");
+-        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user
++        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
+         // Remove the newline character at the end of the input string
+         string2[strlen(string2) - 1] = '\0'; 
+ 
+@@ -58,31 +58,51 @@ void manipulating(void) {
+ 
+ 
+ /* Version 2 */
++    //------------- Demo of String Comparing ---------------
++
++    // Display the staring message for user to understand the purpose of this demo
+     printf("**** Start of Comparing Strings Demo ****\n");
+-    char compare1[BUFFER_SIZE];
+-    char compare2[BUFFER_SIZE];
+-    int result;
++
++    // Declare 2 Cstring to store the string for comparison
++    char compare1[BUFFER_SIZE]; // first string
++    char compare2[BUFFER_SIZE]; // second string
++    int result; // Store the comparison result
++
++    // Start a loop at least once and will continue until the user enter q to quit
+     do {
++        // Prompt the user for the first string
+         printf("Type the 1st string to compare (q - to quit):\n");
+-        fgets(compare1, BUFFER_SIZE, stdin);
++        fgets(compare1, BUFFER_SIZE, stdin); // Read the first input Cstring from user and stores in compare1
++        // Remove the newline character at the end of the input string
+         compare1[strlen(compare1) - 1] = '\0';
++
++        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
+         if (strcmp(compare1, "q") == 0) {
+             break;
+         }
++        // Prompt the user for the second string
+         printf("Type the 2nd string to compare:\n");
+-        fgets(compare2, BUFFER_SIZE, stdin);
++        fgets(compare2, BUFFER_SIZE, stdin); // Read the second input Cstring from user and stores in compare2
++        // Remove the newline character at the end of the input string
+         compare2[strlen(compare2) - 1] = '\0';
++
++        // Compare compare1 with compare2 and store the result to variable reuslt
+         result = strcmp(compare1, compare2);
++
++        // Check the value of reuslt and display corresponding message to user
++        // compare1 < compare2
+         if (result < 0) {
+             printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
+         }
++        // compare1 = compare2
+         else if (result == 0) {
+             printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
+         }
++        // compare1 > compare2 
+         else {
+             printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
+         }
+-    } while (strcmp(compare1, "q") != 0);
++    } while (strcmp(compare1, "q") != 0); // Continue looping until the user enter 'q' for the compare1
+     printf("**** End of Comparing Strings Demo ****\n");
+     
+ 
+
+commit 63486a4aa9da65f01fe5b158a7a62d3683e27e23
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Tue Nov 28 20:48:36 2023 -0500
+
+    Correct a comment for Version 1, which was put for wrong code
+
+diff --git a/manipulating.c b/manipulating.c
+index 58a46ce..caa2d08 100644
+--- a/manipulating.c
++++ b/manipulating.c
+@@ -43,9 +43,9 @@ void manipulating(void) {
+ 
+         // Prompt the user for the second string
+         printf("Type the 2nd string:\n");
+-        fgets(string2, BUFFER_SIZE, stdin);
++        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user
+         // Remove the newline character at the end of the input string
+-        string2[strlen(string2) - 1] = '\0'; // Read the second input string from user
++        string2[strlen(string2) - 1] = '\0'; 
+ 
+         // Concatenate the string2 to the string1
+         strcat(string1, string2);
+
+commit 13220bd1bfb31415bbed9664fd1e9fb3796c0525
+Author: Jarvinia Zhao <jzhao169@myseneca.ca>
+Date:   Tue Nov 28 20:27:55 2023 -0500
+
+    Adding completed work of version 1 for manipulating
+
+diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
+new file mode 100644
+index 0000000..2a6351e
+Binary files /dev/null and b/manipulating-test-cases.xlsx differ
+diff --git a/manipulating-testing.txt b/manipulating-testing.txt
+new file mode 100644
+index 0000000..3cf3d34
+--- /dev/null
++++ b/manipulating-testing.txt
+@@ -0,0 +1,44 @@
++Manipulating Testing 
++
++------Version 1-------
++Test 1: (Normal case)
++Type the 1st string (q - to quit):
++John
++Type the 2nd string:
++ Simith
++Concatenated string is 'John Simith'
++
++Test 2: (Empty string)
++Type the 1st string (q - to quit):
++
++Type the 2nd string:
++
++Concatenated string is ''
++
++Test 3: (Edge case)
++Type the 1st string (q - to quit):
++Hi John Smith
++Type the 2nd string:
++ Nice to meet you!
++Concatenated string is 'Hi John Smith Nice to meet you!'
++
++Test 4: (Over-the-edge: string1 over the limit)
++Type the 1st string (q - to quit):
++Hello this is John Smith, Nice to meet you!
++Type the 2nd string:
++Concatenated string is 'Hello this is John Smith, Niceto meet you!'
++
++Test 5: (Over-the-edge: string2 over the limit)
++Type the 1st string (q - to quit):
++12345
++Type the 2nd string:
++Hi John Smith Nice to meet you!
++Concatenated string is '12345Hi John Smith Nice to meet you'
++
++Test 6: (Over-the-edge: after concatenation string1 over the limit)
++Type the 1st string (q - to quit):
++Hello this is John Smith,
++Type the 2nd string:
++ Nice to meet you!
++Concatenated string is 'Hello this is John Smith, Nice to meet you!'
++
+diff --git a/manipulating.c b/manipulating.c
+new file mode 100644
+index 0000000..58a46ce
+--- /dev/null
++++ b/manipulating.c
+@@ -0,0 +1,114 @@
++#define _CRT_SECURE_NO_WARNINGS
++/*
++Author: Jarvinia Zhao
++Email: jzhao169@myseneca.ca
++ID: 143013233
++Date Written: 11-27-2023
++Course: CPR101.NNN
++Final Project
++*/
++
++/* The costomized library "manipulating.h" header file provides :
++    2 standard libraies: stdio.h and string.h
++    Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
++    Prototype for function manipulating
++*/
++#include "manipulating.h"   
++
++/*
++Function Purpose: This function provides the functionality to manipulate Cstings
++*/
++void manipulating(void) {
++/* Version 1 */
++    //------------- Demo of String Concatenate ---------------
++    
++    // Display the staring message for user to understand the purpose of this demo
++    printf("**** Start of Concatenating Strings Demo ****\n");
++    // Declare 2 Cstring to store the string for concatenation 
++    char string1[BUFFER_SIZE]; // first string 
++    char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
++    
++    // Start a loop at least once and will continue until the user enter q to quit
++    do {
++        // Prompt the user for the first string
++        printf("Type the 1st string (q - to quit):\n");
++        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user
++        // Remove the newline character at the end of the input string
++        string1[strlen(string1) - 1] = '\0';
++
++        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
++        if (strcmp(string1, "q") == 0) {
++            break;
++        }
++
++        // Prompt the user for the second string
++        printf("Type the 2nd string:\n");
++        fgets(string2, BUFFER_SIZE, stdin);
++        // Remove the newline character at the end of the input string
++        string2[strlen(string2) - 1] = '\0'; // Read the second input string from user
++
++        // Concatenate the string2 to the string1
++        strcat(string1, string2);
++        // Display the result after concatenation
++        printf("Concatenated string is '%s'\n", string1);
++
++    } while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
++
++    printf("**** End of Concatenating Strings Demo ****\n");
++
++
++/* Version 2 */
++    printf("**** Start of Comparing Strings Demo ****\n");
++    char compare1[BUFFER_SIZE];
++    char compare2[BUFFER_SIZE];
++    int result;
++    do {
++        printf("Type the 1st string to compare (q - to quit):\n");
++        fgets(compare1, BUFFER_SIZE, stdin);
++        compare1[strlen(compare1) - 1] = '\0';
++        if (strcmp(compare1, "q") == 0) {
++            break;
++        }
++        printf("Type the 2nd string to compare:\n");
++        fgets(compare2, BUFFER_SIZE, stdin);
++        compare2[strlen(compare2) - 1] = '\0';
++        result = strcmp(compare1, compare2);
++        if (result < 0) {
++            printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
++        }
++        else if (result == 0) {
++            printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
++        }
++        else {
++            printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
++        }
++    } while (strcmp(compare1, "q") != 0);
++    printf("**** End of Comparing Strings Demo ****\n");
++    
++
++/* Version 3 
++    printf("**** Start of Searching Strings Demo ****\n");
++    char haystack[BUFFER_SIZE];
++    char needle[BUFFER_SIZE];
++    char* occurrence = NULL;
++    do {
++        printf("Type the string (q - to quit):\n");
++        fgets(haystack, BUFFER_SIZE, stdin);
++        haystack[strlen(haystack) - 1] = '\0';
++        if (strcmp(haystack, "q") == 0) {
++            break;
++        }
++        printf("Type the substring:\n");
++        fgets(needle, BUFFER_SIZE, stdin);
++        needle[strlen(needle) - 1] = '\0';
++        occurrence = strstr(haystack, needle);
++        if (occurrence) {
++            printf("\"%s\" found at %d position\n", needle, (int)(occurrence - haystack));
++        }
++        else {
++            printf("Not found\n");
++        }
++    } while (strcmp(haystack, "q") != 0);
++    printf("**** End of Searching Strings Demo ****\n");
++    */
++}
+\ No newline at end of file
+diff --git a/manipulating.h b/manipulating.h
+new file mode 100644
+index 0000000..fdbd4a4
+--- /dev/null
++++ b/manipulating.h
+@@ -0,0 +1,15 @@
++#pragma once
++// MANIPULATING MODULE HEADER
++#ifndef _MANIPULATING_H_
++#define _MANIPULATING_H_
++
++#include <stdio.h>
++#include <string.h>
++
++#define BUFFER_SIZE 32 // Define a constant for maximum string length
++
++// manipulating prototype: Allow users to manipulate string input
++//Including: string concatenate
++void manipulating(void);
++
++#endif
+\ No newline at end of file
+
+commit 4382fcc46f84af21341f49a0a3d637836ef55795
+Author: xiaohanfu123 <110127564+xiaohanfu123@users.noreply.github.com>
+Date:   Wed Nov 15 22:09:25 2023 -0500
+
+    Initial commit
+
+diff --git a/LICENSE b/LICENSE
+new file mode 100644
+index 0000000..3db340b
+--- /dev/null
++++ b/LICENSE
+@@ -0,0 +1,21 @@
++MIT License
++
++Copyright (c) 2023 xiaohanfu123
++
++Permission is hereby granted, free of charge, to any person obtaining a copy
++of this software and associated documentation files (the "Software"), to deal
++in the Software without restriction, including without limitation the rights
++to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
++copies of the Software, and to permit persons to whom the Software is
++furnished to do so, subject to the following conditions:
++
++The above copyright notice and this permission notice shall be included in all
++copies or substantial portions of the Software.
++
++THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
++IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
++FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
++AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
++LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
++OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
++SOFTWARE.
+diff --git a/README.md b/README.md
+new file mode 100644
+index 0000000..8a2ba66
+--- /dev/null
++++ b/README.md
+@@ -0,0 +1 @@
++# CPR101-Final-Project
+\ No newline at end of file

commit 65fd6432ce4b971660a56f7f960f06a714405a9b
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Sat Dec 2 19:02:49 2023 -0500

    Version 1&2: Correct typos and revise the wording

diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
index 741f37a..8058037 100644
Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ

commit 4b5197c169be2a959933edfdd976b123ed44f42e
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Sat Dec 2 19:01:42 2023 -0500

    Header file: Add and revise some comment for easy understanding

diff --git a/manipulating.h b/manipulating.h
index fdbd4a4..e3dcc7a 100644
--- a/manipulating.h
+++ b/manipulating.h
@@ -3,10 +3,12 @@
 #ifndef _MANIPULATING_H_
 #define _MANIPULATING_H_
 
+//All system library needed
 #include <stdio.h>
 #include <string.h>
 
-#define BUFFER_SIZE 32 // Define a constant for maximum string length
+// Define a constant for maximum length of input string 
+#define BUFFER_SIZE 32
 
 // manipulating prototype: Allow users to manipulate string input
 //Including: string concatenate

commit bccbd7b3a5fbf9465d1852b3dd642777bf3f29ce
Merge: 5724194 723cf02
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Sat Dec 2 18:58:38 2023 -0500

    Merge branch 'manipulating' of https://github.com/xiaohanfu123/CPR101-Final-Project into manipulating

commit 5724194a681ef0c8997824b91fc692f6dc29686f
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Sat Dec 2 18:57:50 2023 -0500

    Version 1&2: Revise some comments to make them easy to understand the codes

diff --git a/manipulating.c b/manipulating.c
index 31ce090..0e763bf 100644
--- a/manipulating.c
+++ b/manipulating.c
@@ -9,9 +9,9 @@ Final Project
 */
 
 /* The costomized library "manipulating.h" header file provides :
-    2 standard libraies: stdio.h and string.h
-    Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
-    Prototype for function manipulating
+    - 2 standard libraies: stdio.h and string.h
+    - Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
+    - Prototype for function manipulating
 */
 #include "manipulating.h"   
 
@@ -26,10 +26,10 @@ void manipulating(void) {
     // Display the staring message for user to understand the purpose of this demo
     //printf("**** Start of Concatenating Strings Demo ****\n");
     //// Declare 2 Cstring to store the string for concatenation 
-    //char string1[BUFFER_SIZE]; // first string 
-    //char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
+    //char string1[BUFFER_SIZE]; // first string to store user first input
+    //char string2[BUFFER_SIZE]; // second string to store user second input - concatenate to the end of first string
     //
-    //// Start a loop at least once and will continue until the user enter q to quit
+    //// Keep prompt for 2 string input until the user enter q to quit
     //do {
     //    // Prompt the user for the first string
     //    printf("Type the 1st string (q - to quit):\n");
@@ -65,11 +65,11 @@ void manipulating(void) {
     printf("**** Start of Comparing Strings Demo ****\n");
 
     // Declare 2 Cstring to store the string for comparison
-    char compare1[BUFFER_SIZE]; // first string
-    char compare2[BUFFER_SIZE]; // second string
+    char compare1[BUFFER_SIZE]; // first string to store user first input
+    char compare2[BUFFER_SIZE]; // second string to store user second input
     int result; // Store the comparison result
 
-    // Start a loop at least once and will continue until the user enter q to quit
+    // Keep prompt for 2 string input until the user enter q to quit
     do {
         // Prompt the user for the first string
         printf("Type the 1st string to compare (q - to quit):\n");
@@ -91,15 +91,15 @@ void manipulating(void) {
         result = strcmp(compare1, compare2);
 
         // Check the value of reuslt and display corresponding message to user
-        // compare1 < compare2
+        // compare1 < compare2 and output proper message to user
         if (result < 0) {
             printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
         }
-        // compare1 = compare2
+        // compare1 = compare2 and output proper message to user
         else if (result == 0) {
             printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
         }
-        // compare1 > compare2 
+        // compare1 > compare2 and output proper message to user
         else {
             printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
         }

commit 723cf0212615fd781700c1580261a1488b866e62
Author: Jarviniazhao <151060098+Jarviniazhao@users.noreply.github.com>
Date:   Fri Dec 1 09:30:48 2023 -0500

    Add general descriptions of manipulating

diff --git a/README.md b/README.md
index 8a2ba66..e8b903a 100644
--- a/README.md
+++ b/README.md
@@ -1 +1,4 @@
-# CPR101-Final-Project
\ No newline at end of file
+# CPR101-Final-Project
+
+- Manipulating <br />
+    This function provides the functionality to manipulate Cstings including 3 versions: string concatenation, comparison, and searching

commit 259290768c7d6f4affc068cf206f83183da7ecb6
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Fri Dec 1 08:33:26 2023 -0500

    Version 2: Comment out version1 code for testing version2 only

diff --git a/manipulating.c b/manipulating.c
index e57d2ae..31ce090 100644
--- a/manipulating.c
+++ b/manipulating.c
@@ -19,42 +19,43 @@ Final Project
 Function Purpose: This function provides the functionality to manipulate Cstings
 */
 void manipulating(void) {
+
 /* Version 1 */
     //------------- Demo of String Concatenate ---------------
     
     // Display the staring message for user to understand the purpose of this demo
-    printf("**** Start of Concatenating Strings Demo ****\n");
-    // Declare 2 Cstring to store the string for concatenation 
-    char string1[BUFFER_SIZE]; // first string 
-    char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
-    
-    // Start a loop at least once and will continue until the user enter q to quit
-    do {
-        // Prompt the user for the first string
-        printf("Type the 1st string (q - to quit):\n");
-        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
-        // Remove the newline character at the end of the input string
-        string1[strlen(string1) - 1] = '\0';
-
-        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
-        if (strcmp(string1, "q") == 0) {
-            break;
-        }
-
-        // Prompt the user for the second string
-        printf("Type the 2nd string:\n");
-        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
-        // Remove the newline character at the end of the input string
-        string2[strlen(string2) - 1] = '\0'; 
-
-        // Concatenate the string2 to the string1
-        strcat(string1, string2);
-        // Display the result after concatenation
-        printf("Concatenated string is '%s'\n", string1);
-
-    } while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
-
-    printf("**** End of Concatenating Strings Demo ****\n");
+    //printf("**** Start of Concatenating Strings Demo ****\n");
+    //// Declare 2 Cstring to store the string for concatenation 
+    //char string1[BUFFER_SIZE]; // first string 
+    //char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
+    //
+    //// Start a loop at least once and will continue until the user enter q to quit
+    //do {
+    //    // Prompt the user for the first string
+    //    printf("Type the 1st string (q - to quit):\n");
+    //    fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
+    //    // Remove the newline character at the end of the input string
+    //    string1[strlen(string1) - 1] = '\0';
+
+    //    // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
+    //    if (strcmp(string1, "q") == 0) {
+    //        break;
+    //    }
+
+    //    // Prompt the user for the second string
+    //    printf("Type the 2nd string:\n");
+    //    fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
+    //    // Remove the newline character at the end of the input string
+    //    string2[strlen(string2) - 1] = '\0'; 
+
+    //    // Concatenate the string2 to the string1
+    //    strcat(string1, string2);
+    //    // Display the result after concatenation
+    //    printf("Concatenated string is '%s'\n", string1);
+
+    //} while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
+
+    //printf("**** End of Concatenating Strings Demo ****\n");
 
 
 /* Version 2 */

commit 99c9ceef9a88f431213291029a49e438562858bd
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Thu Nov 30 23:45:15 2023 -0500

    Version 2: Finish testing with 7 cases with actual output and case report

diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
index 2a6351e..741f37a 100644
Binary files a/manipulating-test-cases.xlsx and b/manipulating-test-cases.xlsx differ
diff --git a/manipulating-testing.txt b/manipulating-testing.txt
index 3cf3d34..1d00335 100644
--- a/manipulating-testing.txt
+++ b/manipulating-testing.txt
@@ -42,3 +42,53 @@ Type the 2nd string:
  Nice to meet you!
 Concatenated string is 'Hello this is John Smith, Nice to meet you!'
 
+------Version 2-------
+Test 1: (Identical)
+Type the 1st string to compare (q - to quit):
+test
+Type the 2nd string to compare:
+test
+"test" string is equal to "test"
+
+Test 2: (Case sensitive)
+Type the 1st string to compare (q - to quit):
+Test
+Type the 2nd string to compare:
+test
+"Test" string is less than "test"
+
+Test 3: (Different length)
+Type the 1st string to compare (q - to quit):
+Hello World
+Type the 2nd string to compare:
+Hello
+"Hello World" string is greater than "Hello"
+
+Test 4: (Empty string)
+Type the 1st string to compare (q - to quit):
+
+Type the 2nd string to compare:
+
+"" string is equal to ""
+
+Test 5: (Special characters)
+Type the 1st string to compare (q - to quit):
+@123
+Type the 2nd string to compare:
+$456
+"@123" string is greater than "$456"
+
+Test 6: (Over-the-edge: compare1 over the limit)
+Type the 1st string to compare (q - to quit):
+Hello this is John Smith, Nice to meet you!
+Type the 2nd string to compare:
+"Hello this is John Smith, Nice" string is less than "to meet you!"
+
+Test 7: (Over-the-edge: compare2 over the limit)
+Type the 1st string to compare (q - to quit):
+Hello this is John Smith, Nice
+Type the 2nd string to compare:
+Hello this is John Smith, Nice to meet you!
+"Hello this is John Smith, Nice" string is equal to "Hello this is John Smith, Nice"
+Type the 1st string to compare (q - to quit):
+Type the 2nd string to compare:
\ No newline at end of file

commit e1419a3e16637354960b9e5ad4878737841c65c4
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Tue Nov 28 21:02:47 2023 -0500

    Version 2: Finish comments 1.0

diff --git a/manipulating.c b/manipulating.c
index caa2d08..e57d2ae 100644
--- a/manipulating.c
+++ b/manipulating.c
@@ -32,7 +32,7 @@ void manipulating(void) {
     do {
         // Prompt the user for the first string
         printf("Type the 1st string (q - to quit):\n");
-        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user
+        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user and stores in string1
         // Remove the newline character at the end of the input string
         string1[strlen(string1) - 1] = '\0';
 
@@ -43,7 +43,7 @@ void manipulating(void) {
 
         // Prompt the user for the second string
         printf("Type the 2nd string:\n");
-        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user
+        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user and stores in string2
         // Remove the newline character at the end of the input string
         string2[strlen(string2) - 1] = '\0'; 
 
@@ -58,31 +58,51 @@ void manipulating(void) {
 
 
 /* Version 2 */
+    //------------- Demo of String Comparing ---------------
+
+    // Display the staring message for user to understand the purpose of this demo
     printf("**** Start of Comparing Strings Demo ****\n");
-    char compare1[BUFFER_SIZE];
-    char compare2[BUFFER_SIZE];
-    int result;
+
+    // Declare 2 Cstring to store the string for comparison
+    char compare1[BUFFER_SIZE]; // first string
+    char compare2[BUFFER_SIZE]; // second string
+    int result; // Store the comparison result
+
+    // Start a loop at least once and will continue until the user enter q to quit
     do {
+        // Prompt the user for the first string
         printf("Type the 1st string to compare (q - to quit):\n");
-        fgets(compare1, BUFFER_SIZE, stdin);
+        fgets(compare1, BUFFER_SIZE, stdin); // Read the first input Cstring from user and stores in compare1
+        // Remove the newline character at the end of the input string
         compare1[strlen(compare1) - 1] = '\0';
+
+        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
         if (strcmp(compare1, "q") == 0) {
             break;
         }
+        // Prompt the user for the second string
         printf("Type the 2nd string to compare:\n");
-        fgets(compare2, BUFFER_SIZE, stdin);
+        fgets(compare2, BUFFER_SIZE, stdin); // Read the second input Cstring from user and stores in compare2
+        // Remove the newline character at the end of the input string
         compare2[strlen(compare2) - 1] = '\0';
+
+        // Compare compare1 with compare2 and store the result to variable reuslt
         result = strcmp(compare1, compare2);
+
+        // Check the value of reuslt and display corresponding message to user
+        // compare1 < compare2
         if (result < 0) {
             printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
         }
+        // compare1 = compare2
         else if (result == 0) {
             printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
         }
+        // compare1 > compare2 
         else {
             printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
         }
-    } while (strcmp(compare1, "q") != 0);
+    } while (strcmp(compare1, "q") != 0); // Continue looping until the user enter 'q' for the compare1
     printf("**** End of Comparing Strings Demo ****\n");
     
 

commit 63486a4aa9da65f01fe5b158a7a62d3683e27e23
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Tue Nov 28 20:48:36 2023 -0500

    Correct a comment for Version 1, which was put for wrong code

diff --git a/manipulating.c b/manipulating.c
index 58a46ce..caa2d08 100644
--- a/manipulating.c
+++ b/manipulating.c
@@ -43,9 +43,9 @@ void manipulating(void) {
 
         // Prompt the user for the second string
         printf("Type the 2nd string:\n");
-        fgets(string2, BUFFER_SIZE, stdin);
+        fgets(string2, BUFFER_SIZE, stdin); // Read the second input string from user
         // Remove the newline character at the end of the input string
-        string2[strlen(string2) - 1] = '\0'; // Read the second input string from user
+        string2[strlen(string2) - 1] = '\0'; 
 
         // Concatenate the string2 to the string1
         strcat(string1, string2);

commit 13220bd1bfb31415bbed9664fd1e9fb3796c0525
Author: Jarvinia Zhao <jzhao169@myseneca.ca>
Date:   Tue Nov 28 20:27:55 2023 -0500

    Adding completed work of version 1 for manipulating

diff --git a/manipulating-test-cases.xlsx b/manipulating-test-cases.xlsx
new file mode 100644
index 0000000..2a6351e
Binary files /dev/null and b/manipulating-test-cases.xlsx differ
diff --git a/manipulating-testing.txt b/manipulating-testing.txt
new file mode 100644
index 0000000..3cf3d34
--- /dev/null
+++ b/manipulating-testing.txt
@@ -0,0 +1,44 @@
+Manipulating Testing 
+
+------Version 1-------
+Test 1: (Normal case)
+Type the 1st string (q - to quit):
+John
+Type the 2nd string:
+ Simith
+Concatenated string is 'John Simith'
+
+Test 2: (Empty string)
+Type the 1st string (q - to quit):
+
+Type the 2nd string:
+
+Concatenated string is ''
+
+Test 3: (Edge case)
+Type the 1st string (q - to quit):
+Hi John Smith
+Type the 2nd string:
+ Nice to meet you!
+Concatenated string is 'Hi John Smith Nice to meet you!'
+
+Test 4: (Over-the-edge: string1 over the limit)
+Type the 1st string (q - to quit):
+Hello this is John Smith, Nice to meet you!
+Type the 2nd string:
+Concatenated string is 'Hello this is John Smith, Niceto meet you!'
+
+Test 5: (Over-the-edge: string2 over the limit)
+Type the 1st string (q - to quit):
+12345
+Type the 2nd string:
+Hi John Smith Nice to meet you!
+Concatenated string is '12345Hi John Smith Nice to meet you'
+
+Test 6: (Over-the-edge: after concatenation string1 over the limit)
+Type the 1st string (q - to quit):
+Hello this is John Smith,
+Type the 2nd string:
+ Nice to meet you!
+Concatenated string is 'Hello this is John Smith, Nice to meet you!'
+
diff --git a/manipulating.c b/manipulating.c
new file mode 100644
index 0000000..58a46ce
--- /dev/null
+++ b/manipulating.c
@@ -0,0 +1,114 @@
+#define _CRT_SECURE_NO_WARNINGS
+/*
+Author: Jarvinia Zhao
+Email: jzhao169@myseneca.ca
+ID: 143013233
+Date Written: 11-27-2023
+Course: CPR101.NNN
+Final Project
+*/
+
+/* The costomized library "manipulating.h" header file provides :
+    2 standard libraies: stdio.h and string.h
+    Defined macro 'BUFFER_SIZE' setting the max string length for manipulation
+    Prototype for function manipulating
+*/
+#include "manipulating.h"   
+
+/*
+Function Purpose: This function provides the functionality to manipulate Cstings
+*/
+void manipulating(void) {
+/* Version 1 */
+    //------------- Demo of String Concatenate ---------------
+    
+    // Display the staring message for user to understand the purpose of this demo
+    printf("**** Start of Concatenating Strings Demo ****\n");
+    // Declare 2 Cstring to store the string for concatenation 
+    char string1[BUFFER_SIZE]; // first string 
+    char string2[BUFFER_SIZE]; // second string - concatenate to the end of first string
+    
+    // Start a loop at least once and will continue until the user enter q to quit
+    do {
+        // Prompt the user for the first string
+        printf("Type the 1st string (q - to quit):\n");
+        fgets(string1, BUFFER_SIZE, stdin); // Read the first input string from user
+        // Remove the newline character at the end of the input string
+        string1[strlen(string1) - 1] = '\0';
+
+        // Check whether the user wants to exit current demo. If user input 'q', then exit the demo
+        if (strcmp(string1, "q") == 0) {
+            break;
+        }
+
+        // Prompt the user for the second string
+        printf("Type the 2nd string:\n");
+        fgets(string2, BUFFER_SIZE, stdin);
+        // Remove the newline character at the end of the input string
+        string2[strlen(string2) - 1] = '\0'; // Read the second input string from user
+
+        // Concatenate the string2 to the string1
+        strcat(string1, string2);
+        // Display the result after concatenation
+        printf("Concatenated string is '%s'\n", string1);
+
+    } while (strcmp(string1, "q") != 0); // Continue looping until the user enter 'q' for the string1
+
+    printf("**** End of Concatenating Strings Demo ****\n");
+
+
+/* Version 2 */
+    printf("**** Start of Comparing Strings Demo ****\n");
+    char compare1[BUFFER_SIZE];
+    char compare2[BUFFER_SIZE];
+    int result;
+    do {
+        printf("Type the 1st string to compare (q - to quit):\n");
+        fgets(compare1, BUFFER_SIZE, stdin);
+        compare1[strlen(compare1) - 1] = '\0';
+        if (strcmp(compare1, "q") == 0) {
+            break;
+        }
+        printf("Type the 2nd string to compare:\n");
+        fgets(compare2, BUFFER_SIZE, stdin);
+        compare2[strlen(compare2) - 1] = '\0';
+        result = strcmp(compare1, compare2);
+        if (result < 0) {
+            printf("\"%s\" string is less than \"%s\"\n", compare1, compare2);
+        }
+        else if (result == 0) {
+            printf("\"%s\" string is equal to \"%s\"\n", compare1, compare2);
+        }
+        else {
+            printf("\"%s\" string is greater than \"%s\"\n", compare1, compare2);
+        }
+    } while (strcmp(compare1, "q") != 0);
+    printf("**** End of Comparing Strings Demo ****\n");
+    
+
+/* Version 3 
+    printf("**** Start of Searching Strings Demo ****\n");
+    char haystack[BUFFER_SIZE];
+    char needle[BUFFER_SIZE];
+    char* occurrence = NULL;
+    do {
+        printf("Type the string (q - to quit):\n");
+        fgets(haystack, BUFFER_SIZE, stdin);
+        haystack[strlen(haystack) - 1] = '\0';
+        if (strcmp(haystack, "q") == 0) {
+            break;
+        }
+        printf("Type the substring:\n");
+        fgets(needle, BUFFER_SIZE, stdin);
+        needle[strlen(needle) - 1] = '\0';
+        occurrence = strstr(haystack, needle);
+        if (occurrence) {
+            printf("\"%s\" found at %d position\n", needle, (int)(occurrence - haystack));
+        }
+        else {
+            printf("Not found\n");
+        }
+    } while (strcmp(haystack, "q") != 0);
+    printf("**** End of Searching Strings Demo ****\n");
+    */
+}
\ No newline at end of file
diff --git a/manipulating.h b/manipulating.h
new file mode 100644
index 0000000..fdbd4a4
--- /dev/null
+++ b/manipulating.h
@@ -0,0 +1,15 @@
+#pragma once
+// MANIPULATING MODULE HEADER
+#ifndef _MANIPULATING_H_
+#define _MANIPULATING_H_
+
+#include <stdio.h>
+#include <string.h>
+
+#define BUFFER_SIZE 32 // Define a constant for maximum string length
+
+// manipulating prototype: Allow users to manipulate string input
+//Including: string concatenate
+void manipulating(void);
+
+#endif
\ No newline at end of file

commit 4382fcc46f84af21341f49a0a3d637836ef55795
Author: xiaohanfu123 <110127564+xiaohanfu123@users.noreply.github.com>
Date:   Wed Nov 15 22:09:25 2023 -0500

    Initial commit

diff --git a/LICENSE b/LICENSE
new file mode 100644
index 0000000..3db340b
--- /dev/null
+++ b/LICENSE
@@ -0,0 +1,21 @@
+MIT License
+
+Copyright (c) 2023 xiaohanfu123
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
diff --git a/README.md b/README.md
new file mode 100644
index 0000000..8a2ba66
--- /dev/null
+++ b/README.md
@@ -0,0 +1 @@
+# CPR101-Final-Project
\ No newline at end of file
